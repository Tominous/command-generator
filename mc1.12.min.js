function firstLoad() {
    $.ajaxSetup({
        cache: !1
    }), loadMainControls(), loadMainForm(!1), setTimeout(function() {
        adblock && "" == getCookie("d") && $("#ppDon").load("noads.html")
    }, 1e4)
}

function loadMainControls() {
    $("#mainControls").html(mkLL("label", llCommandType) + "<select id='commandType' onChange='changeCommandType()' autocomplete='off'" + mkTT(ttCommandType) + "><option value='Summon' selected>Summon</option><option value='Spawner'>Spawner</option><option value='Give'>Give</option><option value='ReplaceItemEntity'>Replace Item (entity)</option><option value='ReplaceItemBlock'>Replace Item (block)</option>\t<option value='SetBlock'>Set Block</option><option value='Fill'>Fill</option><option value='BlockData'>Block Data</option><option value='AnyCommand'>Any Command</option></select>" + makeButton(llResetForm, "changeCommandType()", ttResetForm) + makeButton(llSaveAs, "saveDetailsForm(-1)", ttSaveAs) + "<span id='XMLControls'>" + makeButton(llEditXML, "showXMLEditor()", ttEditXML) + "</span>" + mkLL("label", llMCVersion) + "<b></b> <a href='mcstacker1.11.php'></a>  <a href='mcstacker1.10.php'> </a><span id='feedback'></span>")
}

function showXMLEditor() {
    $("#xmlEditor").remove(), $("#mainControls").append("<div id='xmlEditor'><textarea id='xmlEdit'></textarea></div>"), $("#XMLControls").html(makeButton(llExportXML, "exportXML()", ttExportXML) + makeButton(llImportXML, "importXML()", ttImportXML) + makeButton(llCloseXML, "closeXMLEditor()", ttCloseXML)), exportXML()
}

function closeXMLEditor() {
    $("#XMLControls").html(makeButton(llEditXML, "showXMLEditor()", ttEditXML)), $("#xmlEditor").remove()
}

function exportXML() {
    $("#xmlEdit").val(vkbeautify.xml(generateXML()))
}

function importXML() {
    try {
        loadXML($.parseXML($("#xmlEdit").val()))
    } catch (o) {
        for (var e = "", t = $("#xmlEdit").val().split("\n"), a = 0; a < t.length; a++)
            if (t[a].split("&").length == t[a].split("&amp;").length || n.split("'\"").length > 1) {
                var n = t[a];
                n.split("<>'\"").length > 1 && (n = n.replace(/"/g, "&quot;").replace(/'/g, "&apos;")), e += n
            } else t[a].split("&").length != t[a].split("&amp;").length ? e += t[a].replace(/&/g, "&amp;") : e += t[a];
        try {
            loadXML($.parseXML(e))
        } catch (e) {
            alertify.alert(eeBrokenXML)
        }
    }
}

function makeModeEnchantAll() {
    return "<input type='checkbox' id='modeEnchantAll' onChange='generateSummon()'" + mkTT(ttEnchantAll) + ">" + llEnchantAll
}

function loadMainForm(e) {
    e ? (mainLabel = llBlockCoords, x = ttBlockX, y = ttBlockY, z = ttBlockZ, ttrel = ttRelativeBlock) : (mainLabel = llSummonCoords, x = ttSummonX, y = ttSummonY, z = ttSummonZ, ttrel = ttRelativeCoords), $("#inputForm").html(mkLL("label", llAddEntity) + "<img src='add.png'" + mkTT(ttAddEntity) + " onClick='createEntityListSelect()'>" + mkLL("label", mainLabel) + "<b> X<input type='text' id='xpos' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(x) + "> Y<input type='text' id='ypos' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(y) + "> Z<input type='text' id='zpos' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(z) + "><input type='checkbox' id='relative' onClick='generateSummon()'" + mkTT(ttrel) + " CHECKED>" + llRelativeCoords + "</b><br>" + makeModeEnchantAll() + "<br><div id='spawnerOptions'></div>"), e ? $("#spawnerOptions").html(mkLL("entityLabelBig", llSpawnCount) + "<input type='text' id='SpawnCount' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttSpawnCount) + ">" + mkLL("entityLabelBig", llSpawnRange) + "<input type='text' id='SpawnRange' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttSpawnRange) + ">" + mkLL("entityLabelBig", llRequiredPlayerRange) + "<input type='text' id='RequiredPlayerRange' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttRequiredPlayerRange) + ">" + mkLL("entityLabelBig", llMaxNearbyEntities) + "<input type='text' id='MaxNearbyEntities' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttMaxNearbyEntities) + "><br>" + mkLL("entityLabelBig", llDelay) + "<input type='text' id='Delay' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttDelay) + ">" + mkLL("entityLabelBig", llMinSpawnDelay) + "<input type='text' id='MinSpawnDelay' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttMinSpawnDelay) + ">" + mkLL("entityLabelBig", llMaxSpawnDelay) + "<input type='text' id='MaxSpawnDelay' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttMaxSpawnDelay) + "><br>" + mkLL("entityLabelBig", llSpawnPosition) + "<b> X<input type='text' id='spawnXpos' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttSpawnX) + "> Y<input type='text' id='spawnYpos' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttSpawnY) + "> Z<input type='text' id='spawnZpos' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttSpawnZ) + "></b>") : $("#spawnerOptions").hide(), createEntityListSelect()
}

function loadGiveForm(e) {
    $("#inputForm").html(targetTypeSelector("specific") + makeModeEnchantAll() + "<div class='EntityOptions' id='targetSpecs'><span class='leftPan'>" + mkLL("entityLabelBig", llPlayerName) + "<input type='text' id='playerName' value='PlayerNameHere' class='inputLarge' onKeyUp='generateSummon()'" + mkTT(ttPlayerName) + "></span></div>"), lineID = 0, e && ($("#inputForm").append("<div class='EntityOptions' id='repaceItemEntity'></div>"), loadReplaceItemForm("repaceItemEntity")), $("#inputForm").append("<div class='EntityOptions' id='giveItem'></div>"), $("#giveItem").append("<span class='leftpan'  id='attributes_" + lineID + "'><span class='rightPan'>" + mkLL("equipmentLabel", llItemSelect) + makeSelectHoldingItem("Item_" + lineID, mkTT(ttItemSelect)) + "<br>" + makeDropChanceSelect("Item_DC_" + lineID, !1) + makeEquipmentNameLore(lineID, "Item") + makeCanDestroyCanPlaceOnHideFlags(lineID, "Item") + makeEnchantmentCheckBoxes("Item_" + lineID)), $("#Item_cdPanel_" + lineID).hide(), $("#Item_cpoPanel_" + lineID).hide(), $("#Item_hfPanel_" + lineID).hide(), makeAttributeModifiersUI("itemAttributeModifiers_Item_" + lineID, "giveItem"), loadTargetSpecifiers()
}

function createEntityListSelect() {
    var e = "<div class='EntityOptions' id='entityDiv_" + entityIndex + "'><span class='leftDivAndControls'><span id='entityOrdering_" + entityIndex + "' class='entityOrdering'>" + mkLL("entityLabelBig", llEntity) + "<select class='entityList' id='entityList_" + entityIndex + "' onChange='updateOptions(" + entityIndex + ")'" + mkTT(ttEntity) + ">";
    for (i = 0; i < entities.length; i++) e += "<option value='" + entities[i][1] + "'>" + entities[i][1] + "</option>";
    e += "</select><img src='cross.png' id='deleteButton" + entityIndex + "' onClick='deleteEntityListSelect(" + entityIndex + ")'" + mkTT(ttRemoveFromStack) + ">", e += "<img src='minus.png' " + mkTT(ttShowHide) + " id='showHide_" + entityIndex + "' onClick='showHide(" + entityIndex + ")'><img src='up.png'" + mkTT(ttMoveUpStack) + "  id='up_" + entityIndex + "' onClick='moveUp(" + entityIndex + ")'><img src='down.png'" + mkTT(ttMoveDownStack) + " id='down_" + entityIndex + "' onClick='moveDown(" + entityIndex + ")'></span>", e += "<div class='leftDiv' id='leftDiv_" + entityIndex + "'>", e += "</div></span><div class='rightDiv' id='rightDiv_" + entityIndex + "'></div></div>", $("#inputForm").append(e), updateOptions(entityIndex), entityIndex++, showHideMovmentButtons(), generateSummon()
}

function moveDown(e) {
    var t, a = $("#inputForm > .EntityOptions").map(function() {
            return this.id || null
        }).get();
    for (i = 0; i < a.length - 1; i++)
        if ((t = a[i].split("_")[1]) == e) {
            t = a[i + 1].split("_")[1], $("#entityDiv_" + e).insertAfter("#entityDiv_" + t);
            break
        }
    showHideMovmentButtons(), generateSummon()
}

function moveUp(e) {
    var t, a = $("#inputForm > .EntityOptions").map(function() {
            return this.id || null
        }).get();
    for (i = 1; i < a.length; i++)
        if ((t = a[i].split("_")[1]) == e) {
            t = a[i - 1].split("_")[1], $("#entityDiv_" + e).insertBefore("#entityDiv_" + t);
            break
        }
    showHideMovmentButtons(), generateSummon()
}

function showHideMovmentButtons() {
    var e, t = $("#inputForm > .EntityOptions").map(function() {
            return this.id || null
        }).get();
    for (i = 0; i < t.length; i++) e = t[i].split("_")[1], 1 == t.length ? ($("#up_" + e).hide(), $("#down_" + e).hide()) : 0 == i ? ($("#up_" + e).hide(), $("#down_" + e).show()) : i == t.length - 1 ? ($("#up_" + e).show(), $("#down_" + e).hide()) : ($("#up_" + e).show(), $("#down_" + e).show())
}

function showHide(e) {
    $("#leftDiv_" + e).is(":visible") ? ($("#leftDiv_" + e).hide(), $("#rightDiv_" + e).hide(), $("#showHide_" + e).attr("src", "plus.png"), $("#showHide_" + e).attr("title", "Show")) : ($("#leftDiv_" + e).show(), $("#rightDiv_" + e).show(), $("#showHide_" + e).attr("src", "minus.png"), $("#showHide_" + e).attr("title", "Hide"))
}

function makeCheckbox(e, t) {
    return "<input type='checkbox' id='" + e + "'" + t + "  onClick='generateSummon()'>"
}

function deleteEntityListSelect(e) {
    $("#inputForm > .EntityOptions").map(function() {
        return this.id || null
    }).get().length > 1 ? ($("#entityDiv_" + e).remove(), showHideMovmentButtons(), generateSummon()) : alertify.error(eeKeepOneEntity)
}

function changeCommandType() {
    "Summon" == $("#commandType").val() ? loadMainForm(!1) : "Spawner" == $("#commandType").val() ? loadMainForm(!0) : "Give" == $("#commandType").val() ? loadGiveForm(!1) : "ReplaceItemEntity" == $("#commandType").val() ? loadGiveForm(!0) : "ReplaceItemBlock" == $("#commandType").val() ? loadBlockForm($("#commandType").val()) : "SetBlock" == $("#commandType").val() ? loadBlockForm($("#commandType").val()) : "Fill" == $("#commandType").val() ? loadBlockForm($("#commandType").val()) : "BlockData" == $("#commandType").val() ? loadBlockForm($("#commandType").val()) : "AnyCommand" == $("#commandType").val() && (loadAnyCommandForm($("#commandType").val()), $(".summonDiv").hide()), "AnyCommand" != $("#commandType").val() && $(".summonDiv").show(), generateSummon()
}

function loadAnyCommandForm() {
    $("#inputForm").html(mkLL("label", llCommand) + "<br><textarea id='anyCommand'" + mkTT(ttAnyCommand) + "></textarea>")
}

function hasDrops(e) {
    return !isVehicle(e) && "painting" != e && "item" != e && "area_effect_cloud" != e && "item_frame" != e && "lightning_bolt" != e && "xp_orb" != e && "falling_block" != e && "evocation_fangs" != e && "armor_stand" != e && "tnt" != e && "ender_crystal" != e && "shulker_bullet" != e && !isProjectile(e) && "fireworks_rocket" != e && "eye_of_ender_signal" != e
}

function isProjectile(e) {
    return "spectral_arrow" == e || "arrow" == e || "snowball" == e || "fireball" == e || "dragon_fireball" == e || "small_fireball" == e || "ender_pearl" == e || "egg" == e || "xp_bottle" == e || "potion" == e || "llama_spit" == e || "wither_skull" == e
}

function updateOptions(e) {
    mLineID = e;
    var t = $("#entityList_" + e + " option:selected").text();
    if ($("#rightDiv_" + e).html(mkLL("equipmentLabel", llCustomNameEntity) + "<input type='text' id='entityCustomName_" + e + "' onkeyup='generateSummon()'" + mkTT(ttCustomNameEntity) + ">" + mkLL("label", llHideCustomName) + makeCheckbox("hideCustomName_" + e, mkTT(ttHideCustomName)) + "<br>" + mkLL("equipmentLabel", llTargetTags) + "<input type='text' id='Tags_" + e + "' onkeyup='generateSummon()'" + mkTT(ttTargetTags) + "><br>" + mkLL("entityLabelBig", llStackID) + "<input type='text' id='StackID_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttStackID) + ">" + mkLL("entityLabelBig", llRidingStackID) + "<input type='text' id='RidingStackID_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttRidingStackID) + "><br>" + mkLL("entityLabelBig", llUUIDLeast) + "<input type='text' id='entityUUIDLeast_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttUUIDLeast) + ">" + mkLL("entityLabelBig", llUUIDMost) + "<input type='text' id='entityUUIDMost_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttUUIDMost) + "><br>"), $("#leftDiv_" + e).html(""), makeMotion(e), $("#leftDiv_" + e).append("<span class='leftpan' id='attributes_" + e + "'><span>"), $("#attributes_" + e).append("<br>" + mkLL("entityLabelBig", llNoGravity) + makeCheckbox("NoGravity_" + e, mkTT(ttNoGravity))), isVehicle(t) && $("#rightDiv_" + e).append(mkLL("entityLabelBig", llInvulnerable) + makeCheckbox("invulnerable_" + e, mkTT(ttInvulnerable)) + "<br>"), hasDrops(t) && (makeAttributes(e), makeStatusEffectCheckBoxes("#leftDiv_" + e), updateEquipmentOptions(e)), canBreed(t) && ($("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llInLove) + "<input type='text' id='InLove_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttInLove) + "><br>" + mkLL("entityLabelBig", llAge) + "<input type='text' id='Age_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAge) + "><br>" + mkLL("entityLabelBig", llForcedlAge) + "<input type='text' id='ForcedAge_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttForcedlAge) + "><br>" + mkLL("entityLabelBig", llOwner) + "<input type='text' id='Owner_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttOwner) + "><br>" + mkLL("entityLabelBig", llOwnerUUID) + "<input type='text' id='OwnerUUID_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttOwnerUUID) + ">"), "Wolf" != t && "Ozelot" != t || $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llSitting) + makeCheckbox("Sitting_" + e, mkTT(ttSitting)))), isProjectile(t))
        if ("fireball" != t && "small_fireball" != t && "dragon_fireball" != t && "wither_skull" != t || $("#rightDiv_" + e).append(mkLL("entityLabelBig", llXpower) + "<input type='text' id='powerX_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttpower) + "><br>" + mkLL("entityLabelBig", llYpower) + "<input type='text' id='powerY_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttpower) + "><br>" + mkLL("entityLabelBig", llZpower) + "<input type='text' id='powerZ_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttpower) + "><br>" + mkLL("entityLabelBig", llProjectileLife) + "<input type='text' id='Life_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttProjectileLife) + "><br>"), "arrow" == t || "spectral_arrow" == t) $("#rightDiv_" + e).append(mkLL("entityLabelBig", llInGround) + makeCheckbox("inGround_" + e, mkTT(ttInGround)) + "<br>" + mkLL("entityLabelBig", llPickup) + makeSelectWithIndex("pickup_" + e, [0, 1, 2], [llPickup0, llPickup1, llPickup2], mkTT(ttPickup)) + "<br>" + mkLL("entityLabelBig", llPlayerPickup) + makeCheckbox("player_" + e, mkTT(ttPlayerPickup)) + "<br>" + mkLL("entityLabelBig", llCrit) + makeCheckbox("crit_" + e, mkTT(ttCrit)) + "<br>" + mkLL("entityLabelBig", llArrowLife) + "<input type='text' id='life_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttArrowLife) + "><br>" + mkLL("entityLabelBig", llArrowDamage) + "<input type='text' id='damage_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttArrowDamage) + "><br>"), "spectral_arrow" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llSpectralDuration) + "<input type='text' id='duration_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttSpectralDuration) + ">") : (makePotionSelector("#rightDiv_" + e), makeStatusEffectCheckBoxes("#rightDiv_" + e));
        else if ("fireball" == t) $("#rightDiv_" + e).append(mkLL("entityLabelBig", llExplosionPower) + "<input type='text' id='ExplosionPower_" + e + "' onkeyup='generateSummon()' class='inputSmall' value=1" + mkTT(ttExplosionPower) + ">");
    else if (("ender_pearl" == t || "xp_bottle" == t || "potion" == t || "snowball" == t) && ($("#rightDiv_" + e).append(mkLL("entityLabelBig", llOwnerName) + "<input type='text' id='ownerName_" + e + "' onkeyup='generateSummon()' class='inputBig'" + mkTT(ttOwnerName) + "></span>"), "potion" == t)) {
        var n = "<select id='potionBottle_" + e + "' onChange='generateSummon()'" + mkTT(ttPotionAppearance) + ">";
        for (i = 0; i < items.length; i++) - 1 != items[i][0].indexOf("potion:") && (n += "<option value='" + items[i][0] + "'>" + items[i][1] + "</option>");
        n += "</select><br>", $("#rightDiv_" + e).append("<br>" + mkLL("entityLabel", "(1.8)" + llPotionAppearance) + n + mkLL("entityLabel", llLingering) + makeCheckbox("Lingering_" + e, mkTT(ttLingering)) + "<br>"), makePotionSelector("#rightDiv_" + e), makeStatusEffectCheckBoxes("#rightDiv_" + e)
    }
    if ("area_effect_cloud" == t) $("#rightDiv_" + e).append(mkLL("entityLabelBig", llParticle) + makeParticleSelector("Particle_" + e, mkTT(ttParticle)) + "<br>" + mkLL("entityLabelBig", llReapplicationDelay) + "<input type='text' id='ReapplicationDelay_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttReapplicationDelay) + "><br>" + mkLL("entityLabelBig", llRadius) + "<input type='text' id='Radius_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttRadius) + "><br>" + mkLL("entityLabelBig", llRadiusPerTick) + "<input type='text' id='RadiusPerTick_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttRadiusPerTick) + "><br>" + mkLL("entityLabelBig", llRadiusOnUse) + "<input type='text' id='RadiusOnUse_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttRadiusOnUse) + "><br>" + mkLL("entityLabelBig", llDuration) + "<input type='text' id='Duration_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttDuration) + "><br>" + mkLL("entityLabelBig", llDurationOnUse) + "<input type='text' id='DurationOnUse_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttDurationOnUse) + "><br>" + mkLL("entityLabelBig", llAgeAreaEffectCloud) + "<input type='text' id='Age_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAgeAreaEffectCloud) + "><br>" + mkLL("entityLabelBig", llWaitTime) + "<input type='text' id='WaitTime_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttWaitTime) + "><br>" + mkLL("entityLabelBig", llOwnerUUIDLeast) + "<input type='text' id='OwnerUUIDLeast_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttOwnerUUIDLeast) + "><br>" + mkLL("entityLabelBig", llOwnerUUIDMost) + "<input type='text' id='OwnerUUIDMost_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttOwnerUUIDMost) + "><br>" + mkLL("entityLabelBig", llColorAreaEffectCloud) + "<span id='ColorAreaEffectCloud_" + e + "_Color'></span>"), makePotionSelector("#rightDiv_" + e), makeColorChooser("ColorAreaEffectCloud_" + e, "#ColorAreaEffectCloud_" + e + "_Color", ttColorAreaEffectCloud), makeStatusEffectCheckBoxes("#rightDiv_" + e);
    else if ("armor_stand" == t) {
        var o = new Array(llArmorBody, llArmorLeftArm, llArmorRightArm, llArmorLeftLeg, llArmorRightLeg, llArmorHead),
            l = new Array("x", "y", "z"),
            r = "<table class='poseTable'><tr><th width=100>" + llPose + "</th><th width=100>X&nbsp;" + llArmorRotation + "</th><th width=100>Y&nbsp;" + llArmorRotation + "</th><th width=100>Z&nbsp;" + llArmorRotation + "</th></tr>";
        for (p = 0; p < o.length; p++) {
            for (r += "<tr><th>" + o[p] + "</th>", a = 0; a < l.length; a++) r += "<td class='armorStand'><input type='text' class='inputSmall' id='pose_" + e + "_" + p + "_" + l[a] + "' onkeyUp='generateSummon()' title='" + o[p] + " " + l[a].toUpperCase() + " " + llArmorRotation + "'></td>";
            r += "</tr>"
        }
        r += "</table>";
        var s = new Array("remove", "replace", "place"),
            c = "<table class='poseTable'><tr><th width=100>" + llDisabledSlots + "</th><th width=100>" + llArmorOperationRemove + "</th><th width=100>" + llArmorOperationReplace + "</th><th width=100>" + llArmorOperationPlace + "</th></tr>";
        for (p = 0; p < disabledSlots.length; p++) c += "<tr><th>" + disabledSlots[p] + "</th>", c += "<td class='armorStand'><input type='checkbox' id='disableSlot_" + e + "_" + p + "_" + s[0] + "' onClick='generateSummon()' title='" + llArmorOperationRemove + llDisabledFor + disabledSlots[p] + "'></td>", c += "<td class='armorStand'><input type='checkbox' id='disableSlot_" + e + "_" + p + "_" + s[1] + "' onClick='generateSummon()' title='" + llArmorOperationReplace + llDisabledFor + disabledSlots[p] + "'></td>", c += "<td class='armorStand'><input type='checkbox' id='disableSlot_" + e + "_" + p + "_" + s[2] + "' onClick='generateSummon()' title='" + llArmorOperationPlace + llDisabledFor + disabledSlots[p] + "'></td>", c += "</tr>";
        c += "</table>", $("#leftDiv_" + e).append("<br><span id='attributes_" + e + "'>" + mkLL("entityLabelBig", llShowArms) + makeCheckbox("ShowArms_" + e, mkTT(ttShowArms)) + "<br>" + mkLL("entityLabelBig", llSmall) + makeCheckbox("Small_" + e, mkTT(ttSmall)) + "<br>" + mkLL("entityLabelBig", llInvulnerable) + makeCheckbox("invulnerable_" + e, mkTT(ttInvulnerable)) + "<br>" + mkLL("entityLabelBig", llMarker) + makeCheckbox("Marker_" + e, mkTT(ttMarker)) + "<br>" + mkLL("entityLabelBig", llInvisible) + makeCheckbox("Invisible_" + e, mkTT(ttInvisible)) + "<br>" + mkLL("entityLabelBig", llGlowing) + makeCheckbox("glowing_" + e, mkTT(ttGlowing)) + "<br>" + mkLL("entityLabelBig", llNoBasePlate) + makeCheckbox("NoBasePlate_" + e, mkTT(ttNoBasePlate)) + "<br>" + mkLL("entityLabelBig", llBaseRotation) + "<input type='text' id='Rotation_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttBaseRotation) + "><br>" + mkLL("entityLabelBig", llFallFlying) + "<input type='checkbox' id='FallFlying_" + e + "' onclick='generateSummon()'" + mkTT(ttFallFlying) + "><br>" + mkLL("entityLabelBig", llPersistence) + makeCheckbox("PersistenceRequired_" + e, mkTT(ttPersistence)) + r + "<br>" + c + "</span>"), updateEquipmentOptions(e)
    } else "bat" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llHangUpsideDown) + makeCheckbox("BatFlags_" + e, mkTT(ttHangUpsideDown))) : "boat" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llBoatType) + makeSelect("BoatType_" + e, ["oak", "spruce", "birch", "jungle", "acacia", "dark_oak"], mkTT(ttBoatType))) : "chicken" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llChickenJockey) + makeCheckbox("IsChickenJockey_" + e, mkTT(ttChickenJockey)) + "<br>" + mkLL("entityLabelBig", llEggLayTime) + "<input type='text' id='EggLayTime_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttEggLayTime) + ">") : "creeper" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llPowered) + makeCheckbox("powered_" + e, mkTT(ttPowered)) + "<br>" + mkLL("entityLabelBig", llIgnited) + makeCheckbox("ignited_" + e, mkTT(ttIgnited)) + "<br>" + mkLL("entityLabelBig", llExplosionRadius) + "<input type='text' id='ExplosionRadius_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttExplosionRadius) + "><br>" + mkLL("entityLabelBig", llFuse) + "<input type='text' id='Fuse_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttFuse) + ">") : "ender_crystal" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llBeamTarget + " X") + "<input type='text' class='inputSmall'  id='BTX_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttBTXYZ) + "><br>" + mkLL("entityLabelBig", "Y") + "<input type='text' class='inputSmall'  id='BTY_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttBTXYZ) + "><br>" + mkLL("entityLabelBig", "Z") + "<input type='text' class='inputSmall'  id='BTZ_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttBTXYZ) + "><br>" + mkLL("entityLabelBig", llHideBase) + makeCheckbox("HideBase_" + e, mkTT(ttHideBase))) : "ender_dragon" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llDragonPhase) + "<input type='text' id='DragonPhase_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttDragonPhase) + ">") : "enderman" == t ? $("#rightDiv_" + e).append(mkLL("equipmentLabel", llCarried) + makeSelectTileIDSelect("carried_" + e, mkTT(ttCarried), "generateSummon()")) : "endermite" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llLifeTime) + "<input type='text' id='Lifetime_" + e + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttLifeTime) + ">") : "evocation_illager" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llSpellTicks) + "<input type='text' id='SpellTicks_" + e + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttSpellTicks) + ">") : "llama" == t ? updateLlamaOptions(0, e) : "horse" == t || "skeleton_horse" == t || "zombie_horse" == t || "donkey" == t || "mule" == t ? updateHorseOptions(t, e) : "falling_block" == t ? ($("#rightDiv_" + e).append(mkLL("entityLabelBig", llBlock) + makeSelectTileIDSelect("Block_" + e, mkTT(ttBlock), "generateDataValue('Block_" + e + "')") + "<br><div id='Block_" + e + "_dataValueDiv'></div>" + mkLL("entityLabelBig", llTileEntityData) + "<input type='text' id='TileEntityData_" + e + "' class='inputBig' onkeyup='generateSummon()'" + mkTT(ttTileEntityData) + "><br>" + mkLL("entityLabelBig", llTime) + "<input type='text' id='Time_" + e + "' class='inputSmall' onkeyup='generateSummon()' value='1'" + mkTT(ttTime) + "><br>" + mkLL("entityLabelBig", llDropItem) + makeCheckbox("DropItem_" + e, mkTT(ttDropItem)) + "<br>" + mkLL("entityLabelBig", llHurtEntities) + makeCheckbox("HurtEntities_" + e, mkTT(ttHurtEntities)) + "<br>" + mkLL("entityLabelBig", llFallHurtMax) + "<input type='text' id='FallHurtMax_" + e + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttFallHurtMax) + "><br>" + mkLL("entityLabelBig", llFallHurtAmount) + "<input type='text' id='FallHurtAmount_" + e + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttFallHurtAmount) + ">"), generateDataValue("Block_" + e)) : "fireworks_rocket" == t ? ($("#rightDiv_" + e).append("<span id='Fireworks_" + e + "fw'></span>"), $("#leftDiv_" + e).append("<span id='attributes_" + e + "'>" + mkLL("entityLabelBig", llFWLifeTime) + "<input type='text' id='LifeTime_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttFWLifeTime) + "></span>"), makeFireWorkOptions("Fireworks_" + e, "#Fireworks_" + e + "fw", !1, "fireworks_rocket")) : "ghast" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llExplosionPower) + "<input type='text' id='ExplosionPower_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttExplosionPower) + ">") : "item" == t ? ($("#leftDiv_" + e).append("<span class='leftpan'  id='attributes_" + e + "'><span class='rightPan'>" + mkLL("equipmentLabel", llItemSelect) + makeSelectHoldingItem("Item_" + e, mkTT(ttItemSelect)) + "<br>" + makeDropChanceSelect("Item_DC_" + e, !1) + makeEquipmentNameLore(e, "Item") + makeCanDestroyCanPlaceOnHideFlags(e, "Item") + makeEnchantmentCheckBoxes("Item_" + e)), $("#Item_cdPanel_" + e).hide(), $("#Item_cpoPanel_" + e).hide(), $("#Item_hfPanel_" + e).hide(), makeAttributeModifiersUI("itemAttributeModifiers_Item_" + e, "leftDiv_" + e), $("#rightDiv_" + e).append(mkLL("equipmentLabel", llItemAge) + "<input type='text' class='inputSmall'  id='Age_" + e + "' onkeyup='generateSummon()'" + mkTT(ttItemAge) + "><br>" + mkLL("equipmentLabel", llItemHealth) + "<input type='text' class='inputSmall'  id='Health_" + e + "' onkeyup='generateSummon()'" + mkTT(ttItemHealth) + "><br>" + mkLL("equipmentLabel", llItemPickupDelay) + "<input type='text' class='inputSmall'  id='PickupDelay_" + e + "'onkeyup='generateSummon()'" + mkTT(ttItemPickupDelay) + "><br>" + mkLL("equipmentLabel", llItemOwner) + "<input type='text' class='inputSmall'  id='Owner_" + e + "' onkeyup='generateSummon()'" + mkTT(ttItemOwner) + "><br>" + mkLL("equipmentLabel", llItemThrower) + "<input type='text' class='inputSmall'  id='Thrower_" + e + "' onkeyup='generateSummon()'" + mkTT(ttItemThrower) + ">")) : "item_frame" == t ? ($("#leftDiv_" + e).append("<span class='leftpan'  id='attributes_" + e + "'><span class='rightPan'>" + mkLL("equipmentLabel", llItemSelect) + makeSelectHoldingItem("Item_" + e, mkTT(ttItemSelect)) + "<br>" + makeEquipmentNameLore(e, "Item") + makeCanDestroyCanPlaceOnHideFlags(e, "Item") + makeEnchantmentCheckBoxes("Item_" + e)), $("#Item_cdPanel_" + e).hide(), $("#Item_cpoPanel_" + e).hide(), $("#Item_hfPanel_" + e).hide(), makeAttributeModifiersUI("itemAttributeModifiers_Item_" + e, "leftDiv_" + e), $("#rightDiv_" + e).append(mkLL("label", llFacing) + makeSelectWithIndex("Facing_" + e, [0, 1, 2, 3], [llSouth, llWest, llNorth, llEast], mkTT(ttFacing)) + mkLL("label", llItemRotation) + makeSelectWithIndex("ItemRotation_" + e, [0, 1, 2, 3, 4, 5, 6, 7], ["0&deg;", "45&deg;", "90&deg;", "135&deg;", "180&deg;", "225&deg;", "270&deg;", "315&deg;"], mkTT(ttItemRotation)))) : "magma_cube" == t || "slime" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llSlimeSize) + "<input type='text' id='Size_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttSlimeSize) + "><br>" + mkLL("entityLabelBig", llWasOnGround) + makeCheckbox("wasOnGround_" + e, mkTT(ttWasOnGround))) : "ocelot" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llCatType) + makeSelectWithIndex("CatType_" + e, [0, 1, 2, 3], ["Wild Ozelot", "Tuxuedo", "Tabby", "Siamese"], mkTT(ttCatType))) : "zombie_pigman" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llBaby) + makeSelectWithIndex("IsBaby_" + e, [-1, 0, 1], [llChance, llNever, llAlways], mkTT(ttBaby)) + "<br>" + mkLL("entityLabelBig", llAnger) + "<input type='text' class='inputSmall' id='Anger_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttAnger) + ">") : "painting" == t ? $("#rightDiv_" + e).append(mkLL("label", llFacing) + makeSelectWithIndex("Facing_" + e, [0, 1, 2, 3], [llSouth, llWest, llNorth, llEast], mkTT(ttFacing)) + mkLL("label", llMotive) + makeSelect("Motive_" + e, ["Kebab", "Aztec", "Alban", "Aztec2", "Bomb", "Plant", "Wasteland", "Wanderer", "Graham", "Pool", "Courbet", "Sunset", "Sea", "Creebet", "Match", "Bust", "Stage", "Void", "SkullAndRoses", "Wither", "Fighters", "Skeleton", "DonkeyKong", "Pointer", "Pigscene", "BurningSkull"], mkTT(ttMotive))) : "parrot" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llParrotVariant) + makeSelectWithIndex("Variant_" + e, [0, 1, 2, 3, 4], [llRed, llBlue, llGreen, llCyan, llGray], mkTT(ttParrotVariant)) + "<br>" + mkLL("entityLabelBig", llOwnerUUID) + "<input type='text' id='OwnerUUID_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttOwnerUUID) + "><br>" + mkLL("entityLabelBig", llSitting) + makeCheckbox("Sitting_" + e, mkTT(ttSitting))) : "pig" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llSaddle) + makeCheckbox("Saddle_" + e, mkTT(ttSaddle))) : "tnt" == t ? $("#rightDiv_" + e).append(mkLL("equipmentLabel", llPrimedTNTFuse) + "<input type='text' id='Fuse_" + e + "'  onkeyup='generateSummon()' " + mkTT(ttPrimedTNTFuse) + ">") : "squid" == t ? $("#rightDiv_" + e).append(mkLL("equipmentLabel", llSquidAir) + "<input type='text' id='Air_" + e + "'  onkeyup='generateSummon()'" + mkTT(ttSquidAir) + ">") : "rabbit" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llRabbitType) + makeSelectWithIndex("RabbitType_" + e, [0, 1, 2, 3, 4, 5, 99], [llBrown, llWhite, llBlack, llBlackAndWhite, llGold, llSaltAndPepper, llKillerRabbit], mkTT(ttRabbitType)) + "<br>" + mkLL("entityLabelBig", llMoreCarrotTicks) + "<input type='text' class='inputSmall'  id='MoreCarrotTicks_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttMoreCarrotTicks) + ">") : "sheep" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llSheared) + makeCheckbox("Sheared_" + e, mkTT(ttSheared)) + "<br>" + mkLL("entityLabelBig", llSheepColor) + makeColorSelectSheep("Color_" + e, mkTT(ttSheepColor))) : "shulker" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llPeek) + "<input type='text' class='inputSmall'  id='Peek_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttPeek) + "><br>" + mkLL("entityLabelBig", "APX") + "<input type='text' class='inputSmall'  id='APX_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttAPXYZ) + "><br>" + mkLL("entityLabelBig", "APY") + "<input type='text' class='inputSmall'  id='APY_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttAPXYZ) + "><br>" + mkLL("entityLabelBig", "APZ") + "<input type='text' class='inputSmall'  id='APZ_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttAPXYZ) + "><br>" + mkLL("entityLabelBig", llAttachFace) + makeSelectWithIndex("AttachFace_" + e, [0, 1, 2, 3, 4, 5], [llAbove, llBelow, llSouth, llNorth, llEast, llWest], mkTT(ttAttachFace)) + "<br>" + mkLL("entityLabelBig", llSheepColor) + makeColorSelectSheep("Color_" + e, mkTT(ttSheepColor))) : "shulker_bullet" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llSteps) + "<input type='text' class='inputSmall'  id='Steps_" + e + "' value='0' onkeyup='generateSummon()'" + mkTT(ttSteps) + "><br>" + mkLL("entityLabelBig", llTargetOffset) + mkLL("label", "X") + "<input type='text' class='inputSmall'  id='TXD_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttTargetOffset) + ">" + mkLL("label", "Y") + "<input type='text' class='inputSmall'  id='TYD_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttTargetOffset) + ">" + mkLL("label", "Z") + "<input type='text' class='inputSmall'  id='TZD_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttTargetOffset) + "><br>" + mkLL("entityLabelBig", llOwnerCoords) + mkLL("label", "X") + "<input type='text' class='inputSmall'  id='OX_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttOwnerCoords) + ">" + mkLL("label", "Y") + "<input type='text' class='inputSmall'  id='OY_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttOwnerCoords) + ">" + mkLL("label", "Z") + "<input type='text' class='inputSmall'  id='OZ_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttOwnerCoords) + ">" + mkLL("label", "UUID") + "<input type='text' class='inputSmall'  id='OUUID_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttOwnerCoords) + "><br>" + mkLL("entityLabelBig", llShulkerBulletTarget) + mkLL("label", "X") + "<input type='text' class='inputSmall'  id='TX_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttShulkerBulletTarget) + ">" + mkLL("label", "Y") + "<input type='text' class='inputSmall'  id='TY_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttShulkerBulletTarget) + ">" + mkLL("label", "Z") + "<input type='text' class='inputSmall'  id='TZ_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttShulkerBulletTarget) + ">" + mkLL("label", "UUID") + "<input type='text' class='inputSmall'  id='TUUID_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttShulkerBulletTarget) + ">") : "snowman" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llNoPumpkin) + makeCheckbox("NoPumpkin_" + e, mkTT(ttNoPumpkin))) : "villager" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llProfession) + makeVillagerProfessionSelect("Profession_" + e) + "<br>" + mkLL("entityLabelBig", llCareer) + makeVillagerCareerSelect("Career_" + e) + "<br>" + mkLL("entityLabelBig", llCareerLevel) + "<input type='text' class='inputSmall'  id='CareerLevel_" + e + "' onkeyup='generateSummon()'" + mkTT(ttCareerLevel) + "><br>" + mkLL("entityLabelBig", llWilling) + makeCheckbox("Willing_" + e, mkTT(ttWilling)) + "<br>" + mkLL("entityLabelBig", llRecipes) + makeButton(llMakeOffer, "makeOffer(" + e + ")", ttMakeOffer) + "<br><div id='recipes" + e + "'></div>") : isMinecart(t) ? ($("#rightDiv_" + e).append(mkLL("entityLabelBig", llCustomDisplayTile) + makeCheckbox("CustomDisplayTile_" + e, mkTT(ttCustomDisplayTile)) + "<br>" + mkLL("entityLabelBig", llDisplayTile) + makeSelectHoldingItem("DisplayTile_" + e, mkTT(ttDisplayTile)) + "<br>" + mkLL("entityLabelBig", llDisplayOffset) + "<input type='text' id='DisplayOffset_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttDisplayOffset) + ">"), "furnace_minecart" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llPushX) + "<input type='text' class='inputSmall'  id='PushX_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttPushX) + "><br>" + mkLL("entityLabelBig", llPushZ) + "<input type='text' class='inputSmall'  id='PushZ_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttPushZ) + "><br>" + mkLL("entityLabelBig", llFuel) + "<input type='text' class='inputSmall'  id='Fuel_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttFuel) + ">") : "hopper_minecart" == t ? ($("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llTransferCooldown) + "<input type='text' class='inputSmall'  id='TransferCooldown_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttTransferCooldown) + "><br>" + mkLL("entityLabelBig", llMinecartHopperEnabled) + makeCheckbox("MinecartHopperEnabled_" + e, mkTT(ttMinecartHopperEnabled)) + "<br>" + mkLL("entityLabelBig", llLootTable) + "<input type='text' class='inputBig'  id='LootTable_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttLootTable) + "><br>"), makeChestSlots(0, 4, e, "rightDiv_" + e)) : "tnt_minecart" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llMinecartTNTFuse) + "<input type='text' class='inputSmall'  id='TNTFuse_" + e + "' value='-1' onkeyup='generateSummon()'" + mkTT(ttMinecartTNTFuse) + ">") : "commandblock_minecart" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llCommand) + "<input type='text' class='inputBig'  id='Command_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttCommand) + ">" + mkLL("entityLabel", llEscapeQuotes) + makeCheckbox("EscapeQuotes_" + e, mkTT(ttEscapeQuotes))) : "chest_minecart" == t ? ($("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llLootTable) + "<input type='text' class='inputBig'  id='LootTable_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttLootTable) + "><br>"), makeChestSlots(0, 26, e, "rightDiv_" + e)) : "spawner_minecart" == t && $("#rightDiv_" + e).append("<br>" + llMineCartSpawnerInstructions + mkLL("entityLabelBig", llSpawnDataTag) + "<input type='text' class='inputLarge'  id='spawnData_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttSpawnDataTag) + ">")) : "vex" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("label", llVexBounds) + mkLL("label", "X") + "<input type='text' class='inputSmall'  id='BoundX_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttVexBounds) + ">" + mkLL("label", "Y") + "<input type='text' class='inputSmall'  id='BoundY_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttVexBounds) + ">" + mkLL("label", "Z") + "<input type='text' class='inputSmall'  id='BoundZ_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttVexBounds) + "><br><br>" + mkLL("label", "Life Ticks") + "<input type='text' class='inputSmall'  id='LifeTicks_" + e + "' value='' onkeyup='generateSummon()'" + mkTT(ttLifeTicks) + ">") : "villager_golem" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llPlayerCreated) + makeCheckbox("PlayerCreated_" + e, mkTT(ttPlayerCreated))) : "vindication_illager" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llJohnny) + makeCheckbox("Johnny_" + e, mkTT(ttJohnny))) : "wither" == t ? $("#rightDiv_" + e).append(mkLL("entityLabelBig", llInvulTime) + "<input type='text' id='Invul_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttInvulTime) + ">") : "wolf" == t ? $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llAngry) + makeCheckbox("Angry_" + e, mkTT(ttAngry)) + "<br>" + mkLL("entityLabelBig", llCollarColor) + makeColorSelectWolf("CollarColor_" + e, mkTT(ttCollarColor))) : "xp_orb" == t ? $("#rightDiv_" + e).append(mkLL("equipmentLabel", llXPValue) + "<input type='text' class='inputSmall'  id='Value_" + e + "' value='1' onkeyup='generateSummon()'" + mkTT(ttXPValue) + "><br>" + mkLL("equipmentLabel", llXPHealth) + "<input type='text' class='inputSmall'  id='Health_" + e + "' onkeyup='generateSummon()'" + mkTT(ttXPHealth) + "><br>" + mkLL("equipmentLabel", llItemAge) + "<input type='text' class='inputSmall'  id='Age_" + e + "' onkeyup='generateSummon()'" + mkTT(ttItemAge) + ">") : "zombie" != t && "husk" != t && "zombie_villager" != t || ($("#rightDiv_" + e).append(mkLL("entityLabelBig", llIsVillager) + makeSelectWithIndex("IsVillager_" + e, [-1, 0, 1], [llChance, llNever, llAlways], mkTT(ttIsVillager)) + "<br>" + mkLL("entityLabelBig", llBaby) + makeSelectWithIndex("IsBaby_" + e, [-1, 0, 1], [llChance, llNever, llAlways], mkTT(ttBaby)) + "<br>" + makeReinforcementsChanceSelect("spawnReinforcements_" + e) + "<br>" + mkLL("entityLabelBig", llCanBreakDoors) + makeCheckbox("CanBreakDoors_" + e, mkTT(ttCanBreakDoors))), "zombie_villager" == t && $("#rightDiv_" + e).append("<br>" + mkLL("entityLabelBig", llProfession) + makeSelectWithIndex("VillagerProfession_" + e, [-1, 0, 1, 2, 3, 4, 5], [llNotSet, llFarmer, llLibrarian, llPriest, llBlacksmith, llButcher, llGeneric], mkTT(ttProfessionZombie)) + "<br>" + mkLL("entityLabelBig", llConversionTime) + "<input type='text' id='ConversionTime_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttConversionTime) + ">"));
    generateSummon()
}

function makeMotion(e) {
    $("#leftDiv_" + e).append("<span id='motion_" + e + "'>" + mkLL("entityLabelBig", llXMotion) + "<input type='text' id='motionX_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttMotion) + "><br>" + mkLL("entityLabelBig", llYMotion) + "<input type='text' id='motionY_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttMotion) + "><br>" + mkLL("entityLabelBig", llZMotion) + "<input type='text' id='motionZ_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttMotion) + ">" + makeButton(llCopyMotion, "copyMotion(" + e + ")", ttCopyMotion) + "</span>")
}

function copyMotion(e) {
    var t, a = $("#inputForm > .EntityOptions").map(function() {
            return this.id || null
        }).get();
    for (i = 0; i < a.length; i++)(t = a[i].split("_")[1]) != e && ($("#motionX_" + t).val($("#motionX_" + e).val()), $("#motionY_" + t).val($("#motionY_" + e).val()), $("#motionZ_" + t).val($("#motionZ_" + e).val()));
    generateSummon()
}

function makeVillagerProfessionSelect(e) {
    return makeSelectWithIndex(e, [0, 1, 2, 3, 4, 5], [llFarmer, llLibrarian, llPriest, llBlacksmith, llButcher, llGeneric], mkTT(ttProfession))
}

function makeVillagerCareerSelect(e) {
    return makeSelectWithIndex(e, [-1, 0, 1, 2, 3, 0, 0, 0, 1, 2, 0, 1], [llNotSet, llFletcher, llFarmer, llFisherman, llShepherd, llLibrarian, llCleric, llToolSmith, llArmorer, llWeaponSmith, llLeatherworker, llButcher], mkTT(ttCareer))
}

function makeOffer(e) {
    for (var t = 0; $("#offer_" + t + "_" + e).length;) t++;
    $("#recipes" + e).append("<div id='offer_" + t + "_" + e + "' class='villagerOffer'>" + mkLL("entityLabel", llRewardXP) + makeCheckbox("rewardExp" + t + "_" + e, mkTT(ttRewardXP)) + "<br>" + mkLL("entityLabel", llMaxUses) + "<input type='text' id='maxUses" + t + "_" + e + "' onkeyup='generateSummon()' class='inputBig' value='2147483647'" + mkTT(ttMaxUses) + "><br>" + mkLL("entityLabel", llUses) + "<input type='text' id='uses" + t + "_" + e + "' onkeyup='generateSummon()' class='inputSmall' value='0'" + mkTT(ttUses) + "><br>" + mkLL("entityLabel", llBuyA) + makeSelectHoldingItem("buy_" + t + "_" + e, mkTT(ttBuy)) + "<br>" + makeDropChanceSelect("buy_" + t + "_DC_" + e, !1) + makeEquipmentNameLore(e, "buy_" + t) + makeCanDestroyCanPlaceOnHideFlags(e, "buy_" + t) + makeEnchantmentCheckBoxes("buy_" + t + "_" + e) + "<br><span id='buyOfferAttrMods_" + t + "_" + e + "'></span><br>" + mkLL("entityLabel", llBuyB) + makeSelectHoldingItem("buyB_" + t + "_" + e, mkTT(ttBuy)) + "<br>" + makeDropChanceSelect("buyB_" + t + "_DC_" + e, !1) + makeEquipmentNameLore(e, "buyB_" + t) + makeCanDestroyCanPlaceOnHideFlags(e, "buyB_" + t) + makeEnchantmentCheckBoxes("buyB_" + t + "_" + e) + "<br><span id='buyBOfferAttrMods_" + t + "_" + e + "'></span>" + ttSecondaryTrade + "<hr>" + mkLL("entityLabel", llSell) + makeSelectHoldingItem("Sell_" + t + "_" + e, mkTT(ttSell)) + "<br>" + makeDropChanceSelect("Sell_" + t + "_DC_" + e, !1) + makeEquipmentNameLore(e, "Sell_" + t) + makeCanDestroyCanPlaceOnHideFlags(e, "Sell_" + t) + makeEnchantmentCheckBoxes("Sell_" + t + "_" + e) + "<br><span id='offerAttrMods_" + t + "_" + e + "'></span><br>" + makeButton(llRemoveOffer, "removeElement('offer_" + t + "_" + e + "')", ttRemoveOffer) + "</div>"), $("#Sell_" + t + "_cdPanel_" + e).hide(), $("#Sell_" + t + "_cpoPanel_" + e).hide(), $("#Sell_" + t + "_hfPanel_" + e).hide(), $("#Sell_" + t + "_" + e + "_cpocdhfPanel").hide(), $("#buy_" + t + "_cdPanel_" + e).hide(), $("#buy_" + t + "_cpoPanel_" + e).hide(), $("#buy_" + t + "_hfPanel_" + e).hide(), $("#buy_" + t + "_" + e + "_cpocdhfPanel").hide(), $("#buyB_" + t + "_cdPanel_" + e).hide(), $("#buyB_" + t + "_cpoPanel_" + e).hide(), $("#buyB_" + t + "_hfPanel_" + e).hide(), $("#buyB_" + t + "_" + e + "_cpocdhfPanel").hide(), makeAttributeModifiersUI("itemAttributeModifiers_Sell_" + t + "_" + e, "offerAttrMods_" + t + "_" + e)
}

function makeCanDestroyCanPlaceOnHideFlags(e, t) {
    return "<div id='" + t + "_" + e + "_cpocdhfPanel'>" + mkLL("entityLabel", llCanPlaceOn) + "<input type='checkbox' id='" + t + "_cpo_" + e + "' onClick=\"showHidePanel('#" + t + "_cpo_" + e + "', '#" + t + "_cpoPanel_" + e + "')\"" + mkTT(ttCanPlaceOn) + "><div id='" + t + "_cpoPanel_" + e + "'>" + makeButton("+", "addItemSelect('" + t + "_cpoPanel_" + e + "','" + ttCanPlaceChoose + "')", ttCanPlaceAdd) + "</div><br>" + mkLL("entityLabel", llCanDestroy) + "<input type='checkbox' id='" + t + "_cd_" + e + "' onClick=\"showHidePanel('#" + t + "_cd_" + e + "', '#" + t + "_cdPanel_" + e + "')\"" + mkTT(ttCanDestroy) + "><div id='" + t + "_cdPanel_" + e + "'>" + makeButton("+", "addItemSelect('" + t + "_cdPanel_" + e + "','" + ttCanDestroyChoose + "')", ttCanDestroyAdd) + "</div><br>" + mkLL("entityLabel", llHideFlags) + "<input type='checkbox' id='" + t + "_hf_" + e + "' onClick=\"showHidePanel('#" + t + "_hf_" + e + "', '#" + t + "_hfPanel_" + e + "')\"" + mkTT(ttHideFlags) + "><div id='" + t + "_hfPanel_" + e + "'><br>" + mkLL("entityLabel", llEnchantments) + makeCheckbox(t + "_hfenc_" + e, mkTT(ttHideEnchants)) + "<br>" + mkLL("entityLabel", llModifiers) + makeCheckbox(t + "_hfmod_" + e, mkTT(ttHideModifiers)) + "<br>" + mkLL("entityLabel", llUnbreakable) + makeCheckbox(t + "_hfunb_" + e, mkTT(ttHideUnbreakable)) + "<br>" + mkLL("entityLabel", llCanDestroy) + makeCheckbox(t + "_hfcd_" + e, mkTT(ttHideCanDestroy)) + "<br>" + mkLL("entityLabel", llCanPlaceOn) + makeCheckbox(t + "_hfcpo_" + e, mkTT(ttHideCanPlaceOn)) + "<br>" + mkLL("entityLabel", llHideOthers) + makeCheckbox(t + "_hfo_" + e, mkTT(ttHideOthers)) + "</div></div>"
}

function addItemSelect(e, t) {
    for (var a = 0; $("#" + e + "_" + a).length;) a++;
    var n = "<div class='anItem' id='" + e + "_" + a + "'>" + makeButton("x", "removeElement('" + e + "_" + a + "')", ttRemoveBlock) + makeSelectTileIDSelect(e + "_" + a + "_item", mkTT(t), "generateSummon()") + "</div>";
    $("#" + e).prepend(n)
}

function makeSelectTileIDSelect(e, t, a) {
    var n = makeTileSearch(e);
    for (n += "<select id='" + e + "' " + t + ' onChange="' + a + '">', i = 0; i < tileIDs.length; i++) n += "<option value='" + tileIDs[i][0] + "'>" + tileIDs[i][1] + "</option>";
    return n += "</select>"
}

function makeSelectHoldingItem(e, t) {
    var a = makeSearch(e);
    for (-1 == e.indexOf("DisplayTile") || -1 != e.indexOf("Item") ? a += "<select id='" + e + "'" + t + " onChange=\"loadEnchantmentOptions('" + e + "')\">" : a += "<select id='" + e + "'" + t + " onChange='generateSummon()'>", i = 0; i < items.length; i++) a += "<option value='" + items[i][0] + "'>" + items[i][1] + "</option>";
    return a += "</select>"
}

function removeElement(e) {
    $("#" + e).remove(), generateSummon()
}

function makeSelectVillagerTradesItem(e) {
    var t = makeSearch(e) + "<select id='" + e + "' onChange='generateSummon()'" + mkTT(ttItemSelect) + ">";
    for (i = 0; i < items.length; i++) t += "<option value='" + items[i][0] + "'>" + items[i][1] + "</option>";
    return t + "</select>"
}

function makeAttributeModifiersUI(e, t) {
    for ($("#" + t).append("<span class='leftpan' id='" + e + "'><br><span class='entityLabelBig'>" + llAttributeModifiers + "</span><input type='checkbox' id='" + e + "_cb' onClick=\"showHidePanel('#" + e + "_cb', '#" + e + "_div')\"" + mkTT(ttAttributeModifiers) + "><div id='" + e + "_div' class='statusEffects'></div><br>"), j = 0; j < attributeModifiers.length; j++) $("#" + e + "_div").append("<hr><span class='entityLabelBig' title='" + ttAttributeModifiersArray[j] + "'>" + attributeModifiers[j] + "</span><br>" + mkLL("entityLabel", llAmount) + "<input type='text' class='inputSmall'  id='" + e + "_" + attributeModifiers[j] + "_amount' value='' onkeyup='generateSummon()'" + mkTT(ttAmount) + ">" + mkLL("entityLabel", llOperation) + makeSelectWithIndex(e + "_" + attributeModifiers[j] + "_operation", [0, 1, 2], [llOperation0, llOperation1, llOperation2], mkTT(ttOperation)) + "<br>" + mkLL("entityLabel", llUUIDLeast) + "<input type='text' class='inputSmall'  id='" + e + "_" + attributeModifiers[j] + "_UUIDLeast' value='" + getRandomInt(1, 999999) + "' onkeyup='generateSummon()'>" + mkLL("entityLabel", llUUIDMost) + "<input type='text' class='inputSmall'  id='" + e + "_" + attributeModifiers[j] + "_UUIDMost' value='" + getRandomInt(1, 999999) + "' onkeyup='generateSummon()'><br>" + mkLL("entityLabel", llSlot) + makeSelect(e + "_" + attributeModifiers[j] + "_Slot", ["Any", "mainhand", "offhand", "feet", "legs", "chest", "head"], mkTT(ttSlotAttributeModifiers)));
    $("#" + e + "_div").append("<hr>"), $("#" + e + "_div").hide(), $("#" + t).append("</span>")
}

function getRandomInt(e, t) {
    return Math.floor(Math.random() * (t - e + 1)) + e
}

function makeParticleSelector(e, t) {
    var a = "<select id='" + e + "'" + t + " onChange='generateSummon()'>";
    for (i = 0; i < particles.length; i++) a += "<option value='" + particles[i] + "'>" + particles[i] + "</option>";
    return a + "</select>"
}

function makePotionSelector(e) {
    var t = e.substring(1);
    $(e + "_potionEffects").remove(), $(e).append("<span class='leftpan' id='" + t + "_potionEffects'></span>");
    var a = mkLL("entityLabel", llPotionEffect) + "<select id='" + t + "_potion_id_1p9'" + mkTT(ttPotionEffect) + " onChange='generateSummon()'>";
    for (i = 0; i < potions1p9.length; i++) a += "<option value='" + potions1p9[i][0] + "'>" + potions1p9[i][1] + "</option>";
    a += "</select></span>", $(e + "_potionEffects").append(a)
}

function makeStatusEffectCheckBoxes(e) {
    var t = e.substring(1);
    for ($(e + "_statusEffects").remove(), $(e).append("<span class='leftpan' id='" + t + "_statusEffects'><br>" + mkLL("entityLabelBig", llStatusEffects) + "<input type='checkbox' id='" + t + "_enableStatusEffect' onClick='showHidePanel(\"" + e + '_enableStatusEffect","' + e + "_effects\")'" + mkTT(ttStatusEffects) + "><br><div id='" + t + "_effects' class='statusEffects'></div>"), $(e + "_effects").hide(), i = 0; i < statusEffects.length; i++) $(e + "_effects").append("<span class='effectLabel'><input type='checkbox' id='" + t + "_effect_" + statusEffects[i][0] + "' class='cbStatusEffects' onclick='enableEffectOptions(\"" + e + '",' + statusEffects[i][0] + ")'>" + statusEffects[i][1].replace(" ", "&nbsp;") + "</span><span id='" + t + "_effectOptions_" + statusEffects[i][0] + "' class='statusEffectsOptions'> " + llAmplifier + " <input type='text' id='" + t + "_" + statusEffects[i][0] + "_amp' value='0' class='inputTiny' onkeyup='generateSummon()'" + mkTT(ttAmplifier) + "> " + llDurationSecs + "<input type='text' id='" + t + "_" + statusEffects[i][0] + "_dur' value='1' class='inputTiny' onkeyup='generateSummon()'" + mkTT(ttDurationSecs) + "><input type='checkbox' id='" + t + "_" + statusEffects[i][0] + "_hideParticle' onClick='generateSummon()'" + mkTT(ttHideParticles) + "> " + llHideParticles + "</span><br>"), $(e + "_effectOptions_" + statusEffects[i][0]).hide();
    $(e + "_effects").append("</span>")
}

function showHidePanel(e, t) {
    $(e).is(":checked") ? $(t).show() : $(t).hide(), generateSummon()
}

function enableEffectOptions(e, t) {
    $(e + "_effect_" + t).is(":checked") ? $(e + "_effectOptions_" + t).show() : $(e + "_effectOptions_" + t).hide(), generateSummon()
}

function isVehicle(e) {
    return "boat" == e || -1 != e.indexOf("minecart")
}

function isMinecart(e) {
    return -1 != e.indexOf("minecart")
}

function updateEquipmentOptions(e) {
    isVehicle($("#entityList_" + e + " option:selected").text()) || ($("#rightDiv_" + e).append(mkLL("equipmentLabelLong", llHolding) + makeSelectHoldingItem("eHolding_" + e, mkTT(ttHolding)) + "<br>" + makeDropChanceSelect("eHolding_DC_" + e, !0) + makeEquipmentNameLore(e, "eHolding") + makeCanDestroyCanPlaceOnHideFlags(e, "eHolding") + makeEnchantmentCheckBoxes("eHolding_" + e)), makeAttributeModifiersUI("itemAttributeModifiers_eHolding_" + e, "rightDiv_" + e), $("#rightDiv_" + e).append(mkLL("equipmentLabelLong", llHoldingOffHand) + makeSelectHoldingItem("eHoldingOffHand_" + e, mkTT(ttHoldingOffHand)) + "<br>" + makeDropChanceSelect("eHoldingOffHand_DC_" + e, !0) + makeEquipmentNameLore(e, "eHoldingOffHand") + makeCanDestroyCanPlaceOnHideFlags(e, "eHoldingOffHand") + makeEnchantmentCheckBoxes("eHoldingOffHand_" + e)), makeAttributeModifiersUI("itemAttributeModifiers_eHoldingOffHand_" + e, "rightDiv_" + e), $("#rightDiv_" + e).append("<br>" + mkLL("equipmentLabelLong", llHead) + makeSelectHoldingItem("eHead_" + e, mkTT(ttHead)) + "<br>" + makeDropChanceSelect("eHead_DC_" + e, !0) + makeEquipmentNameLore(e, "eHead") + makeCanDestroyCanPlaceOnHideFlags(e, "eHead") + makeEnchantmentCheckBoxes("eHead_" + e)), makeAttributeModifiersUI("itemAttributeModifiers_eHead_" + e, "rightDiv_" + e), $("#rightDiv_" + e).append("<br>" + mkLL("equipmentLabelLong", llBody) + makeSelectHoldingItem("eBody_" + e, mkTT(ttBody)) + "<br>" + makeDropChanceSelect("eBody_DC_" + e, !0) + makeEquipmentNameLore(e, "eBody") + makeCanDestroyCanPlaceOnHideFlags(e, "eBody") + makeEnchantmentCheckBoxes("eBody_" + e)), makeAttributeModifiersUI("itemAttributeModifiers_eBody_" + e, "rightDiv_" + e), $("#rightDiv_" + e).append("<br>" + mkLL("equipmentLabelLong", llLeg) + makeSelectHoldingItem("eLeg_" + e, mkTT(ttLeg)) + "<br>" + makeDropChanceSelect("eLeg_DC_" + e, !0) + makeEquipmentNameLore(e, "eLeg") + makeCanDestroyCanPlaceOnHideFlags(e, "eLeg") + makeEnchantmentCheckBoxes("eLeg_" + e)), makeAttributeModifiersUI("itemAttributeModifiers_eLeg_" + e, "rightDiv_" + e), $("#rightDiv_" + e).append("<br>" + mkLL("equipmentLabelLong", llBoot) + makeSelectHoldingItem("eBoot_" + e, mkTT(ttBoot)) + "<br>" + makeDropChanceSelect("eBoot_DC_" + e, !0) + makeEquipmentNameLore(e, "eBoot") + makeCanDestroyCanPlaceOnHideFlags(e, "eBoot") + makeEnchantmentCheckBoxes("eBoot_" + e)), makeAttributeModifiersUI("itemAttributeModifiers_eBoot_" + e, "rightDiv_" + e)), $("#eHolding_" + e + "_cpocdhfPanel").hide(), $("#eHoldingOffHand_" + e + "_cpocdhfPanel").hide(), $("#eBody_" + e + "_cpocdhfPanel").hide(), $("#eLeg_" + e + "_cpocdhfPanel").hide(), $("#eBoot_" + e + "_cpocdhfPanel").hide(), $("#eHead_" + e + "_cpocdhfPanel").hide(), $("#eHolding_cdPanel_" + e).hide(), $("#eHoldingOffHand_cdPanel_" + e).hide(), $("#eHolding_cpoPanel_" + e).hide(), $("#eHoldingOffHand_cpoPanel_" + e).hide(), $("#eHolding_hfPanel_" + e).hide(), $("#eHoldingOffHand_hfPanel_" + e).hide(), $("#eHead_cdPanel_" + e).hide(), $("#eHead_cpoPanel_" + e).hide(), $("#eHead_hfPanel_" + e).hide(), $("#eBody_cdPanel_" + e).hide(), $("#eBody_cpoPanel_" + e).hide(), $("#eBody_hfPanel_" + e).hide(), $("#eLeg_cdPanel_" + e).hide(), $("#eLeg_cpoPanel_" + e).hide(), $("#eLeg_hfPanel_" + e).hide(), $("#eBoot_cdPanel_" + e).hide(), $("#eBoot_cpoPanel_" + e).hide(), $("#eBoot_hfPanel_" + e).hide(), $("#spaneHolding_DC_" + e).hide(), $("#spaneHoldingOffHand_DC_" + e).hide(), $("#spaneHead_DC_" + e).hide(), $("#spaneBody_DC_" + e).hide(), $("#spaneLeg_DC_" + e).hide(), $("#spaneBoot_DC_" + e).hide(), $("#spaneHolding_DCount_" + e).hide(), $("#spaneHoldingOffHand_DCount_" + e).hide(), $("#spaneHead_DCount_" + e).hide(), $("#spaneBody_DCount_" + e).hide(), $("#spaneLeg_DCount_" + e).hide(), $("#spaneBoot_DCount_" + e).hide(), $("#spaneHolding_Name_" + e).hide(), $("#spaneHoldingOffHand_Name_" + e).hide(), $("#spaneHead_Name_" + e).hide(), $("#spaneBody_Name_" + e).hide(), $("#spaneLeg_Name_" + e).hide(), $("#spaneBoot_Name_" + e).hide(), $("#spaneHolding_Lore_" + e).hide(), $("#spaneHoldingOffHand_Lore_" + e).hide(), $("#spaneHead_Lore_" + e).hide(), $("#spaneBody_Lore_" + e).hide(), $("#spaneLeg_Lore_" + e).hide(), $("#spaneBoot_Lore_" + e).hide(), $("#itemAttributeModifiers_eHolding_" + e).hide(), $("#itemAttributeModifiers_eHoldingOffHand_" + e).hide(), $("#itemAttributeModifiers_eHead_" + e).hide(), $("#itemAttributeModifiers_eBody_" + e).hide(), $("#itemAttributeModifiers_eLeg_" + e).hide(), $("#itemAttributeModifiers_eBoot_" + e).hide()
}

function makeChestSlots(e, t, a, n) {
    for (chestIndex = e; chestIndex <= t; chestIndex++) $("#" + n).append("<span class='rightPan chestSlot' id='chestSlot_" + chestIndex + "'>" + mkLL("equipmentLabel", llSlot + " " + chestIndex) + makeSelectHoldingItem("Slot" + chestIndex + "_" + a, mkTT(ttItemSelect)) + "<span class='label' id='Slot" + chestIndex + "_DCountLabel_" + a + "'>" + llCount + " </span><input type='text' class='inputSmall' id='Slot" + chestIndex + "_DCount_" + a + "' onKeyUp='generateSummon()'" + mkTT(ttCount) + " value='1'><br>" + makeEquipmentNameLore(a, "Slot" + chestIndex) + makeCanDestroyCanPlaceOnHideFlags(a, "Slot" + chestIndex) + makeEnchantmentCheckBoxes("Slot" + chestIndex + "_" + a) + "</span>"), makeAttributeModifiersUI("itemAttributeModifiers_Slot" + chestIndex + "_" + a, n), $("#itemAttributeModifiers_Slot" + chestIndex + "_" + a).hide(), $("#spanSlot" + chestIndex + "_Name_" + a).hide(), $("#spanSlot" + chestIndex + "_Lore_" + a).hide(), $("#Slot" + chestIndex + "_cdPanel_" + a).hide(), $("#Slot" + chestIndex + "_cpoPanel_" + a).hide(), $("#Slot" + chestIndex + "_hfPanel_" + a).hide(), $("#Slot" + chestIndex + "_" + a + "_cpocdhfPanel").hide()
}

function makeEquipmentNameLore(e, t) {
    return "<span class='label' id='span" + t + "_Name_" + e + "'>" + llName + ":<input type='text' id='" + t + "_NamedItem_" + e + "' value='' class='inputBig' onkeyup='generateSummon()'" + mkTT(ttName) + "></span><span class='label' id='span" + t + "_Lore_" + e + "'>" + llLore + ":<input type='text' id='" + t + "_Lore_" + e + "' value='' class='inputBig' onkeyup='generateSummon()'" + mkTT(ttLore) + "></span>"
}

function canBreed(e) {
    return "sheep" == e || "pig" == e || "mooshroom" == e || "cow" == e || "chicken" == e || "villager" == e || "wolf" == e || "polar_bear" == e || "rabbit" == e || "ocelot" == e || "mule" == e || "llama" == e || "donkey" == e || "horse" == e
}

function makeDropChanceSelect(e, t) {
    var a = "",
        n = e.substring(e.lastIndexOf("_") + 1);
    if ("armor_stand" != $("#entityList_" + n + " option:selected").text() && t) {
        for (a += "<span id='span" + e + "' class='label'>" + llDropChance + ": <select id='" + e + "' onChange='generateSummon()' class='inputBig'" + mkTT(ttDropChance) + ">", a += "<option value='0.085F'>8.5% " + llDropChanceDefault + "</option>", i = 0; i <= 100; i += 10) a += "<option value='" + (i / 100).toFixed(1) + "F'>" + i + "%</option>";
        a += "<option value='2.0F'>100% " + ttDropChanceUndamaged + "</option>", a += "<option value='-327.67F'>" + ttDropChanceNoLoot + "</option>", a += "</select></span>"
    }
    return a + "<span id='span" + e.replace("DC", "DCount") + "' class='label'>" + llCount + ": <input type='text' class='inputSmall' value='1' id='" + e.replace("DC", "DCount") + "' onKeyUp='generateSummon()'" + mkTT(ttDropChanceCount) + "><br></span>"
}

function makeReinforcementsChanceSelect(e) {
    var t = "<br>" + mkLL("label", llReinforcementChance) + "<select id='" + e + "' onChange='generateSummon()' class='inputSmall'" + mkTT(ttReinforcementChance) + ">";
    for (t += "<option value=''></option>", i = 0; i <= 100; i += 10) t += "<option value='" + (i / 100).toFixed(1) + "F'>" + i + "%</option>";
    return t += "</select>"
}

function makeEnchantmentCheckBoxes(e) {
    return "<div id='" + e + "_enc' class='enchantsDiv'></div>"
}

function makeSearch(e) {
    return "<input type='text' onKeyUp=\"updateItemSelectOptions('" + e + "')\" class='inputBig' id='" + e + "_search'" + mkTT(ttSearchFilter) + ">"
}

function updateItemSelectOptions(e) {
    for (var t = $("#" + e + "_search").val().toLowerCase(), a = [], n = 0; n < items.length; n++) 0 != t.length && -1 == items[n][0].toLowerCase().indexOf(t) && -1 == items[n][1].toLowerCase().indexOf(t) || a.push('<option value="', items[n][0], '">', items[n][1], "</option>");
    if (-1 != e.indexOf("Block_") || -1 != e.indexOf("carried_"))
        for (n = 0; n < specialTiles.length; n++) 0 != t.length && -1 == specialTiles[n][0].toLowerCase().indexOf(t) && -1 == specialTiles[n][1].toLowerCase().indexOf(t) || a.push('<option value="', specialTiles[n][0], '">', specialTiles[n][1], "</option>");
    $("#" + e).html(a.join("")), loadEnchantmentOptions(e), generateSummon()
}

function makeAttributes(e) {
    $("#attributes_" + e).append("<br>" + mkLL("entityLabelBig", llFallFlying) + "<input type='checkbox' id='FallFlying_" + e + "' onclick='generateSummon()'" + mkTT(ttFallFlying) + "><br>" + mkLL("entityLabelBig", llPersistenceRequired) + "<input type='checkbox' id='PersistenceRequired_" + e + "' onclick='generateSummon()'" + mkTT(ttPersistenceRequired) + "><br>" + mkLL("entityLabelBig", llCanPickUpLoot) + "<input type='checkbox' id='CanPickUpLoot_" + e + "' onclick='generateSummon()'" + mkTT(ttCanPickUpLoot) + "><br>" + mkLL("entityLabelBig", llNoAI) + "<input type='checkbox' id='NoAI_" + e + "' onclick='generateSummon()'" + mkTT(ttNoAI) + "><br>" + mkLL("entityLabelBig", llSilent) + "<input type='checkbox' id='Silent_" + e + "' onclick='generateSummon()'" + mkTT(ttSilent) + "><br>" + mkLL("entityLabelBig", llRotation) + "<input type='text' id='yaw_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttYaw) + ">(" + llYaw + ")<br><span class='entityLabelBig'>&nbsp;</span><input type='text' id='pitch_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttPitch) + ">(" + llPitch + ")<br>" + mkLL("entityLabelBig", llLeashToUUIDLeast) + "<input type='text' id='leashUUIDLeast_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttLeashToUUIDLeast) + "><br>" + mkLL("entityLabelBig", llLeashToUUIDMost) + "<input type='text' id='leashUUIDMost_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttLeashToUUIDMost) + "><br>" + mkLL("entityLabelBig", llFire) + "<input type='text' id='Fire_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttFire) + "><br>" + mkLL("entityLabelBig", llHealF) + "<input type='text' id='HealF_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttHealF) + "><br>" + mkLL("entityLabelBig", llMaxHealth) + "<input type='text' id='maxhealth_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAttributeModifiersArray[0]) + "><br>" + mkLL("entityLabelBig", llFollowRange) + "<input type='text' id='followRange_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAttributeModifiersArray[1]) + "><br>" + mkLL("entityLabelBig", llKnockbackResistance) + "<input type='text' id='knockbackResistance_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAttributeModifiersArray[2]) + "><br>" + mkLL("entityLabelBig", llMovementSpeed) + "<input type='text' id='movementSpeed_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAttributeModifiersArray[3]) + "><br>" + mkLL("entityLabelBig", llAttackDamage) + "<input type='text' id='attackDamage_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAttributeModifiersArray[4]) + "><br>" + mkLL("entityLabelBig", llArmor) + "<input type='text' id='armor_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttAttributeModifiersArray[5]) + "><br>" + mkLL("entityLabelBig", llInvulnerable) + makeCheckbox("invulnerable_" + e, mkTT(ttInvulnerable)) + "<br>" + mkLL("entityLabelBig", llGlowing) + makeCheckbox("glowing_" + e, mkTT(ttGlowing)) + "<br>" + mkLL("entityLabelBig", llLeftHanded) + makeCheckbox("leftHanded_" + e, mkTT(ttLeftHanded)) + "<br>" + mkLL("entityLabelBig", llTeamEntity) + "<input type='text' id='team_" + e + "' onkeyup='generateSummon()' class='inputSmall'" + mkTT(ttTeamEntity) + "><br>" + mkLL("entityLabelBig", llDeathLootTable) + "<input type='text' id='DeathLootTable_" + e + "' onkeyup='generateSummon()' class='inputBig'" + mkTT(ttDeathLootTable) + ">")
}

function makeSelect(e, t, a) {
    var n = "<select id='" + e + "' onChange='generateSummon()'" + a + ">";
    for (i = 0; i < t.length; i++) n += "<option value='" + t[i] + "'", "False" == t[i] && (n += " SELECTED"), n += ">" + t[i] + "</option>";
    return n + "</select>"
}

function makeColorSelectSheep(e, t) {
    return makeSelectWithIndex(e, [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], [llBlack, llRed, llGreen, llBrown, llDarkBlue, llPurple, llCyan, llLightGray, llGray, llPink, llLime, llYellow, llLightBlue, llMagenta, llOrange, llWhite], t)
}

function makeColorSelectWolf(e, t) {
    return makeSelectWithIndex(e, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [llBlack, llRed, llGreen, llBrown, llDarkBlue, llPurple, llCyan, llLightGray, llGray, llPink, llLime, llYellow, llLightBlue, llMagenta, llOrange, llWhite], t)
}

function loadEnchantmentOptions(e) {
    var t = $("#" + e).val();
    if (0 != t) {
        -1 == e.indexOf("Item_") && ($("#span" + e.replace("_", "_DC_")).show(), $("#span" + e.replace("_", "_DCount_")).show()), $("#" + e + "_cpocdhfPanel").show(), $("#span" + e.replace("_", "_Name_")).show(), $("#span" + e.replace("_", "_Lore_")).show(), $("#itemAttributeModifiers_" + e).show(), $("#" + e + "_enc").html("");
        var a = !1;
        null != $("#" + e).val() && -1 != $("#" + e).val().indexOf("skull:3") && ($("#" + e + "_enc").append(mkLL("entityLabel", llSkullOwner) + makeSkullOwnerSelect(e)), a = !0), isLeatherArmor(t) ? makeColorChooser(e, "#" + e + "_enc", ttColor) : "fireworks" == t || "firework_charge" == t ? makeFireWorkOptions(e, "#" + e + "_enc", "fireworks" == t, t) : "banner" == t || "shield" == t ? makeBannerTagInput(e, "#" + e + "_enc") : -1 != t.indexOf("spawn_egg") ? makeEntityTagInput(e, "#" + e + "_enc", llEntityTagSpawnEgg, llEnityTagInstructionSpawnEgg) : -1 != t.indexOf("armor_stand") ? makeEntityTagInput(e, "#" + e + "_enc", llEntityTagArmorStand, llEnityTagInstructionArmorStand) : "written_book" == t ? makeWrittenBookInput("#" + e + "_enc") : "writable_book" == t ? makeWritableBookInput(e, "#" + e + "_enc") : -1 != t.indexOf("_shulker_box") || "trapped_chest" == t || "chest" == t ? makeChestSlots(0, 26, 0, e + "_enc") : null == t || -1 == t.indexOf("potion") && -1 == t.indexOf("tipped_arrow") ? -1 != e.indexOf("Item_") && null != t && -1 == t.indexOf("potion") && -1 == t.indexOf("tipped_arrow") && $("#statusEffects_" + mLineID).remove() : (makePotionSelector("#" + e + "_enc"), makeStatusEffectCheckBoxes("#" + e + "_enc"), makeColorChooser(e + "_enc", "#" + e + "_enc", ttPotionColor));
        for (enc in enchantables)
            for (i = 0; i < enchantables[enc][1].length; i++)
                if ($("#modeEnchantAll").is(":checked") || enchantables[enc][1][i] == t) {
                    a = !0, $("#" + e + "_enc").append("<span class='enchantCheckBox'><input type='checkbox' id='" + e + "_enc_" + enc + "' class='Enchants' onclick=\"enableLevelBox('" + e + "_enc_" + enc + "','" + e + "_lvl_" + enc + "')\">" + enchantables[enc][0] + "</span><span id='" + e + "_lvl_" + enc + "_span' class='enchantLevel'> " + llLevel + " <input type='text' id='" + e + "_lvl_" + enc + "' value='1' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttLevel) + "></span><br>"), $("#" + e + "_lvl_" + enc + "_span").hide();
                    break
                }
        a && -1 == $("#" + e).val().indexOf("skull:3") && ($("#" + e + "_enc").append("<span class='unbreakCheckBox'><input type='checkbox' id='" + e + "_unbreakable' class='Unbreakable' onclick='generateSummon()'>" + llUnbreakable + "</span><br>"), $("#" + e + "_enc").prepend("<span class='label'>" + llItemOptions + "</span><br>")), isDurable(t) && $("#" + e + "_enc").prepend(mkLL("entityLabel", llDamage) + "<input type='text' id='" + e + "_dmg' value='' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttDamage) + "><br>"), "enchanted_book" == t && makeStoredEnchantments(e, "#" + e + "_enc")
    } else $("#" + e + "_enc").html(""), -1 == e.indexOf("Item_") && ($("#span" + e.replace("_", "_DC_")).hide(), $("#span" + e.replace("_", "_DCount_")).hide()), $("#" + e + "_cpocdhfPanel").hide(), $("#span" + e.replace("_", "_Name_")).hide(), $("#span" + e.replace("_", "_Lore_")).hide(), $("#itemAttributeModifiers_" + e).hide();
    generateSummon()
}

function isDurable(e) {
    for (enc in enchantables)
        for (i = 0; i < enchantables[enc][1].length; i++)
            if (enchantables[enc][1][i] == e) return !0;
    return !1
}

function makeStoredEnchantments(e, t) {
    $(t).append("<br><div id='" + e + "_storedEnchantments' style='width:400px;'><span class='entityLabelBig'>Stored Enchantments</span></div>");
    for (enc in enchantables) $("#" + e + "_enc").append("<span class='enchantCheckBox'><input type='checkbox' id='" + e + "_SEenc_" + enc + "' class='StoredEnchants' onclick=\"enableLevelBox('" + e + "_SEenc_" + enc + "','" + e + "_SElvl_" + enc + "')\">" + enchantables[enc][0] + "</span><span id='" + e + "_SElvl_" + enc + "_span' class='enchantLevel'> " + llLevel + " <input type='text' id='" + e + "_SElvl_" + enc + "' value='1' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttLevel) + "></span><br>"), $("#" + e + "_SElvl_" + enc + "_span").hide()
}

function makeColorChooser(e, t, a) {
    $(t).append("<input type='checkbox' id='" + e + "_customcol' onclick='enableCustomCol(\"" + e + '_customcol","' + e + '")\' title="' + a + '">' + llEnableColors + " <span id='" + e + "_colsettings'>" + llColor + ": <input id='" + e + "_color' value='FF0000' onchange='generateSummon()'></span><br>"), new jscolor.color(document.getElementById(e + "_color"), {}).fromString("FF0000"), $("#" + e + "_colsettings").hide()
}

function makeBannerTagInput(e, t) {
    $(t).append("<br><div id='" + e + "_bannerTag' style='width:400px;'><span class='entityLabelBig'>" + llBannerTag + "</span></div>"), $("#" + e + "_bannerTag").append(makeInputText(e + "_bannerCode", ttBannerTag, "inputLarge", "onKeyUp='generateSummon()'") + "<br>" + llBannerInstruction + "<br>")
}

function makeWritableBookInput(e, t) {
    $(t).append("<br><div id='" + e + "_BookTextTag' style='width:400px;'><span class='entityLabel'>" + llBookText + "</span></div>"), $("#" + e + "_BookTextTag").append("<textarea id='" + e + "_bookText' onKeyUp='generateSummon()'></textarea><br>" + ttBookTextInstruction + "<br>")
}

function makeEntityTagInput(e, t, a, n) {
    $(t).append("<br><div id='" + e + "_entityTag' style='width:400px;'><span class='entityLabelBig'>" + a + "</span></div>"), $("#" + e + "_entityTag").append(makeInputText(e + "_entityCode", ttEntityTag, "inputLarge", "onKeyUp='generateSummon()'") + "<br>" + n + "<br>")
}

function makeFireWorkOptions(e, t, a, n) {
    $(t).append("<br><span id='" + e + "_fireworkrocket'></span>"), a && $("#" + e + "_fireworkrocket").append(mkLL("label", llFlightDuration) + makeSelect(e + "_flight", [1, 2, 3], mkTT(ttFlightDuration))), "firework_charge" != n ? ($("#" + e + "_fireworkrocket").append(makeButton(llAddExplosion, "addFireworkExplosion('" + e + "_fireworkrocket', true)", ttAddExplosion) + "<br>"), addFireworkExplosion(e + "_fireworkrocket", !0)) : addFireworkExplosion(e + "_fireworkrocket", !1)
}

function addFireworkExplosion(e, t) {
    for (var a = 0; $("#" + e + "_exp_" + a).length;) a++;
    $("#" + e).append("<span id='" + e + "_exp_" + a + "' class='explosion'><hr></span>"), $("#" + e + "_exp_" + a).append(makeSelectWithIndex(e + "_exp_" + a + "_type", [0, 1, 2, 3, 4], [llSmallBall, llLargeBall, llStar, llCreeper, llBurst], mkTT(ttExplosionType)) + makeCheckbox(e + "_exp_" + a + "_flicker", mkTT(ttFlicker)) + llFlicker + " " + makeCheckbox(e + "_exp_" + a + "_trail", mkTT(ttTrail)) + " " + llTrail + "<br>"), t && $("#" + e + "_exp_" + a).append(makeButton(llRemoveExplosion, "removeFireworkExplosion('" + e + "_exp_" + a + "')", ttRemoveExplosion) + "<br>"), $("#" + e + "_exp_" + a).append("<span id='" + e + "_exp_" + a + "_col'>" + mkLL("fwColFade", llColor) + makeButton("+", "addFireWorkColor('" + e + "_exp_" + a + "_col')", ttAddColor) + makeButton("x", "removeFireWorkColor('" + e + "_exp_" + a + "_col')", ttRemoveColor) + "</span><br><span id='" + e + "_exp_" + a + "_fade'>" + mkLL("fwColFade", llFadeColor) + makeButton("+", "addFireWorkColor('" + e + "_exp_" + a + "_fade')", ttAddFadeColor) + makeButton("x", "removeFireWorkColor('" + e + "_exp_" + a + "_fade')", ttRemoveFadeColor) + "</span><br>"), addFireWorkColor(e + "_exp_" + a + "_col"), addFireWorkColor(e + "_exp_" + a + "_fade")
}

function removeFireworkExplosion(e) {
    $("#" + e).remove(), generateSummon()
}

function addFireWorkColor(e) {
    for (var t = 0; $("#" + e + "_" + t).length;) t++;
    $("#" + e).append("<input id='" + e + "_" + t + "' value='FF0000' onchange='generateSummon()' class='colField'" + mkTT(ttHexColor) + ">");
    new jscolor.color(document.getElementById(e + "_" + t), {});
    generateSummon()
}

function removeFireWorkColor(e) {
    for (var t = 0; $("#" + e + "_" + t).length;) t++;
    t - 1 != 0 ? (t--, $("#" + e + "_" + t).remove()) : alertify.error(eeFireWorkColorError), generateSummon()
}

function enableCustomCol(e, t) {
    $("#" + e).is(":checked") ? $("#" + t + "_colsettings").show() : $("#" + t + "_colsettings").hide(), generateSummon()
}

function enableLevelBox(e, t) {
    $("#" + e).is(":checked") ? $("#" + t + "_span").show() : $("#" + t + "_span").hide(), generateSummon()
}

function makeSkullOwnerSelect(e) {
    var t = "<select id='skullselect_" + e + "' onChange=\"loadSkullPlayerName('skullselect_" + e + "','" + e + "_skull')\"" + mkTT(ttChooseHead) + ">";
    for (t += "<option value='APlayerName'>" + llPlayerSkull + "</option>", i = 0; i < skullOwners.length; i++) t += "<option value='" + skullOwners[i] + "'>" + skullOwners[i] + "</option>";
    return t + "</select><input type='text' id='" + e + "_skull' value='A_Players_Name' onkeyup='generateSummon()'" + mkTT(ttSkullOwnerName) + "><span id='" + e + "_skull_Tip'><br>" + ttHeadGenerator + "</span>"
}

function loadSkullPlayerName(e, t) {
    "APlayerName" == $("#" + e).val() ? ($("#" + t).show(), $("#" + t + "_Tip").show()) : ($("#" + t).hide(), $("#" + t + "_Tip").hide()), $("#" + t).val($("#" + e).val()), generateSummon()
}

function makeSelectWithIndex(e, t, a, n) {
    var o = "<select id='" + e + "' onChange='generateSummon()'" + n + ">";
    for (i = 0; i < a.length; i++) o += "<option value='" + t[i] + "'>" + a[i] + "</option>";
    return o + "</select>"
}

function updateHorseOptions(e, t) {
    var a = "<span id='horseStuff_" + t + "'><br>" + mkLL("entityLabelBig", llBred) + makeCheckbox("Bred_" + t, mkTT(ttBred)) + "<br>" + mkLL("entityLabelBig", llEatingHaystack) + makeCheckbox("EatingHaystack_" + t, mkTT(ttEatingHaystack)) + "<br>" + mkLL("entityLabelBig", llTame) + makeCheckbox("Tame_" + t, mkTT(ttTame)) + "<br>" + mkLL("entityLabelBig", llJumpStrength) + "<input type='text' id='jumpStrength_" + t + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttJumpStrength) + "> <br>" + mkLL("entityLabelBig", llTemper) + "<input type='text' id='Temper_" + t + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttTemper) + "> <br>" + mkLL("entityLabelBig", llHasSaddle) + makeCheckbox("SaddleItem_" + t, mkTT(ttHasSaddle));
    "horse" == e ? a += makehorseVariantSelect(t) + "<br>" + mkLL("entityLabelBig", llArmorItem) + makeSelectWithIndex("ArmorItem_" + t, ["", "iron_horse_armor", "golden_horse_armor", "diamond_horse_armor"], [llNone, llIron, llGold, llDiamond], mkTT(ttArmorItem)) : "mule" == e || "donkey" == e ? a += "<br>" + mkLL("entityLabelBig", llHasChests) + "<input id='ChestedHorse_" + t + "' type='checkbox' onclick='makeHorseChestSlots(" + t + ")'" + mkTT(ttHasChests) + "><br><span id='ChestSlot_" + t + "'></span>" : "skeleton_horse" == e && (a += "<br>" + mkLL("entityLabelBig", llSkeletonTrap) + makeCheckbox("SkeletonTrap_" + t, mkTT(ttSkeletonTrap)) + mkLL("entityLabelBig", llSkeletonTrapTime) + "<input type='text' id='SkeletonTrapTime_" + t + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttSkeletonTrapTime) + ">"), a += "</span>", $("#horseStuff_" + t).remove(), $("#rightDiv_" + t).append(a), generateSummon()
}

function updateLlamaOptions(e, t) {
    -1 == e && (e = $("#Type_" + t).val());
    var a = "<span id='horseStuff_" + t + "'><br>" + mkLL("entityLabelBig", llVariant) + makeSelectWithIndex("Variant_" + t, [0, 1, 2, 3, -1], llLlamaVariants, mkTT(ttVariant)) + "<br>" + mkLL("entityLabelBig", llBred) + makeCheckbox("Bred_" + t, mkTT(ttBred)) + "<br>" + mkLL("entityLabelBig", llEatingHaystack) + makeCheckbox("EatingHaystack_" + t, mkTT(ttEatingHaystack)) + "<br>" + mkLL("entityLabelBig", llTame) + makeCheckbox("Tame_" + t, mkTT(ttTame)) + "<br>" + mkLL("entityLabelBig", llTemper) + "<input type='text' id='Temper_" + t + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttTemper) + "> <br>" + mkLL("entityLabelBig", llLlamaStrength) + "<input type='text' id='LlamaStrength_" + t + "' class='inputSmall' onkeyup='generateSummon()'" + mkTT(ttLlamaStrength) + "> <br>" + mkLL("entityLabelBig", llDecorItem) + makeSelect("DecorItem_" + t, ["White", "Orange", "Magenta", "Light Blue", "Yellow", "Lime", "Pink", "Gray", "Light Gray", "Cyan", "Purple", "Blue", "Brown", "Green", "Red", "Black", "None"], mkTT(ttDecorItem)) + "<br>" + mkLL("entityLabelBig", llHasChests) + "<input id='ChestedHorse_" + t + "' type='checkbox' onclick='makeHorseChestSlots(" + t + ")'" + mkTT(ttHasChests) + "><br><span id='ChestSlot_" + t + "'></span></span>";
    $("#horseStuff_" + t).remove(), $("#rightDiv_" + t).append(a), $("#DecorItem_" + t + " option[value=None]").prop("selected", !0), generateSummon()
}

function makeHorseChestSlots(e) {
    $("#ChestedHorse_" + e).is(":checked") ? makeChestSlots(2, 16, e, "ChestSlot_" + e) : $("#ChestSlot_" + e).html(""), generateSummon()
}

function makehorseVariantSelect(e) {
    var t = "<br>" + mkLL("entityLabelBig", llVariant) + "<select id='Variant_" + e + "' onChange='generateSummon()'" + mkTT(ttVariant) + ">";
    for (c = 0; c < llHorseColors.length; c++)
        for (m = 0; m < llHorseMarkings.length; m++) t += "<option value='" + (c + 256 * m) + "'>" + llHorseColors[c] + " / " + llHorseMarkings[m] + "</option>";
    return (t += "<option value='7'>" + llInvisibleHorse + "</option>") + "</select>"
}

function getCoords(e, t, a, n) {
    return $("#" + e).val().length > 0 && $("#" + n).is(":checked") ? x = "~" + $("#" + e).val() : $("#" + e).val().length > 0 && !$("#" + n).is(":checked") ? x = $("#" + e).val() : 0 == $("#" + e).val().length && $("#" + n).is(":checked") ? x = "~" : x = "0", $("#" + t).val().length > 0 && $("#" + n).is(":checked") ? y = "~" + $("#" + t).val() : $("#" + t).val().length > 0 && !$("#" + n).is(":checked") ? y = $("#" + t).val() : 0 == $("#" + t).val().length && $("#" + n).is(":checked") ? y = "~1" : y = "70", $("#" + a).val().length > 0 && $("#" + n).is(":checked") ? z = "~" + $("#" + a).val() : $("#" + a).val().length > 0 && !$("#" + n).is(":checked") ? z = $("#" + a).val() : 0 == $("#" + a).val().length && $("#" + n).is(":checked") ? z = "~" : z = "0", [x, y, z]
}

function getSpawnPosition(e, t, a) {
    if (0 != $("#" + e).val().length && 0 != $("#" + t).val().length && 0 != $("#" + a).val().length) {
        var n = ",Pos:[" + $("#" + e).val();
        return -1 == $("#" + e).val().indexOf(".") && (n += ".0"), n += "," + $("#" + t).val(), -1 == $("#" + t).val().indexOf(".") && (n += ".0"), n += "," + $("#" + a).val(), -1 == $("#" + a).val().indexOf(".") && (n += ".0"), n + "]"
    }
    return ""
}

function hasPassengers(e, t, a) {
    for (var n = t.length - 2; n >= 0; n--)
        if ($("#RidingStackID_" + a[n]).val() == e) return !0;
    return !1
}

function findPassengers(e, t, a, n) {
    if ("" == e) return n;
    for (var o = "", i = !1, l = t.length - 2; l >= 0; l--) $("#RidingStackID_" + a[l]).val() == e && (o = appendToSummonString(o, ',{id:"' + t[l] + '"'), o += generateEntityOptions(a[l], t[l]), hasPassengers($("#StackID_" + a[l]).val(), t, a) && (o = findPassengers($("#StackID_" + a[l]).val(), t, a, o)), o += "}", i = !0);
    return i && (n = (n += ",Passengers:[" + o + "]").replace("Passengers:[,", "Passengers:[")), n
}

function generateSummon() {
    $("#feedback").html("");
    var e = "";
    if ("Give" == $("#commandType").val()) e = "/give " + getTargetSelectorString() + " " + generateItemOptionsForGive(0, "Item");
    else if ("ReplaceItemEntity" == $("#commandType").val()) e = "/replaceitem entity " + getTargetSelectorString() + " " + getSlotItem() + " " + generateItemOptionsForGive(0, "Item");
    else if ("ReplaceItemBlock" == $("#commandType").val() || "SetBlock" == $("#commandType").val() || "Fill" == $("#commandType").val() || "BlockData" == $("#commandType").val()) e = "/" + getBlockCommand();
    else if ("AnyCommand" == $("#commandType").val());
    else {
        var t = $("#inputForm > .EntityOptions").map(function() {
            return this.id || null
        }).get(),
            a = [],
            n = [];
        for (i = 0; i < t.length; i++) {
            var o = t[i].split("_")[1];
            a.push($("#entityList_" + o + " option:selected").text()), n.push(o)
        }
        coords = getCoords("xpos", "ypos", "zpos", "relative");
        var l = coords[0],
            s = coords[1],
            c = coords[2],
            m = "";
        e = "/", "Spawner" == $("#commandType").val() ? (e += "setblock " + l + " " + s + " " + c + ' minecraft:mob_spawner 0 replace {SpawnData:{id:"minecraft:' + a[a.length - 1] + '"', e += getSpawnPosition("spawnXpos", "spawnYpos", "spawnZpos")) : e += "summon " + a[a.length - 1] + " " + l + " " + s + " " + c + " {PlaceholderForSummonData", m += "}", e = appendToSummonString(e, generateEntityOptions(n[a.length - 1], a[a.length - 1]));
        var d = !1,
            p = "";
        if (a.length > 1) {
            var h = [];
            for (stackindex = a.length - 1; stackindex >= 0; stackindex--) "" != $("#StackID_" + n[stackindex]).val() && h.push($("#StackID_" + n[stackindex]).val());
            var u = [];
            for (stackindex = a.length - 2; stackindex >= 0; stackindex--) {
                if ("" == $("#RidingStackID_" + n[stackindex]).val()) {
                    p = "One or more of the entities does not have a Riding Stack ID set.", d = !0;
                    break
                }
                u.push($("#RidingStackID_" + n[stackindex]).val())
            }
            if (h.length + u.length == 0) p = "", d = !0;
            else if (h.length + u.length > 0 && !d)
                if ("" == $("#StackID_" + n[a.length - 1]).val()) p = "The bottom entity requires a Stack ID if using advanced stacking.", d = !0;
                else {
                    for (r = 0; r < u.length; r++)
                        if (-1 == $.inArray(u[r], h)) {
                            p = "No such Stack ID:" + u[r] + " was set.", d = !0;
                            break
                        }
                    d || (e = findPassengers($("#StackID_" + n[a.length - 1]).val(), a, n, e))
                } else d = !0
        }
        if (p.length > 0 ? $("#feedback").html("<br>" + p + " Instead MCStacker will create basic vertical stack in the order shown.") : $("#feedback").html(""), d)
            for (stackindex = a.length - 2; stackindex >= 0; stackindex--) a.length > 1 && (e = appendToSummonString(e, 'Passengers:[{id:"' + a[stackindex] + '"'), m += "]}"), e += generateEntityOptions(n[stackindex], a[stackindex]);
        e = (e = (e = (e = (e = (e += m).replace(",SpawnData:{,", ",SpawnData:{")).replace(",}", "}")).replace(",SpawnData:{}", "")).replace("{PlaceholderForSummonData}", "")).replace("PlaceholderForSummonData,", ""), "Spawner" == $("#commandType").val() && ($("#SpawnCount").val().length > 0 && (e += ",SpawnCount:" + $("#SpawnCount").val()), $("#SpawnRange").val().length > 0 && (e += ",SpawnRange:" + $("#SpawnRange").val()), $("#RequiredPlayerRange").val().length > 0 && (e += ",RequiredPlayerRange:" + $("#RequiredPlayerRange").val()), $("#Delay").val().length > 0 && (e += ",Delay:" + $("#Delay").val()), $("#MinSpawnDelay").val().length > 0 && (e += ",MinSpawnDelay:" + $("#MinSpawnDelay").val()), $("#MaxSpawnDelay").val().length > 0 && 0 != $("#MaxSpawnDelay").val() && (e += ",MaxSpawnDelay:" + $("#MaxSpawnDelay").val()), $("#MaxNearbyEntities").val().length > 0 && (e += ",MaxNearbyEntities:" + $("#MaxNearbyEntities").val()), e = (e = (e += "}").replace("SpawnData:,", "SpawnData:")).replace(",SpawnData:}", "}"))
    }
    $("#summonCommand").val(e), $("#summonCommand2").val(e)
}

function appendToSummonString(e, t) {
    return 0 == t.length ? e : "{" == e.charAt(e.length - 1) || "," == e.charAt(e.length - 1) || "," == t.charAt(0) ? e + t : e + "," + t
}

function generateItemOptionsForGive(e, t) {
    var a = dropChanceCountOption("#" + t + "_DC_" + e).replace("b", "");
    if (amount = a.replace(",Count:", ""), a = getItemTag($("#" + t + "_" + e).val()), data = "0 ", id = replaceAll('"', "", a), id = replaceAll("id:", "", id), -1 != a.indexOf(",Damage:") ? (data = a.substr(a.indexOf(",Damage:") + 8) + " ", id = id.substr(0, id.indexOf(",Damage:"))) : $("#Item_0_dmg").length && $("#Item_0_dmg").val().length > 0 && (data = $("#Item_0_dmg").val() + " "), a = id + " " + amount + " " + data, a += enchantmentsOptions("#" + t + "_" + e + "_enc"), null != $("#" + t + "_" + e).val() && -1 != $("#" + t + "_" + e).val().indexOf("skull:3") && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{" + getSkullNonPlayerHead($("#" + t + "_" + e + "_skull").val().trim()) + ",") : a += ",tag:{" + getSkullNonPlayerHead($("#" + t + "_" + e + "_skull").val().trim()) + "}"), nameAndLore = makeNameAndLore(e, t), nameAndLore.length > 0 && (-1 == a.indexOf("display:") ? -1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{display:{" + nameAndLore + "},") : a += ",tag:{display:{" + nameAndLore + "}}" : a = -1 != a.indexOf("written_book") || -1 != a.indexOf("chest") && -1 == a.indexOf("chestplate") || -1 != a.indexOf("shulker_box") ? a.replace(",tag:{", ",tag:{display:{" + nameAndLore + "},") : a.replace("display:{", "display:{" + nameAndLore + ",")), $("#" + t + "_" + e + "_unbreakable").is(":checked") && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{Unbreakable:1,") : a += ",tag:{Unbreakable:1}"), $("#itemAttributeModifiers_" + t + "_" + e + "_cb").is(":checked")) {
        var n = getAttributeModifiers("itemAttributeModifiers_" + t + "_" + e);
        n.length > 0 && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{" + n + ",") : a += ",tag:{" + n + "}")
    }
    if ($("#" + t + "_cpo_" + e).is(":checked") || $("#" + t + "_cd_" + e).is(":checked") || $("#" + t + "_hf_" + e).is(":checked")) {
        var o = getCanDestroyCanPlaceOnHideFlags(e, t);
        o.length > 0 && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{" + o + ",") : a += ",tag:{" + o + "}")
    }
    return a = a.replace(",}", "}"), -1 == (a = a.replace(",tag:{}", "")).indexOf("minecraft:0") ? a = a.replace(",tag:{", "{") : ""
}

function makeNameAndLore(e, t) {
    var a = "";
    return $("#" + t + "_NamedItem_" + e).val().length > 0 && (a = 'Name:"' + $("#" + t + "_NamedItem_" + e).val() + '"'), $("#" + t + "_Lore_" + e).val().length > 0 && (a.length > 0 && (a += ","), a += 'Lore:["' + replaceAll(",", '","', $("#" + t + "_Lore_" + e).val()) + '"]'), a
}

function appendToSummonString(e, t) {
    return 0 == t.length ? e : "{" == e.charAt(e.length - 1) || "," == e.charAt(e.length - 1) || "," == t.charAt(0) ? e + t : e + "," + t
}

function dropChanceCountOption(e) {
    return $(e.replace("DC", "DCount")).length ? ",Count:" + $(e.replace("DC", "DCount")).val() + "b" : ""
}

function hasDropChances(e) {
    return "armor_stand" != $("#entityList_" + e + " option:selected").text() && ("0.085F" != $("#eHolding_DC_" + e).val() || "0.085F" != $("#eHead_DC_" + e).val() || "0.085F" != $("#eBody_DC_" + e).val() || "0.085F" != $("#eLeg_DC_" + e).val() || "0.085F" != $("#eBoot_DC_" + e).val())
}

function enchantmentsOptions(e) {
    for (var t = $(e + " .Enchants").map(function() {
        return this.id || null
    }).get(), a = [], n = 0; n < t.length; n++) - 1 != ("#" + t[n]).indexOf(e) && $("#" + t[n]).is(":checked") && a.push(t[n]);
    var o = $(e.replace("_enc", "")).val();
    if (null == o) return "";
    if (a.length > 0 || -1 != o.indexOf("_shulker_box") || "trapped_chest" == o || "chest" == o || "enchanted_book" == o || "written_book" == o || "writable_book" == o || "banner" == o || "shield" == o || "fireworks" == o || "firework_charge" == o || "armor_stand" == o || "tipped_arrow" == o || "lingering_potion" == o || "splash_potion" == o || "potion" == o || -1 != o.indexOf("potion:") || -1 != o.indexOf("spawn_egg") || isLeatherArmor(o) && $(e.replace("_enc", "") + "_customcol").is(":checked")) {
        var i = ",tag:{";
        if (a.length > 0) {
            for (i += "ench:[", n = 0; n < a.length; n++) $("#" + a[n]).is(":checked") && ("}" == i.charAt(i.length - 1) && (i += ","), i += "{id:" + a[n].substring(a[n].lastIndexOf("_") + 1, a[n].length) + ",lvl:" + $("#" + a[n].replace("enc", "lvl")).val() + "}");
            i += "],"
        }
        var l = "";
        if (isLeatherArmor(o) && $(e.replace("_enc", "") + "_customcol").is(":checked") && ("]" == i.charAt(i.length - 1) && (i += ","), i += "display:{color:" + (65536 * hexToR(m = $(e.replace("_enc", "") + "_color").val()) + 256 * hexToG(m) + hexToB(m)), l = "}"), "fireworks" == o) i += makeFireWorksRocketDataTag(e.replace("_enc", ""));
        else if ("firework_charge" == o) i += makeFireChargeDataTag(e.replace("_enc", ""));
        else if ("banner" == o || "shield" == o) $(e.replace("_enc", "") + "_bannerCode").length && (i += (s = $(e.replace("_enc", "") + "_bannerCode").val()).substring(s.indexOf("{") + 1, s.lastIndexOf("}")));
        else if (-1 != o.indexOf("_shulker_box") || "trapped_chest" == o || "chest" == o) {
            var r = getChestSlotItems(e, 0);
            r.length > 0 && (i += "BlockEntityTag:{" + r + "}")
        } else if (-1 != o.indexOf("spawn_egg") || -1 != o.indexOf("armor_stand")) {
            if ($(e.replace("_enc", "") + "_entityCode").val().length > 0) {
                var s = $(e.replace("_enc", "") + "_entityCode").val(); - 1 != s.indexOf("/summon") ? (i += "EntityTag:{", -1 != o.indexOf("spawn_egg") && (i += 'id:"minecraft:' + s.split(" ")[1] + '",'), i += s.substring(s.indexOf("{") + 1, s.lastIndexOf("}")) + "}") : i += s.substring(s.indexOf("{") + 1, s.lastIndexOf("}"))
            } else if (-1 != o.indexOf("spawn_egg")) {
                var c = "";
                switch (parseInt(o.substring(o.indexOf(":") + 1))) {
                    case 50:
                        c = "creeper";
                        break;
                    case 51:
                        c = "skeleton";
                        break;
                    case 52:
                        c = "spider";
                        break;
                    case 54:
                        c = "zombie";
                        break;
                    case 55:
                        c = "slime";
                        break;
                    case 56:
                        c = "ghast";
                        break;
                    case 57:
                        c = "zombie_pigman";
                        break;
                    case 58:
                        c = "enderman";
                        break;
                    case 59:
                        c = "cave_spider";
                        break;
                    case 60:
                        c = "silverfish";
                        break;
                    case 61:
                        c = "blaze";
                        break;
                    case 62:
                        c = "magma_cube";
                        break;
                    case 65:
                        c = "bat";
                        break;
                    case 66:
                        c = "witch";
                        break;
                    case 67:
                        c = "endermite";
                        break;
                    case 68:
                        c = "guardian";
                        break;
                    case 69:
                        c = "shulker";
                        break;
                    case 90:
                        c = "pig";
                        break;
                    case 91:
                        c = "sheep";
                        break;
                    case 92:
                        c = "cow";
                        break;
                    case 93:
                        c = "chicken";
                        break;
                    case 94:
                        c = "squid";
                        break;
                    case 95:
                        c = "wolf";
                        break;
                    case 96:
                        c = "mooshroom";
                        break;
                    case 98:
                        c = "ocelot";
                        break;
                    case 100:
                        c = "horse";
                        break;
                    case 101:
                        c = "rabbit";
                        break;
                    case 120:
                        c = "villager";
                        break;
                    case 121:
                        c = "polar_bear";
                        break;
                    case 122:
                        c = "evocation_illager";
                        break;
                    case 123:
                        c = "vindication_illager";
                        break;
                    case 124:
                        c = "vex";
                        break;
                    case 125:
                        c = "llama";
                        break;
                    case 126:
                        c = "elder_guardian";
                        break;
                    case 127:
                        c = "wither_skeleton";
                        break;
                    case 128:
                        c = "zombie_villager";
                        break;
                    case 129:
                        c = "stray";
                        break;
                    case 130:
                        c = "husk";
                        break;
                    case 131:
                        c = "skeleton_horse";
                        break;
                    case 132:
                        c = "zombie_horse";
                        break;
                    case 133:
                        c = "donkey";
                        break;
                    case 134:
                        c = "mule";
                        break;
                    case 135:
                        c = "parrot"
                }
                c.length > 0 && (i += 'EntityTag:{id:"minecraft:' + c + '"}')
            }
        } else if ("potion" == o || "splash_potion" == o || "lingering_potion" == o || "tipped_arrow" == o || -1 != o.indexOf("potion:")) {
            if (i += generateActiveEffectsOptions(e).replace(",ActiveEffects", "CustomPotionEffects"), i += generatePotionEffectChoice(e), $(e + "_customcol").is(":checked")) {
                var m = $(e + "_color").val();
                i += ",CustomPotionColor:" + (65536 * hexToR(m) + 256 * hexToG(m) + hexToB(m))
            }
            i = i.replace(",,", ",")
        } else "enchanted_book" == o ? i += generateEnchantedBook(e) : "written_book" == o ? i += generateWrittenBook(e) : "writable_book" == o && (i += generateWritableBook(e));
        return i += l, (i = i.replace("{,", "{")) + "}"
    }
    return ""
}

function generateWritableBook(e) {
    var t = $(e.replace("_enc", "_bookText")).val(),
        a = "pages:[";
    if (t.length > 0) {
        for (var n = t.split("PAGE_BREAK"), o = 0; o < n.length; o++) a += '"' + replaceAll('"', '\\"', n[o]) + '",';
        return a = a.substr(0, a.length - 1) + "]"
    }
    return ""
}

function generateEnchantedBook(e) {
    for (var t = $(e + " .StoredEnchants").map(function() {
        return this.id || null
    }).get(), a = [], n = 0; n < t.length; n++) $("#" + t[n]).is(":checked") && a.push(t[n]);
    var o = "";
    if (a.length > 0) {
        for (o += "StoredEnchantments:[", n = 0; n < a.length; n++) $("#" + a[n]).is(":checked") && ("}" == o.charAt(o.length - 1) && (o += ","), o += "{id:" + a[n].substring(a[n].lastIndexOf("_") + 1, a[n].length) + ",lvl:" + $("#" + a[n].replace("enc", "lvl")).val() + "}");
        o += "]"
    }
    return o
}

function makeFireChargeDataTag(e) {
    var t = "Explosion:{";
    return $(e + "_fireworkrocket > .explosion").each(function() {
        var e = this.id;
        t += "Type:" + $("#" + e + "_type").val() + ",", $("#" + e + "_flicker").is(":checked") && (t += "Flicker:1,"), $("#" + e + "_trail").is(":checked") && (t += "Trail:1,"), t += "Colors:" + makeFireWorkColors(e + "_col"), t += ",FadeColors:" + makeFireWorkColors(e + "_fade")
    }), t + "}"
}

function makeFireWorksRocketDataTag(e) {
    var t = "Fireworks:{";
    try {
        $(e + "_flight").length && $(e + "_flight").val().length > 0 && (t += "Flight:" + $(e + "_flight").val() + ",")
    } catch (e) {}
    t += "Explosions:[";
    var a = !0;
    return $(e + "_fireworkrocket > .explosion").each(function() {
        a || (t += ","), a = !1;
        var e = this.id;
        t += "{Type:" + $("#" + e + "_type").val() + ",", $("#" + e + "_flicker").is(":checked") && (t += "Flicker:1,"), $("#" + e + "_trail").is(":checked") && (t += "Trail:1,"), t += "Colors:" + makeFireWorkColors(e + "_col"), t += ",FadeColors:" + makeFireWorkColors(e + "_fade") + "}"
    }), t + "]}"
}

function makeFireWorkColors(e) {
    var t = "[I;";
    return $("#" + e + " > .colField").each(function() {
        var e = $("#" + this.id).val(),
            a = 65536 * hexToR(e) + 256 * hexToG(e) + hexToB(e);
        "[" != t.charAt(t.length - 3) && (t += ","), t += a
    }), t + "]"
}

function hexToR(e) {
    return parseInt(cutHex(e).substring(0, 2), 16)
}

function hexToG(e) {
    return parseInt(cutHex(e).substring(2, 4), 16)
}

function hexToB(e) {
    return parseInt(cutHex(e).substring(4, 6), 16)
}

function cutHex(e) {
    return "#" == e.charAt(0) ? e.substring(1, 7) : e
}

function isLeatherArmor(e) {
    return "leather_helmet" == e || "leather_chestplate" == e || "leather_leggings" == e || "leather_boots" == e
}

function generateAttributeOptions(e) {
    var t = "";
    return ($("#maxhealth_" + e).val().length > 0 || $("#movementSpeed_" + e).val().length > 0 || $("#attackDamage_" + e).val().length > 0 || $("#armor_" + e).val().length > 0 || $("#followRange_" + e).val().length > 0 || ("horse" == $("#entityList_" + e).val() || "mule" == $("#entityList_" + e).val() || "donkey" == $("#entityList_" + e).val() || "zombie_horse" == $("#entityList_" + e).val() || "skeleton_horse" == $("#entityList_" + e).val()) && $("#jumpStrength_" + e).val().length > 0 || ("zombie" == $("#entityList_" + e).val() || "husk" == $("#entityList_" + e).val()) && $("#spawnReinforcements_" + e).val().length > 0 || $("#knockbackResistance_" + e).val().length > 0) && (t += ",Attributes:[", $("#maxhealth_" + e).val().length > 0 && (t += "{Name:generic.maxHealth,Base:" + $("#maxhealth_" + e).val() + "}"), $("#movementSpeed_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:generic.movementSpeed,Base:" + $("#movementSpeed_" + e).val() + "}"), ("horse" == $("#entityList_" + e).val() || "mule" == $("#entityList_" + e).val() || "donkey" == $("#entityList_" + e).val() || "zombie_horse" == $("#entityList_" + e).val() || "skeleton_horse" == $("#entityList_" + e).val()) && $("#jumpStrength_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:horse.jumpStrength,Base:" + $("#jumpStrength_" + e).val() + "}"), ("zombie" == $("#entityList_" + e).val() || "husk" == $("#entityList_" + e).val()) && $("#spawnReinforcements_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:zombie.spawnReinforcements,Base:" + $("#spawnReinforcements_" + e).val() + "}"), $("#attackDamage_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:generic.attackDamage,Base:" + $("#attackDamage_" + e).val() + "}"), $("#followRange_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:generic.followRange,Base:" + $("#followRange_" + e).val() + "}"), $("#knockbackResistance_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:generic.knockbackResistance,Base:" + $("#knockbackResistance_" + e).val() + "}"), $("#armor_" + e).val().length > 0 && ("}" == t.charAt(t.length - 1) && (t += ","), t += "{Name:generic.armor,Base:" + $("#armor_" + e).val() + "}"), t += "]"), $("#invulnerable_" + e).is(":checked") && (t += ",Invulnerable:1"), $("#HealF_" + e).val().length > 0 && (t += ",Health:" + $("#HealF_" + e).val(), -1 == $("#HealF_" + e).val().indexOf(".") && (t += ".0"), t += "f"), $("#yaw_" + e).val().length > 0 && $("#pitch_" + e).val().length > 0 && (t += ",Rotation:[" + $("#yaw_" + e).val() + "f," + $("#pitch_" + e).val() + "f]"), $("#leashUUIDLeast_" + e).val().length > 0 && $("#leashUUIDMost_" + e).val().length > 0 && (t += ",Leashed:1,Leash:{UUIDLeast:" + $("#leashUUIDLeast_" + e).val() + "L,UUIDMost:" + $("#leashUUIDMost_" + e).val() + "L}"), $("#FallFlying_" + e).is(":checked") && (t += ",FallFlying:1b"), $("#PersistenceRequired_" + e).is(":checked") && (t += ",PersistenceRequired:1"), $("#CanPickUpLoot_" + e).is(":checked") && (t += ",CanPickUpLoot:1b"), $("#NoAI_" + e).is(":checked") && (t += ",NoAI:1"), $("#Silent_" + e).is(":checked") && (t += ",Silent:1"), $("#Fire_" + e).val().length > 0 && (t += ",Fire:" + $("#Fire_" + e).val()), $("#glowing_" + e).is(":checked") && (t += ",Glowing:1b"), $("#leftHanded_" + e).is(":checked") && (t += ",LeftHanded:1"), $("#team_" + e).val().length > 0 && (t += ',Team:"' + $("#team_" + e).val() + '"'), $("#DeathLootTable_" + e).val().length > 0 && (t += ',DeathLootTable:"' + $("#DeathLootTable_" + e).val() + '"'), t
}

function generateActiveEffectsOptions(e) {
    var t = ",ActiveEffects:[";
    if ($(e + "_enableStatusEffect").is(":checked"))
        for (i = 0; i < statusEffects.length; i++)
            if ($(e + "_effect_" + statusEffects[i][0]).is(":checked")) {
                "}" == t.charAt(t.length - 1) && (t += ",");
                var a = $(e + "_" + statusEffects[i][0] + "_hideParticle").is(":checked") ? ",ShowParticles:0b" : "";
                t += "{Id:" + statusEffects[i][0] + ",Amplifier:" + $(e + "_" + statusEffects[i][0] + "_amp").val() + ",Duration:" + 20 * $(e + "_" + statusEffects[i][0] + "_dur").val() + a + "}"
            }
    return -1 != (t += "]").indexOf("[]") ? "" : t
}

function generatePotionEffectChoice(e) {
    return "" != $(e + "_potion_id_1p9").val() ? ',Potion:"minecraft:' + $(e + "_potion_id_1p9").val() + '"' : ""
}

function getItemTag(e) {
    var t, a, n = "";
    return -1 != e.indexOf(":") ? (a = e.split(":")[0], n = e.split(":")[1]) : a = e, t = 'id:"minecraft:' + a + '"', n.length > 0 && (t += ",Damage:" + n), t
}

function get1p8ID(e) {
    for (i = 0; i < items.length; i++)
        if (e == items[i][0]) return items[i][2];
    return e
}

function getSkullNonPlayerHead(e) {
    return -1 != e.indexOf("SkullOwner:{Id:") ? (e = e.substr(e.indexOf("SkullOwner:{Id:")), e = e.replace("}]}}}}]}", "}]}}"), e = e.replace("}]}}}", "}]}}")) : e.length > 0 ? 'SkullOwner:{Name:"' + e + '"}' : ""
}

function generateEquipmentOptionsForPart(e, t) {
    var a = getItemTag($("#" + t + "_" + e).val());
    if ('id:"minecraft:0"' == a) return "";
    if ($("#" + t + "_" + e + "_dmg").length && $("#" + t + "_" + e + "_dmg").val().length > 0 && (a += ",Damage:" + $("#" + t + "_" + e + "_dmg").val()), a += dropChanceCountOption("#" + t + "_DC_" + e), a += enchantmentsOptions("#" + t + "_" + e + "_enc"), null != $("#" + t + "_" + e).val() && -1 != $("#" + t + "_" + e).val().indexOf("skull:3") && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{" + getSkullNonPlayerHead($("#" + t + "_" + e + "_skull").val().trim()) + ",") : a += ",tag:{" + getSkullNonPlayerHead($("#" + t + "_" + e + "_skull").val().trim()) + "}"), nameAndLore = makeNameAndLore(e, t), nameAndLore.length > 0 && (-1 == a.indexOf("display:") ? -1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{display:{" + nameAndLore + "},") : a += ",tag:{display:{" + nameAndLore + "}}" : a = -1 != a.indexOf("written_book") || -1 != a.indexOf("chest") && -1 == a.indexOf("chestplate") || -1 != a.indexOf("shulker_box") ? a.replace(",tag:{", ",tag:{display:{" + nameAndLore + "},") : a.replace("display:{", "display:{" + nameAndLore + ",")), $("#" + t + "_" + e + "_unbreakable").is(":checked") && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{Unbreakable:1,") : a += ",tag:{Unbreakable:1}"), $("#itemAttributeModifiers_" + t + "_" + e + "_cb").is(":checked")) {
        var n = getAttributeModifiers("itemAttributeModifiers_" + t + "_" + e);
        n.length > 0 && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{" + n + ",") : a += ",tag:{" + n + "}")
    }
    if ($("#" + t + "_cpo_" + e).is(":checked") || $("#" + t + "_cd_" + e).is(":checked") || $("#" + t + "_hf_" + e).is(":checked")) {
        var o = getCanDestroyCanPlaceOnHideFlags(e, t);
        o.length > 0 && (-1 != a.indexOf(",tag:{") ? a = a.replace(",tag:{", ",tag:{" + o + ",") : a += ",tag:{" + o + "}")
    }
    return a = a.replace(",}", "}"), a = a.replace(",tag:{}", "")
}

function generateEquipmentOptions(e) {
    var t = "",
        a = "";
    return 0 == $("#eHead_" + e).val() && 0 == $("#eBody_" + e).val() && 0 == $("#eLeg_" + e).val() && 0 == $("#eBoot_" + e).val() || (t += ",ArmorItems:[{", t += generateEquipmentOptionsForPart(e, "eBoot") + "},{", t += generateEquipmentOptionsForPart(e, "eLeg") + "},{", t += generateEquipmentOptionsForPart(e, "eBody") + "},{", t += generateEquipmentOptionsForPart(e, "eHead") + "}]", "armor_stand" == $("#entityList_" + e + " option:selected").text() || "0.085F" == $("#eHead_DC_" + e).val() && "0.085F" == $("#eBody_DC_" + e).val() && "0.085F" == $("#eLeg_DC_" + e).val() && "0.085F" == $("#eBoot_DC_" + e).val() || (a += ",ArmorDropChances:[" + $("#eBoot_DC_" + e).val() + "," + $("#eLeg_DC_" + e).val() + "," + $("#eBody_DC_" + e).val() + "," + $("#eHead_DC_" + e).val() + "]")), 0 == $("#eHolding_" + e).val() && 0 == $("#eHoldingOffHand_" + e).val() || (t += ",HandItems:[{", t += generateEquipmentOptionsForPart(e, "eHolding") + "},{", t += generateEquipmentOptionsForPart(e, "eHoldingOffHand") + "}]", "armor_stand" == $("#entityList_" + e + " option:selected").text() || "0.085F" == $("#eHolding_DC_" + e).val() && "0.085F" == $("#eHoldingOffHand_DC_" + e).val() || (a += ",HandDropChances:[" + $("#eHolding_DC_" + e).val() + "," + $("#eHoldingOffHand_DC_" + e).val() + "]")), t + a
}

function getMotion(e, t) {
    if (0 != $("#" + t + "X_" + e).val().length && 0 != $("#" + t + "Y_" + e).val().length && 0 != $("#" + t + "Z_" + e).val().length) {
        var a = "," + t + ":[" + $("#" + t + "X_" + e).val();
        return -1 == $("#" + t + "X_" + e).val().indexOf(".") && (a += ".0"), a += "," + $("#" + t + "Y_" + e).val(), -1 == $("#" + t + "Y_" + e).val().indexOf(".") && (a += ".0"), a += "," + $("#" + t + "Z_" + e).val(), -1 == $("#" + t + "Z_" + e).val().indexOf(".") && (a += ".0"), a + "]"
    }
    return ""
}

function generateEntityOptions(e, t) {
    var a = "";
    if ($("#entityCustomName_" + e).val().length > 0 && (a += ',CustomName:"' + $("#entityCustomName_" + e).val() + '"', $("#hideCustomName_" + e).is(":checked") || (a += ",CustomNameVisible:1")), $("#entityUUIDLeast_" + e).val().length > 0 && $("#entityUUIDMost_" + e).val().length > 0 && (a += ",UUIDLeast:" + $("#entityUUIDLeast_" + e).val() + "L,UUIDMost:" + $("#entityUUIDMost_" + e).val() + "L"), $("#Tags_" + e).val().length > 0 && (a += ',Tags:["' + $("#Tags_" + e).val().replace(/,/g, '","') + '"]'), $("#NoGravity_" + e).is(":checked") && (a += ",NoGravity:1b"), isVehicle(t) && $("#invulnerable_" + e).is(":checked") && (a += ",Invulnerable:1"), "fireball" != t && "small_fireball" != t && "wither_skull" != t && "dragon_fireball" != t && (a += getMotion(e, "motion").replace("motion", "Motion")), isProjectile(t) && ($("#inGround_" + e).is(":checked") && (a += ",inGround:1"), "arrow" == t || "spectral_arrow" == t ? (a += ",pickup:" + $("#pickup_" + e + " option:selected").val(), $("#player_" + e).is(":checked") && (a += ",player:1"), $("#crit_" + e).is(":checked") && (a += ",crit:1b"), $("#damage_" + e).val().length > 0 && (a += ",damage:" + $("#damage_" + e).val()), $("#life_" + e).val().length > 0 && (a += ",life:" + $("#life_" + e).val()), "spectral_arrow" == t ? $("#duration_" + e).val().length > 0 && (a += ",duration:" + $("#duration_" + e).val()) : ((i = generateActiveEffectsOptions("#rightDiv_" + e)).length > 0 && (a += i.replace("ActiveEffects", "CustomPotionEffects")), (i = generatePotionEffectChoice("#rightDiv_" + e)).length > 0 && (a += i))) : "fireball" == t || "small_fireball" == t || "wither_skull" == t || "dragon_fireball" == t ? (a += getMotion(e, "motion").replace("motion", "direction"), a += getMotion(e, "power"), $("#Life_" + e).val().length > 0 && (a += ",Life:" + $("#Life_" + e).val()), "fireball" == t && $("#ExplosionPower_" + e).val().length > 0 && (a += ",ExplosionPower:" + $("#ExplosionPower_" + e).val())) : "ender_pearl" != t && "xp_bottle" != t && "potion" != t && "snowball" != t || ($("#ownerName_" + e).val().length > 0 && (a += ",ownerName:" + $("#ownerName_" + e).val()), "potion" == t && ($("#Lingering_" + e).is(":checked") ? a += ',Potion:{id:"minecraft:lingering_potion",Count:1' : a += ',Potion:{id:"minecraft:splash_potion",Count:1', (i = generatePotionEffectChoice("#rightDiv_" + e) + generateActiveEffectsOptions("#rightDiv_" + e)).length > 0 && (a += ",tag:{" + i.replace("ActiveEffects", "CustomPotionEffects").substring(1) + "}"), a += "}"))), "area_effect_cloud" == t) {
        if (a += ",Particle:" + $("#Particle_" + e).val(), $("#ReapplicationDelay_" + e).val().length > 0 && (a += ",ReapplicationDelay:" + $("#ReapplicationDelay_" + e).val()), $("#Radius_" + e).val().length > 0 && (a += ",Radius:" + $("#Radius_" + e).val() + "f"), $("#RadiusPerTick_" + e).val().length > 0 && (a += ",RadiusPerTick:" + $("#RadiusPerTick_" + e).val() + "f"), $("#RadiusOnUse_" + e).val().length > 0 && (a += ",RadiusOnUse:" + $("#RadiusOnUse_" + e).val() + "f"), $("#Duration_" + e).val().length > 0 && (a += ",Duration:" + $("#Duration_" + e).val()), $("#DurationOnUse_" + e).val().length > 0 && (a += ",DurationOnUse:" + $("#DurationOnUse_" + e).val() + "f"), $("#Age_" + e).val().length > 0 && (a += ",Age:" + $("#Age_" + e).val()), $("#WaitTime_" + e).val().length > 0 && (a += ",WaitTime:" + $("#WaitTime_" + e).val()), $("#ColorAreaEffectCloud_" + e + "_customcol").is(":checked")) {
            var n = $("#ColorAreaEffectCloud_" + e + "_color").val();
            a += ",Color:" + (65536 * hexToR(n) + 256 * hexToG(n) + hexToB(n))
        }
        $("#OwnerUUIDLeast_" + e).val().length > 0 && (a += ",OwnerUUIDLeast:" + $("#OwnerUUIDLeast_" + e).val()), $("#OwnerUUIDMost_" + e).val().length > 0 && (a += ",OwnerUUIDMost:" + $("#OwnerUUIDMost_" + e).val()), (i = generateActiveEffectsOptions("#rightDiv_" + e)).length > 0 && (a += i.replace("ActiveEffects", "Effects")), (i = generatePotionEffectChoice("#rightDiv_" + e)).length > 0 && (a += i)
    } else if ("armor_stand" == t) $("#ShowArms_" + e).is(":checked") && (a += ",ShowArms:1"), $("#Small_" + e).is(":checked") && (a += ",Small:1"), $("#Marker_" + e).is(":checked") && (a += ",Marker:1b"), $("#glowing_" + e).is(":checked") && (a += ",Glowing:1b"), $("#Invisible_" + e).is(":checked") && (a += ",Invisible:1"), $("#invulnerable_" + e).is(":checked") && (a += ",Invulnerable:1"), $("#NoBasePlate_" + e).is(":checked") && (a += ",NoBasePlate:1"), $("#FallFlying_" + e).is(":checked") && (a += ",FallFlying:1b"), $("#PersistenceRequired_" + e).is(":checked") && (a += ",PersistenceRequired:1"), $("#Rotation_" + e).val().length > 0 && (a += ",Rotation:[" + $("#Rotation_" + e).val() + "f,0.0f]"), a += generateEquipmentOptions(e), a += armorStandPose(e), a += armorStandDisabledSlotBitField(e);
    else if ("bat" == t) $("#BatFlags_" + e).is(":checked") && (a += ",BatFlags:1");
    else if ("boat" == t) a += ',Type:"' + $("#BoatType_" + e).val() + '"';
    else if ("chicken" == t) $("#IsChickenJockey_" + e).is(":checked") && (a += ",IsChickenJockey:1"), $("#EggLayTime_" + e).val().length > 0 && (a += ",EggLayTime:" + $("#EggLayTime_" + e).val());
    else if ("creeper" == t) $("#powered_" + e).is(":checked") && (a += ",powered:1"), $("#ignited_" + e).is(":checked") && (a += ",ignited:1"), $("#ExplosionRadius_" + e).val().length > 0 && (a += ",ExplosionRadius:" + $("#ExplosionRadius_" + e).val()), $("#Fuse_" + e).val().length > 0 && (a += ",Fuse:" + $("#Fuse_" + e).val());
    else if ("ender_crystal" == t) $("#BTX_" + e).val().length > 0 && $("#BTY_" + e).val().length > 0 && $("#BTZ_" + e).val().length > 0 && (a += ",BeamTarget:{X:" + $("#BTX_" + e).val() + ",Y:" + $("#BTY_" + e).val() + ",Z:" + $("#BTZ_" + e).val() + "}"), $("#HideBase_" + e).is(":checked") && (a += ",ShowBottom:0b");
    else if ("ender_dragon" == t) $("#DragonPhase_" + e).val().length > 0 && (a += ",DragonPhase:" + $("#DragonPhase_" + e).val());
    else if ("enderman" == t) "0" != $("#carried_" + e + " option:selected").val() && (i = (i = (i = getItemTag($("#carried_" + e).val())).replace("id", "carried")).replace("Damage", "carriedData"), a += "," + i);
    else if ("endermite" == t) $("#Lifetime_" + e).val().length > 0 && (a += ",Lifetime:" + $("#Lifetime_" + e).val());
    else if ("evocation_illager" == t) $("#SpellTicks_" + e).val().length > 0 && (a += ",SpellTicks:" + $("#SpellTicks_" + e).val());
    else if ("llama" == t) $("#Bred_" + e).is(":checked") && (a += ",Bred:1"), "Unspecified" != $("#Variant_" + e + " option:selected").text() && (a += ",Variant:" + $("#Variant_" + e).val()), "None" != $("#DecorItem_" + e + " option:selected").text() && (a += ',DecorItem:{id:"minecraft:carpet",Count:1b,Damage:' + $("#DecorItem_" + e).prop("selectedIndex") + "s}"), $("#EatingHaystack_" + e).is(":checked") && (a += ",EatingHaystack:1"), $("#Tame_" + e).is(":checked") && (a += ",Tame:1"), $("#Temper_" + e).val().length > 0 && (a += ",Temper:" + $("#Temper_" + e).val()), $("#LlamaStrength_" + e).val().length > 0 && (a += ",Strength:" + $("#LlamaStrength_" + e).val()), $("#ChestedHorse_" + e).is(":checked") && (a += ",ChestedHorse:1", a += getChestSlotItems("#ChestSlot_" + e, e));
    else if ("horse" == t || "skeleton_horse" == t || "zombie_horse" == t || "donkey" == t || "mule" == t) $("#SaddleItem_" + e).is(":checked") && (a += ',SaddleItem:{id:"minecraft:saddle",Count:1b}'), "horse" == t ? (a += ",Variant:" + $("#Variant_" + e).val(), "" != $("#ArmorItem_" + e).val() && (a += ',ArmorItem:{id:"minecraft:' + $("#ArmorItem_" + e).val() + '",Count:1b}')) : "donkey" == t || "mule" == t ? $("#ChestedHorse_" + e).is(":checked") && (a += ",ChestedHorse:1", a += getChestSlotItems("#ChestSlot_" + e, e)) : "skeleton_horse" == t && $("#SkeletonTrap_" + e).is(":checked") && (a += ",SkeletonTrap:1b", $("#SkeletonTrapTime_" + e).val().length > 0 && (a += ",SkeletonTrapTime:" + $("#SkeletonTrapTime_" + e).val())), $("#Bred_" + e).is(":checked") && (a += ",Bred:1"), $("#EatingHaystack_" + e).is(":checked") && (a += ",EatingHaystack:1"), $("#Tame_" + e).is(":checked") && (a += ",Tame:1"), $("#Temper_" + e).val().length > 0 && (a += ",Temper:" + $("#Temper_" + e).val());
    else if ("falling_block" == t) i = "," + (i = (i = getItemTag($("#Block_" + e).val())).replace("Damage:", "Data:")).replace("id:", "Block:"), a += i + ",Data:", $("#Block_" + e + "_dataValue").length ? a += $("#Block_" + e + "_dataValue").val() : a += "0", $("#TileEntityData_" + e).val().length > 0 && (a += ",TileEntityData:" + $("#TileEntityData_" + e).val()), $("#Time_" + e).val().length > 0 && (a += ",Time:" + $("#Time_" + e).val()), $("#DropItem_" + e).is(":checked") || (a += ",DropItem:0"), $("#HurtEntities_" + e).is(":checked") && (a += ",HurtEntities:1"), $("#FallHurtMax_" + e).val().length > 0 && (a += ",FallHurtMax:" + $("#FallHurtMax_" + e).val()), $("#FallHurtAmount_" + e).val().length > 0 && (a += ",FallHurtAmount:" + $("#FallHurtAmount_" + e).val());
    else if ("fireworks_rocket" == t) $("#LifeTime_" + e).val().length > 0 && (a += ",LifeTime:" + $("#LifeTime_" + e).val()), a += ",FireworksItem:{id:fireworks,Count:1,tag:{", a += makeFireWorksRocketDataTag("#Fireworks_" + e) + "}}";
    else if ("ghast" == t) $("#ExplosionPower_" + e).val().length > 0 && (a += ",ExplosionPower:" + $("#ExplosionPower_" + e).val());
    else if ("giant" == t);
    else if ("item" == t) a += ",Item:{" + generateEquipmentOptionsForPart(e, "Item") + "}", $("#Age_" + e).val().length > 0 && (a += ",Age:" + $("#Age_" + e).val()), $("#Health_" + e).val().length > 0 && (a += ",Health:" + $("#Health_" + e).val()), $("#PickupDelay_" + e).val().length > 0 && (a += ",PickupDelay:" + $("#PickupDelay_" + e).val()), $("#Owner_" + e).val().length > 0 && (a += ",Owner:" + $("#Owner_" + e).val()), $("#Thrower_" + e).val().length > 0 && (a += ",Thrower:" + $("#Thrower_" + e).val());
    else if ("item_frame" == t)(i = generateEquipmentOptionsForPart(e, "Item")).length > 0 && (a += ",Item:{" + i + ",Count:1b}"), a += ",Facing:" + $("#Facing_" + e).val(), a += ",ItemRotation:" + $("#ItemRotation_" + e).val();
    else if ("magma_cube" == t || "slime" == t) $("#Size_" + e).val().length > 0 && (a += ",Size:" + $("#Size_" + e).val()), $("#wasOnGround_" + e).is(":checked") && (a += ",wasOnGround:1");
    else if ("ocelot" == t) a += ",CatType:" + $("#CatType_" + e).val();
    else if ("tnt" == t) $("#Fuse_" + e).val().length > 0 && (a += ",Fuse:" + $("#Fuse_" + e).val());
    else if ("squid" == t) $("#Air_" + e).val().length > 0 && (a += ",Air:" + $("#Air_" + e).val());
    else if ("painting" == t) a += ",Facing:" + $("#Facing_" + e).val() + ",Motive:" + $("#Motive_" + e).val();
    else if ("parrot" == t) a += ",Variant:" + $("#Variant_" + e).val(), $("#OwnerUUID_" + e).val().length > 0 && (a += ",OwnerUUID:" + $("#OwnerUUID_" + e).val()), $("#Sitting_" + e).is(":checked") ? a += ",Sitting:1" : a += ",Sitting:0";
    else if ("pig" == t) $("#Saddle_" + e).is(":checked") && (a += ",Saddle:1");
    else if ("zombie_pigman" == t) - 1 != $("#IsBaby_" + e).val() && (a += ",IsBaby:" + $("#IsBaby_" + e).val()), $("#Anger_" + e).val().length > 0 && (a += ",Anger:" + $("#Anger_" + e).val());
    else if ("rabbit" == t) $("#MoreCarrotTicks_" + e).val().length > 0 && (a += ",MoreCarrotTicks:" + $("#MoreCarrotTicks_" + e).val()), a += ",RabbitType:" + $("#RabbitType_" + e).val();
    else if ("sheep" == t) $("#Sheared_" + e).is(":checked") && (a += ",Sheared:1"), a += ",Color:" + $("#Color_" + e).val();
    else if ("shulker" == t) $("#Peek_" + e).val().length > 0 && (a += ",Peek:" + $("#Peek_" + e).val()), $("#APX_" + e).val().length > 0 && (a += ",APX:" + $("#APX_" + e).val()), $("#APY_" + e).val().length > 0 && (a += ",APY:" + $("#APY_" + e).val()), $("#APZ_" + e).val().length > 0 && (a += ",APZ:" + $("#APZ_" + e).val()), a += ",AttachFace:" + $("#AttachFace_" + e).val(), a += ",Color:" + $("#Color_" + e).val() + "b";
    else if ("shulker_bullet" == t) $("#Steps_" + e).val().length > 0 && (a += ",Steps:" + $("#Steps_" + e).val()), $("#TXD_" + e).val().length > 0 && (a += ",TXD:" + $("#TXD_" + e).val()), $("#TYD_" + e).val().length > 0 && (a += ",TYD:" + $("#TYD_" + e).val()), $("#TZD_" + e).val().length > 0 && (a += ",TZD:" + $("#TZD_" + e).val()), $("#OX_" + e).val().length > 0 && $("#OY_" + e).val().length > 0 && $("#OZ_" + e).val().length > 0 && $("#OUUID_" + e).val().length > 0 && (a += ",Owner:{X:" + $("#OX_" + e).val() + ",Y:" + $("#OY_" + e).val() + ",Z:" + $("#OZ_" + e).val() + ",L:" + $("#OUUID_" + e).val() + "L,M:" + $("#OUUID_" + e).val() + "L}"), $("#TX_" + e).val().length > 0 && $("#TY_" + e).val().length > 0 && $("#TZ_" + e).val().length > 0 && $("#TUUID_" + e).val().length > 0 && (a += ",Target:{X:" + $("#TX_" + e).val() + ",Y:" + $("#TY_" + e).val() + ",Z:" + $("#TZ_" + e).val() + ",L:" + $("#TUUID_" + e).val() + "L,M:" + $("#TUUID_" + e).val() + "L}");
    else if ("snowman" == t) $("#NoPumpkin_" + e).is(":checked") && (a += ",Pumpkin:0b");
    else if ("xp_orb" == t) a += ",Value:" + $("#Value_" + e).val(), $("#Health_" + e).val().length > 0 && (a += ",Health:" + $("#Health_" + e).val()), $("#Age_" + e).val().length > 0 && (a += ",Age:" + $("#Age_" + e).val());
    else if ("villager" == t) {
        if (a += ",Profession:" + $("#Profession_" + e).val(), -1 != $("#Career_" + e).val() && (a += ",Career:" + $("#Career_" + e).val()), $("#CareerLevel_" + e).val().length > 0 && (a += ",CareerLevel:" + $("#CareerLevel_" + e).val()), $("#Willing_" + e).is(":checked") && (a += ",Willing:1"), $("#recipes" + e).children().length > 0) {
            a += ",Offers:{Recipes:[{";
            var o = !0;
            $("#recipes" + e + " > .villagerOffer").each(function() {
                var t = "";
                o || (t += ",{"), o = !1;
                var n = this.id.split("_")[1];
                $("#rewardExp" + n + "_" + e).is(":checked") ? t += "rewardExp:1b," : t += "rewardExp:0b,", t += "maxUses:" + $("#maxUses" + n + "_" + e).val() + ",", t += "uses:" + $("#uses" + n + "_" + e).val() + ",", t += "buy:{" + generateEquipmentOptionsForPart(e, "buy_" + n), t += "},", 0 != $("#buyB_" + n + "_" + e).val() && (t += "buyB:{" + generateEquipmentOptionsForPart(e, "buyB_" + n), t += "},"), t += "sell:{" + generateEquipmentOptionsForPart(e, "Sell_" + n), a += t += "}}"
            }), a += "]}"
        }
    } else if (isMinecart(t)) {
        if ($("#CustomDisplayTile_" + e).is(":checked")) {
            if (a += ",CustomDisplayTile:1", $("#DisplayTile_" + e).val().length > 0) {
                var i = getItemTag($("#DisplayTile_" + e).val());
                i = (i = i.replace("id:", "DisplayTile:")).replace("Damage:", "DisplayData:"), a += "," + i
            }
            $("#DisplayOffset_" + e).val().length > 0 && (a += ",DisplayOffset:" + $("#DisplayOffset_" + e).val())
        }
        if ("furnace_minecart" == t) $("#PushX_" + e).val().length > 0 && (a += ",PushX:" + $("#PushX_" + e).val()), $("#PushZ_" + e).val().length > 0 && (a += ",PushZ:" + $("#PushZ_" + e).val()), $("#Fuel_" + e).val().length > 0 && (a += ",Fuel:" + $("#Fuel_" + e).val());
        else if ("hopper_minecart" == t) $("#TransferCooldown_" + e).val().length > 0 && (a += ",TransferCooldown:" + $("#TransferCooldown_" + e).val()), $("#MinecartHopperEnabled_" + e).is(":checked") && (a += ",Enabled:1b"), $("#LootTable_" + e).val().length > 0 && (a += ',LootTable:"' + $("#LootTable_" + e).val() + '"'), a += getChestSlotItems("#rightDiv_" + e, e);
        else if ("chest_minecart" == t) $("#LootTable_" + e).val().length > 0 && (a += ',LootTable:"' + $("#LootTable_" + e).val() + '"'), a += getChestSlotItems("#rightDiv_" + e, e);
        else if ("tnt_minecart" == t) $("#TNTFuse_" + e).val().length > 0 && (a += ",TNTFuse:" + $("#TNTFuse_" + e).val());
        else if ("commandblock_minecart" == t) $("#Command_" + e).val().length > 0 && ($("#EscapeQuotes_" + e).is(":checked") ? a += ',Command:"' + replaceAll('"', '\\"', $("#Command_" + e).val()) + '"' : a += ",Command:" + $("#Command_" + e).val());
        else if ("spawner_minecart" == t && $("#spawnData_" + e).val().length) {
            var l = $("#spawnData_" + e).val();
            a += "," + l.substring(l.indexOf("{") + 1, l.lastIndexOf("}"))
        }
    } else "vex" == t ? ($("#BoundX_" + e).val().length > 0 && $("#BoundY_" + e).val().length > 0 && $("#BoundZ_" + e).val().length > 0 && (a += ",BoundX:" + $("#BoundX_" + e).val() + ",BoundY:" + $("#BoundY_" + e).val() + ",BoundZ:" + $("#BoundZ_" + e).val()), $("#LifeTicks_" + e).val().length > 0 && (a += ",LifeTicks:" + $("#LifeTicks_" + e).val())) : "villager_golem" == t ? $("#PlayerCreated_" + e).is(":checked") ? a += ",PlayerCreated:1" : a += ",PlayerCreated:0" : "vindication_illager" == t ? $("#Johnny_" + e).is(":checked") && (a += ",Johnny:1b") : "wither" == t ? $("#Invul_" + e).val().length > 0 && (a += ",Invul:" + $("#Invul_" + e).val()) : "wolf" == t ? ($("#Angry_" + e).is(":checked") && (a += ",Angry:1"), a += ",CollarColor:" + $("#CollarColor_" + e).val()) : "husk" != t && "zombie" != t && "zombie_villager" != t || (-1 != $("#IsVillager_" + e).val() && (a += ",IsVillager:" + $("#IsVillager_" + e).val()), -1 != $("#IsBaby_" + e).val() && (a += ",IsBaby:" + $("#IsBaby_" + e).val()), $("#CanBreakDoors_" + e).is(":checked") && (a += ",CanBreakDoors:1"), "zombie_villager" == t && ($("#ConversionTime_" + e).val().length > 0 && (a += ",ConversionTime:" + $("#ConversionTime_" + e).val()), -1 != $("#VillagerProfession_" + e).val() && (a += ",Profession:" + $("#VillagerProfession_" + e).val())));
    return canBreed(t) && ($("#InLove_" + e).val().length > 0 && (a += ",InLove:" + $("#InLove_" + e).val()), $("#Age_" + e).val().length > 0 && (a += ",Age:" + $("#Age_" + e).val()), $("#ForcedAge_" + e).val().length > 0 && (a += ",ForcedAge:" + $("#ForcedAge_" + e).val()), $("#Owner_" + e).val().length > 0 && (a += ",Owner:" + $("#Owner_" + e).val()), $("#OwnerUUID_" + e).val().length > 0 && (a += ",OwnerUUID:" + $("#OwnerUUID_" + e).val()), "wolf" != t && "ocelot" != t || ($("#Sitting_" + e).is(":checked") ? a += ",Sitting:1" : a += ",Sitting:0")), hasDrops(t) && (a += generateEquipmentOptions(e), a += generateAttributeOptions(e), a += generateActiveEffectsOptions("#leftDiv_" + e)), a
}

function getChestSlotItems(e, t) {
    for (var a = $(e + " > .chestSlot").map(function() {
        return this.id || null
    }).get(), n = "", o = 0; o < a.length; o++) {
        var i = a[o].split("_")[1];
        0 != $("#Slot" + i + "_" + t).val() && (n += "{Slot:" + i + "," + generateEquipmentOptionsForPart(t, "Slot" + i) + "},")
    }
    return n.length > 0 ? (n = ",Items:[" + n + "]").replace(",]", "]") : ""
}

function getAttributeModifiers(e) {
    var t = "AttributeModifiers:[";
    for (j = 0; j < attributeModifiers.length; j++) "" != $("#" + e + "_" + attributeModifiers[j] + "_amount").val() && ("}" == t.charAt(t.length - 1) && (t += ","), t += '{AttributeName:"generic.' + attributeModifiers[j] + '",Name:"generic.' + attributeModifiers[j] + '",Amount:' + $("#" + e + "_" + attributeModifiers[j] + "_amount").val() + ",Operation:" + $("#" + e + "_" + attributeModifiers[j] + "_operation").val() + ",UUIDLeast:" + $("#" + e + "_" + attributeModifiers[j] + "_UUIDLeast").val() + ",UUIDMost:" + $("#" + e + "_" + attributeModifiers[j] + "_UUIDMost").val(), "Any" != $("#" + e + "_" + attributeModifiers[j] + "_Slot").val() && (t += ',Slot:"' + $("#" + e + "_" + attributeModifiers[j] + "_Slot").val() + '"'), t += "}");
    return "}" == t.charAt(t.length - 1) ? t + "]" : ""
}

function armorStandPose(e) {
    var t = ",Pose:{",
        n = !1,
        o = new Array("Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Head"),
        i = new Array("x", "y", "z");
    for (p = 0; p < o.length; p++) {
        for ("]" == t.charAt(t.length - 1) && (t += ","), t += o[p] + ":[", a = 0; a < i.length; a++) "f" == t.charAt(t.length - 1) && (t += ","), $("#pose_" + e + "_" + p + "_" + i[a]).val().length > 0 ? (n = !0, t += $("#pose_" + e + "_" + p + "_" + i[a]).val() + "f") : t += "0f";
        t += "]"
    }
    return t += "}", n ? t : ""
}

function armorStandDisabledSlotBitField(e) {
    for (bf = 0, p = 0; p < 5; p++) $("#disableSlot_" + e + "_" + p + "_remove").is(":checked") && (bf += 1 << p + 0), $("#disableSlot_" + e + "_" + p + "_replace").is(":checked") && (bf += 1 << p + 8), $("#disableSlot_" + e + "_" + p + "_place").is(":checked") && (bf += 1 << p + 16);
    return 0 != bf ? ",DisabledSlots:" + bf : ""
}

function getCanDestroyCanPlaceOnHideFlags(e, t) {
    var a = "";
    if ($("#" + t + "_cpo_" + e).is(":checked"))
        for (var n = $("#" + t + "_cpoPanel_" + e + " > .anItem").map(function() {
            return this.id || null
        }).get(), o = 0; o < n.length; o++) item = getItemTag($("#" + n[o] + "_item").val()).replace("id:", ""), -1 != item.indexOf(",") && (item = item.substring(0, item.indexOf(","))), a += item, o < n.length - 1 && (a += ",");
    a.length > 0 && (a = ",CanPlaceOn:[" + a + "]");
    var i = "";
    if ($("#" + t + "_cd_" + e).is(":checked"))
        for (var n = $("#" + t + "_cdPanel_" + e + " > .anItem").map(function() {
            return this.id || null
        }).get(), o = 0; o < n.length; o++) item = getItemTag($("#" + n[o] + "_item").val()).replace("id:", ""), -1 != item.indexOf(",") && (item = item.substring(0, item.indexOf(","))), i += item, o < n.length - 1 && (i += ",");
    i.length > 0 && (i = ",CanDestroy:[" + i + "]");
    var l = "";
    if ($("#" + t + "_hf_" + e).is(":checked")) {
        var r = 0;
        $("#" + t + "_hfenc_" + e).is(":checked") && (r += 1), $("#" + t + "_hfmod_" + e).is(":checked") && (r += 2), $("#" + t + "_hfunb_" + e).is(":checked") && (r += 4), $("#" + t + "_hfcd_" + e).is(":checked") && (r += 8), $("#" + t + "_hfcpo_" + e).is(":checked") && (r += 16), $("#" + t + "_hfo_" + e).is(":checked") && (r += 32), 0 != r && (l = ",HideFlags:" + r)
    }
    return str = a + i + l, str.length > 0 ? str.substring(1) : ""
}

function generateEnityList() {
    var e = "<select class='entityList' id='eType' onChange='generateSummon()'" + mkTT(ttTargetEntityType) + "'>";
    for (e += "<option value=''></option>", e += "<option value='Player'>" + llPlayer + "</option>", i = 0; i < entities.length; i++) e += "<option value='" + entities[i][1] + "'>" + entities[i][1] + "</option>";
    return e += "</select>"
}

function updateTarget() {
    updateTargetSpecificArgs()
}

function loadTargetSpecifiers() {
    lastTargetType = "specific", generateSummon()
}

function updateTargetSpecificArgs() {
    var e = "";
    "specific" == $("#target option:selected").val() ? (e += "<span class='leftPan'>" + mkLL("entityLabelBig", llPlayerName) + "<input type='text' id='playerName' value='PlayerNameHere' class='inputLarge' onKeyUp='generateSummon()'" + mkTT(ttPlayerName) + "'></span>", lastTargetType = $("#target option:selected").val(), $("#targetSpecs").html(e)) : "specific" == lastTargetType && (e += targetArgs(), lastTargetType = $("#target option:selected").val(), $("#targetSpecs").html(e)), generateSummon()
}

function changeAreaType() {
    "radius" == $("input[name=areaType]:checked").val() ? $("#areaType").html(radiusAreaControls()) : $("#areaType").html(volumeAreaControls()), generateSummon()
}

function volumeAreaControls() {
    return "<br>" + mkLL("entityLabelBig", llDirectionX) + "<input type='text' id='dx' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttDirectionX) + "'><br>" + mkLL("entityLabelBig", llDirectionY) + "<input type='text' id='dy' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttDirectionY) + "'><br>" + mkLL("entityLabelBig", llDirectionZ) + "<input type='text' id='dz' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttDirectionZ) + "'>"
}

function radiusAreaControls() {
    return "<br>" + mkLL("entityLabelBig", llMinRadius) + "<input type='text' id='rm' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMinRadius) + "'><br>" + mkLL("entityLabelBig", llMaxRadius) + "<input type='text' id='r' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMaxRadius) + "'>"
}

function getTargetSelectorString() {
    if ("specific" == $("#target option:selected").val()) return $("#playerName").val();
    var e = "@";
    return "nearest" == $("#target option:selected").val() ? e += "p" : "all" == $("#target option:selected").val() ? e += "a" : "random" == $("#target option:selected").val() ? e += "r" : "entity" == $("#target option:selected").val() && (e += "e"), e += "[", $("#x").val().length > 0 && $("#y").val().length > 0 && $("#z").val().length > 0 && (e += "x=" + $("#x").val(), e += ",y=" + $("#y").val(), e += ",z=" + $("#z").val()), $("#c").val().length && ("nearest" == $("input[name=countOrder]:checked").val() ? e += ",c=" + $("#c").val() : e += ",c=-" + $("#c").val()), "radius" == $("input[name=areaType]:checked").val() ? ($("#rm").val().length && (e += ",rm=" + $("#rm").val()), $("#r").val().length && (e += ",r=" + $("#r").val())) : $("#dx").val().length && $("#dy").val().length && $("#dz").val().length && ($("#dx").val().length && (e += ",dx=" + $("#dx").val()), $("#dy").val().length && (e += ",dy=" + $("#dy").val()), $("#dz").val().length && (e += ",dz=" + $("#dz").val())), -1 != $("#m").val() && (e += ",m=" + $("#m").val()), $("#lm").val().length && (e += ",lm=" + $("#lm").val()), $("#l").val().length && (e += ",l=" + $("#l").val()), $("#rxm").val().length && (e += ",rxm=" + $("#rxm").val()), $("#rx").val().length && (e += ",rx=" + $("#rx").val()), $("#rym").val().length && (e += ",rym=" + $("#rym").val()), $("#ry").val().length && (e += ",ry=" + $("#ry").val()), $("#scoreObjectives > .scoreObj").each(function() {
        var t = this.id.substr(this.id.indexOf("_") + 1);
        $("#score_name_" + t).val().length && (scoreName = $("#score_name_" + t).val(), $("#score_min_" + t).val().length && (e += ",score_" + scoreName + "_min=" + $("#score_min_" + t).val()), $("#score_max_" + t).val().length && (e += ",score_" + scoreName + "=" + $("#score_max_" + t).val()))
    }), $("#notOnAnyTeam").is(":checked") ? e += ",team=" : $("#team").val().length && (e += ",team=", $("#notTeam").is(":checked") && (e += "!"), e += $("#team").val()), $("#eName").val().length && (e += ",name=", $("#notName").is(":checked") && (e += "!"), e += $("#eName").val()), "" != $("#eType").val() && (e += ",type=", $("#notEntityType").is(":checked") && (e += "!"), e += $("#eType").val()), $("#tags").val().length > 0 && (e += ",tag=" + $("#tags").val().replace(/,/g, ",tag=")), e += "]", e = e.replace("[,", "["), e = e.replace("[]", "")
}

function hideTeam() {
    $("#notOnAnyTeam").is(":checked") ? $("#teamSpan").hide() : $("#teamSpan").show(), generateSummon()
}

function targetTypeSelector() {
    for (str = mkLL("label", llTarget) + "<select id='target' onChange='updateTarget()'" + mkTT(ttTarget) + ">", i = 0; i < targetTypes.length; i++) str += "<option value='" + targetTypes[i][0] + "'>" + targetTypes[i][1] + "</option>";
    return str += "</select>", str
}

function targetArgs() {
    return "<span class='leftPan'>" + mkLL("entityLabelBig", llCount) + "<input type='text' id='c' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttCountTargets) + "><br>" + mkLL("entityLabelBig", llCountDirection) + "<input type='radio' value='nearest' name='countOrder' id='nearest' onClick='generateSummon()'" + mkTT(ttNearest) + "' CHECKED>" + llNearest + " <input type='radio' value='farthest' name='countOrder'  id='farthest'  onClick='generateSummon()'" + mkTT(ttFarthest) + "'>" + llFarthest + "<br>" + mkLL("entityLabelBig", "X") + "<input type='text' id='x' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttTargetX) + "'><br>" + mkLL("entityLabelBig", "Y") + "<input type='text' id='y' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttTargetY) + "'><br>" + mkLL("entityLabelBig", "Z") + "<input type='text' id='z' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttTargetZ) + "'><br>" + mkLL("entityLabelBig", llSelectionArea) + "<input type='radio' value='radius' id='radius' name='areaType' onClick='changeAreaType()'" + mkTT(ttRadiusSelection) + " CHECKED>" + llRadiusSelection + " <input type='radio' value='volume' id='volume' name='areaType' onClick='changeAreaType()'" + mkTT(ttVolumeSelection) + ">" + llVolumeSelection + "<span id='areaType'>" + radiusAreaControls() + " </span><br>" + mkLL("entityLabelBig", llGameMode) + "<select id='m' onChange='generateSummon()'" + mkTT(ttGameMode) + "'><option value='-1'>" + llAllModes + "</option><option value='0'>" + llSurvival + "</option><option value='1'>" + llCreative + "</option><option value='2'>" + llAdventure + "</option><option value='3'>" + llSpectator + "</option></select><br>" + mkLL("entityLabelBig", llMinimumXPLevel) + "<input type='text' id='lm' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMinimumXPLevel) + "'><br>" + mkLL("entityLabelBig", llMaximumXPLevel) + "<input type='text' id='l' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMaximumXPLevel) + "'></span><span class='leftPan'>" + mkLL("entityLabelBig", llMinimumVerticalRotation) + "<input type='text' id='rxm' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMinimumVerticalRotation) + "'><br>" + mkLL("entityLabelBig", llMaximumVerticalRotation) + "<input type='text' id='rx' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMaximumVerticalRotation) + "'><br>" + mkLL("entityLabelBig", llMinimumHorizontalRotation) + "<input type='text' id='rym' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMinimumHorizontalRotation) + "'><br>" + mkLL("entityLabelBig", llMaximumHorizontalRotation) + "<input type='text' id='ry' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMaximumHorizontalRotation) + "'><br>" + mkLL("entityLabelBig", llTeam) + "<span id='teamSpan'><input type='text' id='team' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttTeam) + "'><input type='checkbox' id='notTeam' onClick='generateSummon()'" + mkTT(ttNotThisTeam) + "'>" + llNotThisTeam + "</span><input type='checkbox' id='notOnAnyTeam' onClick='hideTeam()'" + mkTT(ttNotOnAnyTeam) + ">" + llNotOnAnyTeam + "<br>" + mkLL("entityLabelBig", llEntityPlayerName) + "<input type='text' id='eName' class='inputLarge' onKeyUp='generateSummon()'" + mkTT(ttEntityPlayerName) + "'><input type='checkbox' id='notName' onClick='generateSummon()'" + mkTT(ttNotThisName) + "'>" + llNotThisName + "<br>" + mkLL("entityLabelBig", llTargetEntityType) + generateEnityList() + "<input type='checkbox' id='notEntityType' onClick='generateSummon()'" + mkTT(ttNotThisEntity) + "'>" + llNotThisEntity + "<br>" + mkLL("entityLabelBig", llTargetTags) + "<input type='text' id='tags' class='inputLarge' onKeyUp='generateSummon()'" + mkTT(ttTargetTags) + "'><br>" + makeButton(llAddScoreObjective, "addScoreObjective()", ttAddScoreObjective) + "<br><div id='scoreObjectives'></div></span>"
}

function removeScoreObjective(e) {
    $("#scoreSpan_" + e).remove(), generateSummon()
}

function addScoreObjective() {
    for (var e = 0; $("#scoreSpan_" + e).length;) e++;
    $("#scoreObjectives").append("<span id='scoreSpan_" + e + "' class='scoreObj'>" + mkLL("entityLabelBig", llScoreObjectiveName) + "<input type='text' id='score_name_" + e + "' class='inputLarge' onKeyUp='generateSummon()'" + mkTT(ttScoreObjectiveName) + "'>" + makeButton("x", "removeScoreObjective(" + e + ")", ttRemoveScoreObjective) + "<br>" + mkLL("entityLabelBig", llMinScore) + "<input type='text' id='score_min_" + e + "' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMinScore) + "'><br>" + mkLL("entityLabelBig", llMaxScore) + "<input type='text' id='score_max_" + e + "' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttMaxScore) + "'><br></span>"), generateSummon()
}

function getSlotItem() {
    return slot = $("#slotType option:selected").val(), "." == slot.substr(slot.length - 1) && (slot += $("#slotNumberSelector option:selected").val()), slot
}

function loadReplaceItemForm(e) {
    $("#" + e).html("<span class='leftPan'>" + mkLL("entityLabelBig", llSlot) + slotSelector() + "</span>"), $("#" + e).append("<br><span id='slotNumber'>" + makeSlotNumberSelector() + restriction() + "</span>")
}

function makeSlotNumberSelector() {
    if (slot = $("#slotType option:selected").val(), "." != slot.substr(slot.length - 1)) return "";
    for (i = 0; i < slots.length; i++)
        if (slots[i][0] == slot) {
            for (min = slots[i][2], max = slots[i][3], sns = mkLL("entityLabelBig", llSlotNo) + "<select id='slotNumberSelector' onChange='generateSummon()'" + mkTT(ttSlotNoEntity) + ">", j = min; j <= max; j++) sns += "<option value='" + j + "'>" + j + "</option>";
            return sns += "</select>", sns
        }
}

function restriction() {
    for (slot = $("#slotType option:selected").val(), i = 0; i < slots.length; i++)
        if (slots[i][0] == slot) return restrictionPart1 + restrictions[slots[i][1]] + restrictionPart2;
    return ""
}

function updateSlotNumber() {
    $("#slotNumber").html(makeSlotNumberSelector() + restriction()), generateSummon()
}

function slotSelector() {
    for (str = "<select id='slotType' onChange='updateSlotNumber()'" + mkTT(ttSpecifySlot) + ">", i = 0; i < slots.length; i++) str += "<option value='" + slots[i][0] + "'>" + slots[i][0] + "</option>";
    return str += "</select>", str
}

function showTwitterWidget() {
    $("#twitterWidget").html("<a class='twitter-timeline'  href='https://twitter.com/PyroStunts' data-widget-id='385333800340688896'>Tweets by @PyroStunts</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document,'script','twitter-wjs');<\/script>")
}

function getCookie(e) {
    for (var t = e + "=", a = document.cookie.split(";"), n = 0; n < a.length; n++) {
        for (var o = a[n];
            " " == o.charAt(0);) o = o.substring(1);
        if (0 == o.indexOf(t)) return o.substring(t.length, o.length)
    }
    return ""
}

function loadManagement() {
    userToken = getCookie("userToken"), loadNavPane();
    var e = window.location.hash;
    "#" == e.charAt(0) ? $.isNumeric(e.substr(2)) ? showDetails(e.substr(2)) : "#!Help" == e ? showHelp() : "#!News" == e ? showNews() : showHome() : showReboot()
}

function hashpword(e) {
    return tmp = MD5(e + "This is the client side salt. There is more robust seasoning at the server side"), tmp
}

function showNews() {
    $("#manPane").html("<span id='leftNews'></span><span id='rightNews'></span>"), $("#rightNews").load("changelog.html"), $("#leftNews").load(ppNews)
}

function loadNavPane() {
    $("#navPane").html(makeNavButton(llHome, "showHome()", ttHome) + makeNavButton("The NEW MCStacker", "showReboot()", "MCStacker is getting a reboot. Find out more.") + makeNavButton(llHelp, "showHelp()", ttHelp) + makeNavButton(llNews, "showNews()", ttNews) + makeNavButton(llSearchBrowse, "showSearch()", ttSearchBrowse)), $.post("mcstacker.php", {
        op: "isSignedIn",
        userToken: userToken
    }, function(e, t) {
        "signedIn" == $(e).find("action").text() ? ($("#navPane").append(makeNavButton(llMyCommands, "showAccount('title', 'a', 0)", ttMyCommands) + makeNavButton(llLikes, "showMyLikes('title','a',0)", ttLikes) + makeNavButton(llDiscuss, "showDiscussions('title','a',0)", ttDiscuss) + makeNavButton(llAccountSettings, "showAccountSettings()", ttAccountSettings) + makeNavButton(llSignOut, "signOut()", llSignOut) + "<span class='fRight'>" + $(e).find("username").text() + "</span>"), signedIn = !0) : ($("#navPane").append(makeNavButton(llSignIn, "displayLogin('" + eeNotSignedIn + "')", llSignIn)), signedIn = !1)
    })
}

function showDiscussions(e, t, a) {
    $("#manPane").html("<div id='searchResults'></div><div id='detailsPane'></div>"), gRowIndex = a, $.post("mcstacker.php", {
        op: "searchCommands",
        searchWhat: "unread",
        commandTypeSearch: "0",
        searchString: "",
        userToken: userToken,
        sortField: e,
        sortOrder: t,
        rowIndex: a
    }, function(e, t) {
        "searchResult" == $(e).find("action").text() ? showSearchResult(e, a, "unread") : "searchFailed" == $(e).find("action").text() && $("#searchResults").html($(e).find("message").text())
    })
}

function showMyLikes(e, t, a) {
    $("#manPane").html("<div id='searchResults'></div><div id='detailsPane'></div>"), gRowIndex = a, $.post("mcstacker.php", {
        op: "searchCommands",
        userToken: userToken,
        searchWhat: "likes",
        commandTypeSearch: "0",
        searchString: "",
        sortField: e,
        sortOrder: t,
        rowIndex: a
    }, function(e, t) {
        "searchResult" == $(e).find("action").text() ? showSearchResult(e, a, "likes") : "searchFailed" == $(e).find("action").text() && $("#searchResults").html($(e).find("message").text())
    })
}

function showHome() {
    $("#manPane").load(ppAbout)
}

function showReboot() {
    $("#manPane").load("mcstackerreboot.html")
}

function showHelp() {
    $("#manPane").load(ppHelp)
}

function makeNavButton(e, t, a) {
    return '<a href="javascript:' + t + "\" class='navButton' " + mkTT(a) + ">" + e + "</a>"
}

function makeButton(e, t, a) {
    return '<a href="javascript:' + t + "\" class='mButton' " + mkTT(a) + ">" + e + "</a>"
}

function makePageButton(e, t, a) {
    return '<a href="javascript:' + t + "\" class='" + a + "'>" + e + "</a>"
}

function makeButtonR(e, t, a) {
    return '<a href="javascript:' + t + "\" class='mButton fRight' " + mkTT(a) + ">" + e + "</a>"
}

function doSignIn() {
    hashedpword = hashpword($("#password").val()), $.post("mcstacker.php", {
        op: "doSignIn",
        hashedpword: hashedpword,
        username: $("#username").val()
    }, function(e, t) {
        userToken = $(e).find("userToken").text(), message = $(e).find("message").text(), "showCommands" == $(e).find("action").text() ? (showCommands(e, 0), loadNavPane()) : "signInFailed" == $(e).find("action").text() && ($("#message").html(message), alertify.error(message))
    })
}

function showSearch() {
    $("#manPane").html("<h2 class='command'>" + llSearchBrowse + "</h2><label labelfor='commandTypeSearch' class='search'>" + llCommandType + "</label><select id='commandTypeSearch'" + mkTT(ttCommandTypeSearch) + "><option value='0'>" + llAny + "</option><option value='1'>Summon</option><option value='2'>Spawner</option><option value='3'>Give</option><option value='4'>ReplaceItem Entity</option><option value='5'>ReplaceItem Block</option><option value='6'>Set Block</option><option value='7'>Fill</option><option value='8'>Block Data</option><option value='9'>" + llAnyCommand + "</option></select><label labelfor='searchWhat' class='search'>" + llSearchBy + "</label><select id='searchWhat'" + mkTT(ttSearchBy) + "><option value='0'>" + llTitleDescCreator + "</option><option value='1'>" + llTitle + "</option><option value='2'>" + llDescription + "</option><option value='4'>" + llCreator + "</option><option value='3'>" + llTag + "</option><option value='5'>" + llDerivativesByID + "</option><option value='6'>" + llComments + "</option></select><label labelfor='searchString' class='search'>" + llSearchText + "</label><input type='text' id='searchString'" + mkTT(ttSearchText) + ">" + makeButton(llSearchBrowse, "onClick=doSearch('title', 'a', 0)", ttSearchBrowse) + "<div id='searchResults'></div>"), doSearch("date_modified", "d", 0)
}

function searchUsers(e) {
    $("#commandTypeSearch").val(0), $("#searchWhat").val(4), $("#searchString").val(e), doSearch("title", "a", 0)
}

function searchTag(e) {
    showSearch(), $("#commandTypeSearch").val(0), $("#searchWhat").val(3), $("#searchString").val(e), doSearch("title", "a", 0)
}

function searchUsersFromName(e) {
    showSearch(), searchUsers(e)
}

function doSearch(e, t, a) {
    sortOrder = t, sortField = e, $.post("mcstacker.php", {
        op: "searchCommands",
        searchWhat: $("#searchWhat").val(),
        commandTypeSearch: $("#commandTypeSearch").val(),
        searchString: $("#searchString").val(),
        userToken: userToken,
        sortField: sortField,
        sortOrder: sortOrder,
        rowIndex: a
    }, function(e, t) {
        "searchResult" == $(e).find("action").text() ? showSearchResult(e, a, "search") : "searchFailed" == $(e).find("action").text() && $("#searchResults").html($(e).find("message").text())
    })
}

function showSearchResult(e, t, a) {
    var n = "",
        o = $(e).find("rowCount").text(),
        l = "";
    if (o > 10) {
        for (func = "likes" == a ? "showMyLikes" : "likes" == a ? "showDiscussions" : "doSearch", i = 0; i < o && i < 400; i += 10) t == i ? l += makePageButton(i / 10 + 1, func + "('" + sortField + "', '" + sortOrder + "', " + i + ")", "pageButtonSelected") : l += makePageButton(i / 10 + 1, func + "('" + sortField + "', '" + sortOrder + "', " + i + ")", "pageButton");
        l.length > 0 && (l = "<br>" + l + "<br><br>")
    }
    $("row", e).each(function(e) {
        user = $(this).find("username").text(), cid = $(this).find("cid").text(), rowClass = e % 2 == 0 ? "srRowLight" : "srRowDark", n += "<tr class='" + rowClass + "'><td><a href=\"javascript:showDetails(" + cid + ')">' + $(this).find("title").text() + "</a></td><td>" + $(this).find("description").text() + "</td><td>" + commandTypeFromID($(this).find("commandType").text()) + "</td><td><a href=\"javascript:searchUsers('" + user + "')\">" + user + "</a></td><td>" + convertTime($(this).find("modifiedTime").text()) + "</td></tr>"
    }), n.length > 0 && $("#searchResults").html(l + "<table class='searchResults'><tr><th width=200>" + makeSortCol(llSortColName, "title", a) + "</th><th width='700'>" + makeSortCol(llSortColDescription, "description", a) + "</th><th width=100>" + makeSortCol(llSortColType, "command_type_id", a) + "</th><th width=100>" + makeSortCol(llSortColCreator, "username", a) + "</th><th width=100>" + makeSortCol(llSortColModified, "date_modified", a) + "</th></tr>" + n + "</table><div id='detailsPane'></div>")
}

function showCommands(e, t) {
    var a = "",
        n = $(e).find("rowCount").text(),
        o = "";
    if (n > 10) {
        for (i = 0; i < n && i < 400; i += 10) t == i ? o += makePageButton(i / 10 + 1, "showAccount('" + sortField + "', '" + sortOrder + "', " + i + ")", "pageButtonSelected") : o += makePageButton(i / 10 + 1, "showAccount('" + sortField + "', '" + sortOrder + "', " + i + ")", "pageButton");
        o.length > 0 && (o = "<br>" + o + "<br><br>")
    }
    $("row", e).each(function(e) {
        cid = $(this).find("cid").text(), rowClass = e % 2 == 0 ? "srRowLight" : "srRowDark", a += "<tr class='" + rowClass + "'><td><a href=\"javascript:showDetails(" + cid + ')">' + $(this).find("title").text() + "</a></td><td>" + $(this).find("description").text() + "</td><td>" + commandTypeFromID($(this).find("commandType").text()) + "</td><td>" + tickORCross("public", $(this).find("public").text(), cid) + "</td><td>" + tickORCross("allow_comments", $(this).find("allow_comments").text(), cid) + "</td><td>" + convertTime($(this).find("modifiedTime").text()) + '</td><td><a href="javascript:saveDetailsForm(' + cid + ",1)\"><img src='edit.png'></a></td><td><a href=\"javascript:deleteCommand(" + cid + ")\"><img src='trash.png'></a></td></tr>"
    }), a.length > 0 ? $("#manPane").html(o + "<table class='searchResults'><tr><th width=200>" + makeSortCol(llSortColName, "title", "mine") + "</th><th width='700'>" + makeSortCol(llSortColDescription, "description", "mine") + "</th><th width=100>" + makeSortCol(llSortColType, "command_type_id", "mine") + "</th><th width=100>" + makeSortCol(llSortColPublic, "public", "mine") + "</th><th width=100>" + makeSortCol(llSortColAllowComments, "allow_comments", "mine") + "</th><th width=100> " + makeSortCol(llSortColModified, "date_modified", "mine") + "</th><th colspan=2 width=40></th></tr>" + a + "</table><div id='detailsPane'></div>") : $("#manPane").html("<p class='command'>" + eeNoSavedCommands + "</p>")
}

function tickORCross(e, t, a) {
    return ttid = "public" == e ? ttPrivate : ttDisallowComments, 1 == t ? "<input type='checkbox' id='" + e + a + "' CHECKED onClick='publicClicked(" + a + ")'" + mkTT(ttid) + "'>" : "<input type='checkbox' id='" + e + a + "' onClick='publicClicked(" + a + ")'" + mkTT(ttid) + "'>"
}

function makeSortCol(e, t, a) {
    return t == sortField ? (arrow = "a" == sortOrder ? "<img src='up.png' width=12>" : "<img src='down.png' width=12>", "<a href=\"javascript:sortByField('" + t + "', '" + a + "')\">" + e + " " + arrow + "</a>") : "<a href=\"javascript:sortByField('" + t + "', '" + a + "')\">" + e + " <img src='up.png' width=12></a>"
}

function sortByField(e, t) {
    e == sortField ? sortOrder = "a" == sortOrder ? "d" : "a" : (sortOrder = "a", sortField = e), "search" == t ? doSearch(sortField, sortOrder, 0) : "mine" == t ? showAccount(sortField, sortOrder, 0) : "likes" == t && showMyLikes(sortField, sortOrder, 0)
}

function changePassword() {
    $("#manPane").html("<h2>" + llChangePassword + "</h2><form action='' name='form' onSubmit='event.preventDefault();doPasswordChange()'><label labelfor='oldpassword' class='settingsLabel'>" + llCurrentPassword + "</label><input type='password' id='oldpassword'><br><label labelfor='newpassword' class='settingsLabel'>" + llNewPassword + "</label><input type='password' id='newpassword'" + mkTT(ttNewPassword) + "><br><label labelfor='newpasswordconfirm' class='settingsLabel'>" + llConfirmNewPassword + "</label><input type='password' id='newpasswordconfirm'" + mkTT(ttNewPassword) + "><input type='submit' value='" + llChangePassword + "'></form><div id='message'></div>")
}

function doPasswordChange() {
    /^[A-Za-z0-9_-]{6,64}$/.test($("#newpassword").val()) ? $("#newpasswordconfirm").val() != $("#newpassword").val() ? $("#message").html(eePasswordMismatch) : (hashednewpword = hashpword($("#newpassword").val()), hashedoldpword = hashpword($("#oldpassword").val()), $.post("mcstacker.php", {
        op: "changePassword",
        userToken: userToken,
        hashednewpword: hashednewpword,
        hashedoldpword: hashedoldpword
    }, function(e, t) {
        "showAccount" == $(e).find("action").text() ? (alertify.log($(e).find("message").text()), showAccountDetails(e)) : "changePasswordFailed" == $(e).find("action").text() && $("#message").html($(e).find("message").text())
    })) : $("#message").html(ttNewPassword)
}

function updateEmail() {
    $("#manPane").html("<h2>" + llUpdateEmail + "</h2><form action='' name='form' onSubmit='event.preventDefault();doEmailChange()'><label labelfor='oldpassword' class='settingsLabel' class='settings'>" + llNewEmailAddress + "</label><input type='text' id='email'" + mkTT(ttNewEmailAddress) + "><input type='submit' value='" + llUpdateEmail + "'><div id='message'></div>")
}

function doEmailChange() {
    $.post("mcstacker.php", {
        op: "changeEmail",
        userToken: userToken,
        email: $("#email").val()
    }, function(e, t) {
        "showAccount" == $(e).find("action").text() ? (alertify.log($(e).find("message").text()), showAccountDetails(e)) : "changeEmailFailed" == $(e).find("action").text() && $("#message").html($(e).find("message").text())
    })
}

function showAccountDetails(e) {
    $("#manPane").html("<br>" + makeButton(llSignOut, "signOut()", llSignOut) + makeButton(llChangePassword, "changePassword()", ttChangePassword) + makeButton(llUpdateEmail, "updateEmail()", ttUpdateEmail) + "<br><br>"), $("#message").html($(e).find("message").text())
}

function showAccount(e, t, a) {
    gRowIndex = a, $.post("mcstacker.php", {
        op: "showMyCommands",
        userToken: userToken,
        sortField: e,
        sortOrder: t,
        rowIndex: a
    }, function(e, t) {
        message = $(e).find("message").text(), "showLogin" == $(e).find("action").text() ? displayLogin(message) : "showCommands" == $(e).find("action").text() && showCommands(e, a)
    })
}

function commandTypeFromID(e) {
    return "1" == e ? "summon" : "2" == e ? "spawner" : "3" == e ? "give" : "4" == e ? "replaceitem entity" : "5" == e ? "replaceitem block" : "6" == e ? "setblock" : "7" == e ? "fill" : "8" == e ? "blockdata" : "9" == e ? "any command" : ""
}

function showAccountSettings() {
    $.post("mcstacker.php", {
        op: "showAccount",
        userToken: userToken
    }, function(e, t) {
        message = $(e).find("message").text(), "showLogin" == $(e).find("action").text() ? displayLogin(message) : "showAccount" == $(e).find("action").text() && showAccountDetails(e)
    })
}

function signOut() {
    $.post("mcstacker.php", {
        op: "signOut",
        userToken: userToken
    }, function(e, t) {
        loadNavPane(), displayLogin($(e).find("message").text())
    })
}

function displayLogin(e) {
    $("#manPane").html("<h2>" + llSignIn + "</h2><p class='settings'>" + e + "</p><form action='' name='form' onSubmit='event.preventDefault();doSignIn()'><label labelfor='username' class='settingsLabel'>" + llUsername + "</label><input type='text' id='username'><br><label labelfor='password' class='settingsLabel'>" + llPassword + "</label><input type='password' id='password'><input type='submit' value='" + llSignIn + "'></form><p class='settings'>" + makeButton(llRegister, "displayRegistration()", ttRegister) + makeButton(llForgotPassword, "forgotPassword()", ttForgotPassword) + "</p><div id='message'></div>")
}

function displayRegistration() {
    $("#manPane").html("<span><h2>" + llRegister + "</h2><form action='' name='form' onSubmit='event.preventDefault();doRegistration()'><label labelfor='username' class='settingsLabel'>" + llUsername + "</label><input type='text' id='username'" + mkTT(ttNewUsername) + "><br><label labelfor='password' class='settingsLabel'>" + llPassword + "</label><input type='password' id='password'" + mkTT(ttNewPassword) + "><br><label labelfor='passwordconfirm' class='settingsLabel'>" + llConfirmPassword + "</label><input type='password' id='passwordconfirm'" + mkTT(ttNewPassword) + "><br><label labelfor='email' class='settingsLabel'>" + llEmail + "</label><input type='text' id='email'" + mkTT(ttNewEmailAddress) + "><input type='submit' value='" + llRegister + "'></form><div id='message'></div></span><span id='terms'></span>"), $("#terms").load(ppTerms)
}

function forgotPassword() {
    $("#manPane").html("<h2>" + llPasswordReset + "</h2><form action='' name='form' onSubmit='event.preventDefault();doPasswordReset()'><p class='command'>" + llEnterEmail + "</p><label labelfor='email' class='settingsLabel'>" + llEmail + "</label><input type='text' id='email'" + mkTT(llEnterEmail) + "><input type='submit' value='" + llPasswordReset + "'></form><div id='message'></div>")
}

function doPasswordReset() {
    $.post("mcstacker.php", {
        op: "passwordReset",
        email: $("#email").val()
    }, function(e, t) {
        "passwordResetInvalidEmail" == $(e).find("action").text() ? ($("#message").html($(e).find("message").text()), alertify.error($(e).find("message").text())) : "showLogin" == $(e).find("action").text() && (displayLogin($(e).find("message").text()), alertify.log($(e).find("message").text()))
    })
}

function doRegistration() {
    $("#passwordconfirm").val() != $("#password").val() ? $("#message").html(eePasswordMismatch) : /^[A-Za-z0-9_-]{6,64}$/.test($("#password").val()) ? (hashedpword = hashpword($("#password").val()), $.post("mcstacker.php", {
        op: "doRegistration",
        hashedpword: hashedpword,
        username: $("#username").val(),
        email: $("#email").val()
    }, function(e, t) {
        "regSuccess" == $(e).find("action").text() ? (displayLogin($(e).find("message").text()), alertify.log($(e).find("message").text())) : "regFailed" == $(e).find("action").text() && $("#message").html($(e).find("message").text())
    })) : $("#message").html(ttNewPassword)
}

function makeTextArea(e, t, a, n) {
    return "<textarea rows=10 cols=95 id='" + e + "' onkeyup=\"updateCharsLeft('" + e + "', " + a + ')"' + mkTT(n) + ">" + t + "</textarea><br>  " + llMarkdown + ": [link]URL[title]URL " + llTitle + "[/title][/link], [b]<b>" + llBold + "</b>[/b], [i]<i>" + llItalic + "</i>[/i], [u]<u>" + llUnderlined + "</u>[/u],  <span id='" + e + "_charsLeft' class='charsLeft'>" + (a - t.length) + " " + llCharactersRemaining + "</span> "
}

function updateCharsLeft(e, t) {
    left = t - $("#" + e).val().length, left < 0 ? ($("#" + e).val($("#" + e).val().substr(0, t)), $("#" + e + "_charsLeft").html("0 " + llCharactersRemaining)) : $("#" + e + "_charsLeft").html(left + " " + llCharactersRemaining)
}

function makeDetailsForm(e, t) {
    $("#manPane").html("<div id='detailsPane'></div>"), $("#detailsPane").html("<label labelfor='commandTitle' class='details'>" + llTitle + "</label><input type='text' id='commandTitle' class='inputVeryBig' value='" + $(e).find("commandTitle").text() + "' onkeyup=\"updateCharsLeft('commandTitle', 64)\"" + mkTT(ttCommandTitle) + "> <span id='commandTitle_charsLeft'>" + (64 - $(e).find("commandTitle").text().length) + " " + llCharactersRemaining + "</span><br><label labelfor='commandDescription' class='details'>" + llDescription + "</label>" + makeTextArea("commandDescription", $(e).find("commandDescription").text(), 5e3, ttCommandDescription) + "<br><input type='checkbox' id='public' onClick=\"publicClicked('')\" CHECKED" + mkTT(ttPrivate) + "><label labelfor='public' class='details'>" + llPublic + "</label><br><input type='checkbox' id='allow_comments' onClick=\"publicClicked('')\" CHECKED" + mkTT(ttDisallowComments) + "><label labelfor='allow_comments' class='details'>" + llAllowComments + "</label><br><label labelfor='tagEntry' class='details'>" + llTags + "</label><input type='text' onkeyup='processTagAdd()' id='tagEntry'" + mkTT(ttTags) + "> <span id='tagWords'></span>"), "0" == $(e).find("public").text() && $("#public").click(), "0" == $(e).find("allow_comments").text() && $("#allow_comments").click(), $("word", e).each(function(e) {
        $("#tagEntry").val($(this).text() + ","), processTagAdd()
    }), $("#detailsPane").append("<br><br>" + makeButton(llSave, "saveCommand(" + t + ")", ttSave) + makeButton(llCancel, "showDetails(" + t + ")", ttCancel) + "<br><br>")
}

function publicClicked(e) {
    $("#public" + e).is(":checked") ? ($("#allow_comments" + e).prop("disabled", !1), public_ = 1) : ($("#allow_comments" + e).prop("disabled", !0), $("#allow_comments" + e).prop("checked", !1), public_ = 0), $("#allow_comments" + e).is(":checked") ? ac_ = 1 : ac_ = 0, "" != e && $.post("mcstacker.php", {
        op: "changePrivacy",
        userToken: userToken,
        commandID: e,
        public_: public_,
        allow_comments: ac_
    }, function(e, t) {})
}

function processTagAdd() {
    if (counter = 0, str = $("#tagEntry").val(), "," == str.substr(str.length - 1)) {
        if (word = str.substr(0, str.length - 1).trim(), word.length > 0) {
            for (id = 0; $("#tw" + id).length;) id++, counter++;
            if (!(counter < 10)) return void $("#tagEntry").val(llTagLimitExceeded);
            $("#tagWords").append("<span id='tw" + id + "' class='tagWord'>" + makeButton(word, "delTagWord(" + id + ")", ttRemoveThisTag) + "</span>")
        }
        $("#tagEntry").val("")
    }
}

function makeTagsCSV() {
    var e = "";
    return $("#tagWords > .tagWord").each(function() {
        tmp = $("#" + this.id).html(), tmp = tmp.substr(tmp.lastIndexOf('">') + 2), tmp = tmp.substr(0, tmp.lastIndexOf("<")), e += tmp + ","
    }), e
}

function delTagWord(e) {
    $("#tw" + e).remove()
}

function getCommandTypeID() {
    return "Summon" == $("#commandType").val() ? 1 : "Spawner" == $("#commandType").val() ? 2 : "Give" == $("#commandType").val() ? 3 : "ReplaceItemEntity" == $("#commandType").val() ? 4 : "ReplaceItemBlock" == $("#commandType").val() ? 5 : "SetBlock" == $("#commandType").val() ? 6 : "Fill" == $("#commandType").val() ? 7 : "BlockData" == $("#commandType").val() ? 8 : "AnyCommand" == $("#commandType").val() ? 9 : 0
}

function cloneCommand(e) {
    $.post("mcstacker.php", {
        op: "cloneCommand",
        userToken: userToken,
        commandID: e
    }, function(t, a) {
        "getCommandDetailsSuccess" == $(t).find("action").text() && (showDetailsReadOnly("detailsPane", t, e = $(t).find("cid").text(), !0, !0), alertify.alert(eeCloneResponse))
    })
}

function saveCommand(e) {
    public_ = $("#public").is(":checked") ? "1" : "0", allow_comments = $("#allow_comments").is(":checked") ? "1" : "0", $("#commandTitle").val().length > 0 && $("#commandDescription").val().length > 0 ? $.post("mcstacker.php", {
        op: "saveCommand",
        userToken: userToken,
        commandID: e,
        commandType: getCommandTypeID(),
        commandTitle: $("#commandTitle").val(),
        commandDescription: $("#commandDescription").val(),
        public_: public_,
        allow_comments: allow_comments,
        tags: makeTagsCSV(),
        xml: generateXML()
    }, function(e, t) {
        "saveCommandSuccess" == $(e).find("action").text() && (commandID = $(e).find("cid").text(), showDetails(commandID))
    }) : alertify.alert(eeMissingDetails)
}

function showDetailsReadOnly(e, t, a, n, o) {
    $("#" + e).html("<h2 class='command'>" + $(t).find("commandTitle").text() + "</h2><p class='command'>" + markUp($(t).find("commandDescription").text()) + "</p>"), document.title = "MCStacker: " + $(t).find("commandTitle").text(), window.history.pushState({
        id: a
    }, "MCStacker: " + $(t).find("commandTitle").text(), "#!" + a), tagHTML = "", "1" == $(t).find("admin").text() && (o = !0), ce = o ? 1 : 0, $("word", t).each(function(e) {
        tagHTML += makeButton($(this).text(), "searchTag('" + $(this).text() + "')", ttSearchByTag)
    }), tagHTML.length > 0 && $("#" + e).append("<p class='command'>" + llTags + ": " + tagHTML + "</p>"), $(t).find("UID").text() != $(t).find("ownerUID").text() && $("#" + e).append("<p class='command'>" + llCreatedBy + " <a href=\"javascript:searchUsersFromName('" + $(t).find("ownerName").text() + "')\">" + $(t).find("ownerName").text() + "</a></p>"), 0 != $(t).find("derivative").text() && $(t).find("derivativeTitle").length && $("#" + e).append("<p class='command'>" + llDerivedFrom + " <a href=\"javascript:showDetails('" + $(t).find("derivative").text() + "')\">" + $(t).find("derivativeTitle").text() + "</a> " + llBy + " <a href=\"javascript:searchUsersFromName('" + $(t).find("derivativeUser").text() + "')\">" + $(t).find("derivativeUser").text() + "</a></p>"), $("#" + e).append("<p class='command'>" + makeShareLink(a) + "</p>"), likesStr = "", 1 == $(t).find("likes").text() ? likesStr = "1 " + llLike : $(t).find("likes").text() > 1 && (likesStr = $(t).find("likes").text() + " " + llLikes), 1 == $(t).find("commentCount").text() ? (likesStr.length > 0 && (likesStr += ", "), likesStr += "1 <a href='javascript:getComments(" + a + "," + enableCommentOptions(n, $(t).find("allow_comments").text(), o) + "," + ce + ")'>" + llComment + "</a>") : $(t).find("commentCount").text() > 1 && (likesStr.length > 0 && (likesStr += ", "), likesStr += $(t).find("commentCount").text() + " <a href='javascript:getComments(" + a + "," + enableCommentOptions(n, $(t).find("allow_comments").text(), o) + "," + ce + ")'>" + llComments + "</a>"), likesStr.length > 0 && $("#" + e).append("<p class='command'>" + likesStr + "</p>"), (1 == $(t).find("allow_comments").text() || $(t).find("commentCount").text() > 0 || o) && ($("#" + e).append("<div id='comments'></div><div id='commentControls'></div>" + makeButtonR(llComments, "getComments(" + a + "," + enableCommentOptions(n, $(t).find("allow_comments").text(), o) + "," + ce + ")", ttComments)), $("#comments").hide("")), n && ($("#" + e).append(makeButtonR(llCloneCommand, "cloneCommand(" + a + ")", ttCloneCommand)), 0 == $(t).find("youLike").text() ? $("#" + e).append(makeButtonR(llLike, "likeCommand(" + a + ",1," + ce + ")", ttLikeUnlike)) : $("#" + e).append(makeButtonR(llUnlike, "likeCommand(" + a + ",0," + ce + ")", ttLikeUnlike))), o && ($("#" + e).append(makeButtonR(llEdit, "saveDetailsForm(" + a + ",0)", ttEdit) + makeButtonR(llDelete, "deleteCommand(" + a + ")", ttDelete)), 0 != $(t).find("derivative").text() && $("#" + e).append(makeButtonR(llClearDerivativeParent, "clearDerivative(" + a + ",'p')", ttClearDerivativeParent)), $(t).find("derivativeChildren").text() > 0 && $("#" + e).append(makeButtonR(llClearDerivativeChildren, "clearDerivative(" + a + ",'c')", ttClearDerivativeChildren))), $(t).find("derivativeChildren").text() > 0 && $("#" + e).append(makeButtonR(llSearchDerivatives, "searchDerivatives(" + a + ")", ttSearchDerivatives)), "0" == $(t).find("copied").text() ? o && $("#" + e).append("<div id='copy2MCStackerNet'><a class='copy2MCStackerNet' href='javascript:copyToMCStackerNet(" + a + ")'>Fork to mcstacker.net</a><div>") : $("#" + e).append("<div id='copy2MCStackerNet'><a class='copy2MCStackerNet' href='https://mcstacker.net/#!" + $(t).find("copied").text() + "' target=_blank>View at mcstacker.net</a><div>")
}

function copyToMCStackerNet(e) {
    generateSummon(), $.post("mcstacker.php", {
        op: "copyToMCStackerNet",
        commandID: e,
        commandString: $("#summonCommand").val()
    }, function(e, t) {
        if ("copySuccess" == $(e).find("action").text()) {
            var a = $(e).find("newcid").text();
            $("#copy2MCStackerNet").html("<a class='copy2MCStackerNet' href='https://mcstacker.net/#!" + a + "' target=_blank>View at mcstacker.net</a>")
        } else $("#copy2MCStackerNet").remove()
    })
}

function enableCommentOptions(e, t, a) {
    return a || e && 1 == t ? 1 : 0
}

function getComments(e, t, a) {
    $.post("mcstacker.php", {
        op: "getComments",
        userToken: userToken,
        commandID: e
    }, function(n, o) {
        $("#comments").html(""), $("#comments").show(""), $("comment", n).each(function(e) {
            commentID = $(this).find("commentID").text(), name = "<a href=\"javascript:searchUsers('" + $(this).find("username").text() + "')\">" + $(this).find("username").text() + "</a>", commentText = markUp($(this).find("commentText").text()), time = convertTime($(this).find("time").text()), "1" == $(this).find("canDelete").text() ? admin = '<br><a href="javascript:deleteComment(' + commentID + "," + commentID + ')"' + mkTT(ttDeleteComment) + "><img src='trash.png'></a>" : admin = "", $("#comments").append("<div id='comment" + commentID + "' class='commentLine'><span class='commentDetails'>" + name + "<br>" + time + admin + "</span><span class='commentText'>" + commentText + "</span></div>")
        }), $("#commentControls").html(makeButton(llHideComments, "hideComments()", ttHideComments)), 1 == t && $("#commentControls").append(makeButton(llPostComment, "makeCommentBox(" + e + ")", ttPostComment)), 1 == a && $("#commentControls").append(makeButton(llDeleteAllComments, "deleteAllComments(" + e + ")", ttDeleteAllComments)), $("#commentControls").show()
    })
}

function deleteComment(e, t) {
    alertify.confirm("Are you sure you want to delete this comment? This action can not be undone.", function(a) {
        a && $.post("mcstacker.php", {
            op: "deleteComment",
            userToken: userToken,
            commandID: e,
            commentID: t
        }, function(e, a) {
            $("#comment" + t).remove(), alertify.log("Comment Removed")
        })
    })
}

function deleteAllComments(e) {
    alertify.confirm(eeDeleteAllComments, function(t) {
        t && $.post("mcstacker.php", {
            op: "deleteAllComments",
            userToken: userToken,
            commandID: e
        }, function(e, t) {
            $("#comments").hide(), $("#comments").html(""), alertify.log(eeDeleteAllCommentsResponse)
        })
    })
}

function makeCommentBox(e) {
    $("#commentPane").remove(), $("#commentControls").append("<div id='commentPane'></div>"), $("#commentControls").show(), $("#commentPane").append("<br>" + makeTextArea("newComment", "", 2500, ttCommentBox) + "<br>" + makeButton(llPostComment, "postComment(" + e + ")", ttPostThisComment))
}

function hideComments() {
    $("#comments").hide(), $("#commentControls").hide()
}

function postComment(e) {
    $.post("mcstacker.php", {
        op: "postComment",
        userToken: userToken,
        commandID: e,
        commentText: $("#newComment").val()
    }, function(t, a) {
        $("comment", t).each(function(t) {
            commentID = $(this).find("commentID").text(), name = "<a href=\"javascript:searchUsers('" + $(this).find("username").text() + "')\">" + $(this).find("username").text() + "</a>", commentText = markUp($(this).find("commentText").text()), time = convertTime($(this).find("time").text()), $("#comments").append("<div id='comment" + commentID + "' class='commentLine'><span class='commentDetails'>" + name + "<br>" + time + '<br><a href="javascript:deleteComment(' + e + "," + commentID + ')"' + mkTT(ttDeleteComment) + "><img src='trash.png'></a></span><span class='commentText'>" + commentText + "</span></div>"), $("#commentPane").remove(), $("#comments").show(), $("#comments").animate({
                scrollTop: $("#comments")[0].scrollHeight - $("#comments").height()
            }, 1e3, function() {})
        })
    })
}

function convertTime(e) {
    var t = parse_date(e),
        a = new Date,
        n = -1 * a.getTimezoneOffset(),
        o = new Date(t.getTime() + 60 * n * 1e3),
        i = o.getDate(),
        l = o.getMonth(),
        r = o.getFullYear(),
        c = o.getHours(),
        m = o.getMinutes();
    return a - o > 31536e6 ? monthNames[l] + " " + r : a - o > 864e5 ? monthNames[l] + " " + i : (c < 12 ? (s = "am", 0 == c && (c = 12)) : (c > 12 && (c -= 12), s = "pm"), m < 10 && (m = "0" + m), c + ":" + m + " " + s)
}

function parse_date(e) {
    var t = new Date,
        a = String(e).split(/[- :]/);
    return t.setFullYear(a[0]), t.setMonth(a[1] - 1), t.setDate(a[2]), t.setHours(a[3]), t.setMinutes(a[4]), t.setSeconds(a[5]), t.setMilliseconds(0), t
}

function makeShareLink(e) {
    return -1 != document.URL.indexOf("#") ? (baseURL = document.URL.substr(0, document.URL.indexOf("#")), url = baseURL + "#!" + e) : url = document.URL + "#!" + e, llShareLink + ":<a href='" + url + "'>" + url + "</a>"
}

function likeCommand(e, t, a) {
    $.post("mcstacker.php", {
        op: "like",
        userToken: userToken,
        commandID: e,
        like: t
    }, function(t, n) {
        "getCommandDetailsSuccess" == $(t).find("action").text() && showDetailsReadOnly("detailsPane", t, e, !0, 1 == a)
    })
}

function searchDerivatives(e) {
    showSearch(), $("#commandTypeSearch").val(0), $("#searchWhat").val(5), $("#searchString").val(e), doSearch("title", "a", 0)
}

function clearDerivative(e, t) {
    $.post("mcstacker.php", {
        op: "clearDerivative",
        userToken: userToken,
        commandID: e,
        type: t
    }, function(t, a) {
        "getCommandDetailsSuccess" == $(t).find("action").text() && showDetailsReadOnly("detailsPane", t, e, !0, !0)
    })
}

function deleteCommand(e) {
    alertify.confirm(eeConfirmDelete, function(t) {
        t && $.post("mcstacker.php", {
            op: "deleteCommand",
            userToken: userToken,
            commandID: e,
            sortField: sortField,
            sortOrder: sortOrder,
            rowIndex: gRowIndex
        }, function(e, t) {
            showCommands(e, gRowIndex)
        })
    })
}

function replaceAll(e, t, a) {
    return a.replace(new RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), t)
}

function markUp(e) {
    return e = replaceAll("[u]", "<u>", e), e = replaceAll("[b]", "<b>", e), e = replaceAll("[i]", "<i>", e), e = replaceAll("[/u]", "</u>", e), e = replaceAll("[/b]", "</b>", e), e = replaceAll("[/i]", "</i>", e), e = replaceAll("[link]", "<a target='_blank' href='", e), e = replaceAll("[/link]", "</a>", e), e = replaceAll("[title]", "'>", e), e = replaceAll("[/title]", "", e), e = replaceAll("\n", "<br>", e)
}

function saveDetailsForm(e, t) {
    -1 != e ? $.post("mcstacker.php", {
        op: "getCommandDetails",
        userToken: userToken,
        commandID: e
    }, function(a, n) {
        makeDetailsForm(a, e), 1 == t && loadXML(a)
    }) : signedIn ? makeDetailsForm("", -1) : (displayLogin(eeSignInRequired), alertify.error(eeSignInRequired))
}

function showDetails(e) {
    -1 != e ? $.post("mcstacker.php", {
        op: "getCommandDetails",
        userToken: userToken,
        commandID: e
    }, function(t, a) {
        "getCommandDetailsSuccess" == $(t).find("action").text() && (signedIn ? $(t).find("UID").text() == $(t).find("ownerUID").text() ? showDetailsReadOnly("detailsPane", t, e, !0, !0) : showDetailsReadOnly("detailsPane", t, e, !0, !1) : showDetailsReadOnly("detailsPane", t, e, !1, !1)), loadXML(t)
    }) : signedIn ? makeDetailsForm("", !0) : displayLogin(eeSignInRequired)
}

function loadXML(e) {
    $("mode", e).each(function(t) {
        setSelect(this, "commandType", "#commandType", !0), "Summon" == $("#commandType").val() ? populateMainForm(e) : "Spawner" == $("#commandType").val() ? populateSpawnerForm(e) : "Give" == $("#commandType").val() ? populateGiveForm(e) : "ReplaceItemEntity" == $("#commandType").val() ? populateReplaceItemForm(e) : "ReplaceItemBlock" == $("#commandType").val() || "SetBlock" == $("#commandType").val() || "Fill" == $("#commandType").val() || "BlockData" == $("#commandType").val() ? populateBlockCommandForm(e, $("#commandType").val()) : "AnyCommand" == $("#commandType").val() && setTextOld(e, "anyCommand", "#anyCommand")
    }), generateSummon()
}

function populateGiveForm(e) {
    setCheckbox(e, "modeEnchantAll", "#modeEnchantAll"), setTargetSelectorXML(e), setEquipmentXMLForPart(e, 0, "Item")
}

function populateReplaceItemForm(e) {
    setCheckbox(e, "modeEnchantAll", "#modeEnchantAll"), $("#slotType").val($(e).find("slotType").text()), $("#slotType").change(), $("#slotNumberSelector").val($(e).find("slotNumberSelector").text()), setTargetSelectorXML(e), setEquipmentXMLForPart(e, 0, "Item")
}

function populateSpawnerForm(e) {
    populateMainForm(e), setText(e, "SpawnCount", "#SpawnCount"), setText(e, "SpawnRange", "#SpawnRange"), setText(e, "RequiredPlayerRange", "#RequiredPlayerRange"), setText(e, "Delay", "#Delay"), setText(e, "MinSpawnDelay", "#MinSpawnDelay"), setText(e, "MaxSpawnDelay", "#MaxSpawnDelay"), setText(e, "MaxNearbyEntities", "#MaxNearbyEntities"), setText(e, "spawnXpos", "#spawnXpos"), setText(e, "spawnYpos", "#spawnYpos"), setText(e, "spawnZpos", "#spawnZpos")
}

function populateMainForm(e) {
    $(".EntityOptions").remove(), entityIndex = 0, setText(e, "xpos", "#xpos"), setText(e, "ypos", "#ypos"), setText(e, "zpos", "#zpos"), setCheckbox(e, "relative", "#relative"), setCheckbox(e, "modeEnchantAll", "#modeEnchantAll"), $("entity", e).each(function(e) {
        createEntityListFromXML(), $("#entityList_" + entityIndex).val(get_1p11_name_from_1p10($(this).find("entityType").text())), $("#entityList_" + entityIndex).change(), loadEntitySpecificXML(this, entityIndex), entityIndex++
    }), showHideMovmentButtons()
}

function get_1p11_name_from_1p10(e) {
    for (var t = 0; t < entities.length; t++)
        if (e == entities[t][0] || e == entities[t][1]) return entities[t][1];
    return e
}

function setActiveEffectsXML(e, t) {
    if ($(e).find("ActiveEffects").length) {
        var a = $(e).parent().get(0).tagName.toUpperCase();
        $(t + "_enableStatusEffect").click(), $("ActiveEffects", e).each(function(e) {
            ("SLOT" == a || "ENTITY" == a || "EQUIPMENT" == a || "TRADE" == a || "MODE" == a && "ENTITY" == $(this).parent().get(0).tagName.toUpperCase() || "MODE" == a && "ITEM" == $(this).parent().get(0).tagName.toUpperCase()) && $("effect", this).each(function(e) {
                pid = $(this).find("effectid").text(), $(t + "_effect_" + pid).click(), setText(this, "Amplifier", t + "_" + pid + "_amp"), setText(this, "Duration", t + "_" + pid + "_dur"), setCheckbox(this, "Hide", t + "_" + pid + "_hideParticle", !1)
            })
        })
    }
}

function loadEntitySpecificXML(e, t) {
    var a = $("#entityList_" + t + " option:selected").text();
    setText(e, "CustomName", "#entityCustomName_" + t), setText(e, "StackID", "#StackID_" + t), setText(e, "RidingStackID", "#RidingStackID_" + t), setText(e, "StackID", "#StackID_" + t), setText(e, "Tags", "#Tags_" + t), setCheckbox(e, "NoGravity", "#NoGravity_" + t), setCheckbox(e, "HideCustomName", "#hideCustomName_" + t), setText(e, "EntityUUIDLeast", "#entityUUIDLeast_" + t), setText(e, "EntityUUIDMost", "#entityUUIDMost_" + t), isVehicle(a) && setCheckbox(e, "invulnerable", "#invulnerable_" + t, !1), setText(e, "motionX", "#motionX_" + t), setText(e, "motionY", "#motionY_" + t), setText(e, "motionZ", "#motionZ_" + t), isProjectile(a) && (setCheckbox(e, "inGround", "#inGround_" + t), "arrow" == a || "spectral_arrow" == a ? (setText(e, "pickup", "#pickup_" + t), setCheckbox(e, "player", "#player_" + t), setCheckbox(e, "crit", "#crit_" + t), setText(e, "damage", "#damage_" + t), setText(e, "life", "#life_" + t), "spectral_arrow" == a ? setText(e, "duration", "#duration_" + t) : (setActiveEffectsXML(e, "#rightDiv_" + t), setText(e, "PotionChoice", "#rightDiv_" + t + "_potion_id_1p9"))) : "fireball" == a || "small_fireball" == a || "wither_skull" == a || "dragon_fireball" == a ? (setText(e, "powerX", "#powerX_" + t), setText(e, "powerY", "#powerY_" + t), setText(e, "powerZ", "#powerZ_" + t), setText(e, "Life", "#Life_" + t), "fireball" == a && setText(e, "ExplosionPower", "#ExplosionPower_" + t)) : "ThrownEnderpearl" != a && "xp_bottle" != a && "potion" != a && "snowball" != a || (setText(e, "ownerName", "#ownerName_" + t), "potion" == a && (setText(e, "potionBottle", "#potionBottle_" + t), setCheckbox(e, "Lingering", "#Lingering_" + t), setText(e, "PotionChoice", "#rightDiv_" + t + "_potion_id_1p9"), setActiveEffectsXML(e, "#rightDiv_" + t)))), "AreaEffectCloud" == a ? (setText(e, "Particle", "#Particle_" + t), setText(e, "ReapplicationDelay", "#ReapplicationDelay_" + t), setText(e, "Radius", "#Radius_" + t), setText(e, "RadiusPerTick", "#RadiusPerTick_" + t), setText(e, "RadiusOnUse", "#RadiusOnUse_" + t), setText(e, "Duration", "#Duration_" + t), setText(e, "DurationOnUse", "#DurationOnUse_" + t), setText(e, "Age", "#Age_" + t), setText(e, "WaitTime", "#WaitTime_" + t), $(e).find("Color").length > 0 && ($("#ColorAreaEffectCloud_" + t + "_customcol").click(), new jscolor.color(document.getElementById("ColorAreaEffectCloud_" + t + "_color"), {}).fromString($(e).find("Color").text())), setText(e, "OwnerUUIDLeast", "#OwnerUUIDLeast_" + t), setText(e, "OwnerUUIDMost", "#OwnerUUIDMost_" + t), setActiveEffectsXML(e, "#rightDiv_" + t), setText(e, "PotionChoice", "#rightDiv_" + t + "_potion_id_1p9")) : "armor_stand" == a ? (setCheckbox(e, "ShowArms", "#ShowArms_" + t), setCheckbox(e, "Small", "#Small_" + t), setCheckbox(e, "Marker", "#Marker_" + t), setCheckbox(e, "Invisible", "#Invisible_" + t), setCheckbox(e, "Glowing", "#glowing_" + t), setCheckbox(e, "invulnerable", "#invulnerable_" + t, !1), setCheckbox(e, "NoBasePlate", "#NoBasePlate_" + t), setCheckbox(e, "FallFlying", "#FallFlying_" + t), setCheckbox(e, "PersistenceRequired", "#PersistenceRequired_" + t), setText(e, "Rotation", "#Rotation_" + t), setEquipmentXML(e, t), setArmorStandPoseXML(e, t), setArmorStandDisabledSlotXML(e, t)) : "bat" == a ? setCheckbox(e, "BatFlags", "#BatFlags_" + t) : "boat" == a ? $(e).find("BoatType").length && setText(e, "BoatType", "#BoatType_" + t) : "chicken" == a ? (setCheckbox(e, "IsChickenJockey", "#IsChickenJockey_" + t), setText(e, "EggLayTime", "#EggLayTime_" + t)) : "creeper" == a ? (setCheckbox(e, "powered", "#powered_" + t), setCheckbox(e, "ignited", "#ignited_" + t), setText(e, "ExplosionRadius", "#ExplosionRadius_" + t), setText(e, "Fuse", "#Fuse_" + t)) : "ender_crystal" == a ? (setText(e, "BTX", "#BTX_" + t), setText(e, "BTY", "#BTY_" + t), setText(e, "BTZ", "#BTZ_" + t), setCheckbox(e, "HideBase", "#HideBase_" + t)) : "ender_dragon" == a ? setText(e, "DragonPhase", "#DragonPhase_" + t) : "enderman" == a ? setText(e, "carried", "#carried_" + t) : "endermite" == a ? setText(e, "Lifetime", "#Lifetime_" + t) : "evocation_illager" == a ? setText(e, "SpellTicks", "#SpellTicks_" + t) : "llama" == a ? (setText(e, "Variant", "#Variant_" + t), setCheckbox(e, "Bred", "#Bred_" + t), setCheckbox(e, "EatingHaystack", "#EatingHaystack_" + t), setCheckbox(e, "Tame", "#Tame_" + t), setText(e, "Temper", "#Temper_" + t), setText(e, "LlamaStrength", "#LlamaStrength_" + t), setText(e, "DecorItem", "#DecorItem_" + t), $(e).find("ChestedHorse").length && ($("#ChestedHorse_" + t).click(), setChestSlotItems(e, t))) : "horse" == a || "skeleton_horse" == a || "zombie_horse" == a || "donkey" == a || "mule" == a ? (setCheckbox(e, "SaddleItem", "#SaddleItem_" + t), "horse" == a ? (setText(e, "Variant", "#Variant_" + t), setText(e, "ArmorItem", "#ArmorItem_" + t)) : "donkey" == a || "mule" == a ? $(e).find("ChestedHorse").length && ($("#ChestedHorse_" + t).click(), setChestSlotItems(e, t)) : "skeleton_horse" == a && (setCheckbox(e, "SkeletonTrap", "#SkeletonTrap_" + t), setText(e, "SkeletonTrapTime", "#SkeletonTrapTime_" + t)), setCheckbox(e, "Bred", "#Bred_" + t), setCheckbox(e, "EatingHaystack", "#EatingHaystack_" + t), setCheckbox(e, "Tame", "#Tame_" + t), setText(e, "Temper", "#Temper_" + t)) : "falling_block" == a ? (setText(e, "Block", "#Block_" + t), generateDataValue("Block_" + t), setText(e, "DataValue", "#Block_" + t + "_dataValue"), setText(e, "TileEntityData", "#TileEntityData_" + t), setText(e, "Time", "#Time_" + t), setCheckbox(e, "DropItem", "#DropItem_" + t), setCheckbox(e, "HurtEntities", "#HurtEntities_" + t), setText(e, "FallHurtMax", "#FallHurtMax_" + t), setText(e, "FallHurtAmount", "#FallHurtAmount_" + t)) : "fireworks_rocket" == a ? (setText(e, "LifeTime", "#LifeTime_" + t), setFireWorksRocketXML(e, "#Fireworks_" + t)) : "ghast" == a ? setText(e, "ExplosionPower", "#ExplosionPower_" + t, !1) : "item" == a ? (setEquipmentXMLForPart(e, t, "Item"), setText(e, "Age", "#Age_" + t), setText(e, "Health", "#Health_" + t), setText(e, "PickupDelay", "#PickupDelay_" + t), setText(e, "Owner", "#Owner_" + t), setText(e, "Thrower", "#Thrower_" + t)) : "item_frame" == a ? (setEquipmentXMLForPart(e, t, "Item"), setText(e, "Facing", "#Facing_" + t), setText(e, "ItemRotation", "#ItemRotation_" + t)) : "magma_cube" == a || "slime" == a ? (setText(e, "Size", "#Size_" + t), setCheckbox(e, "wasOnGround", "#wasOnGround_" + t)) : "ocelot" == a ? setText(e, "CatType", "#CatType_" + t) : "tnt" == a ? setText(e, "Fuse", "#Fuse_" + t) : "squid" == a ? setText(e, "Air", "#Air_" + t) : "painting" == a ? (setText(e, "Facing", "#Facing_" + t), setText(e, "Motive", "#Motive_" + t)) : "parrot" == a ? (setText(e, "Variant", "#Variant_" + t), setText(e, "OwnerUUID", "#OwnerUUID_" + t), setCheckbox(e, "Sitting", "#Sitting_" + t)) : "pig" == a ? setCheckbox(e, "Saddle", "#Saddle_" + t) : "zombie_pigman" == a ? (0 == $(e).find("IsBaby").text().length ? $("#IsBaby_" + t).val(-1) : setText(e, "IsBaby", "#IsBaby_" + t), setText(e, "Anger", "#Anger_" + t)) : "rabbit" == a ? (setText(e, "RabbitType", "#RabbitType_" + t), setText(e, "MoreCarrotTicks", "#MoreCarrotTicks_" + t)) : "sheep" == a ? (setCheckbox(e, "Sheared", "#Sheared_" + t), setText(e, "Color", "#Color_" + t)) : "shulker" == a ? (setText(e, "Peek", "#Peek_" + t), setText(e, "APX", "#APX_" + t), setText(e, "APY", "#APY_" + t), setText(e, "APZ", "#APZ_" + t), setText(e, "AttachFace", "#AttachFace_" + t), setText(e, "Color", "#Color_" + t)) : "shulker_bullet" == a ? (setText(e, "Steps", "#Steps_" + t), setText(e, "TXD", "#TXD_" + t), setText(e, "TYD", "#TYD_" + t), setText(e, "TZD", "#TZD_" + t), setText(e, "OX", "#OX_" + t), setText(e, "OY", "#OY_" + t), setText(e, "OZ", "#OZ_" + t), setText(e, "OUUID", "#OUUID_" + t), setText(e, "TX", "#TX_" + t), setText(e, "TY", "#TY_" + t), setText(e, "TZ", "#TZ_" + t), setText(e, "TUUID", "#TUUID_" + t)) : "snowman" == a ? setCheckbox(e, "NoPumpkin", "#NoPumpkin_" + t) : "xp_orb" == a ? (setText(e, "Value", "#Value_" + t), setText(e, "Health", "#Health_" + t), setText(e, "Age", "#Age_" + t)) : "villager" == a ? (setText(e, "Profession", "#Profession_" + t), setText(e, "Career", "#Career_" + t), setText(e, "CareerLevel", "#CareerLevel_" + t), setCheckbox(e, "Willing", "#Willing_" + t), $("trade", e).each(function(e) {
        makeOffer(t), setCheckbox(this, "rewardExp", "#rewardExp" + e + "_" + t), setText(this, "maxUses", "#maxUses" + e + "_" + t), setText(this, "uses", "#uses" + e + "_" + t), setEquipmentXMLForPart(this, t, "buy_" + e), setEquipmentXMLForPart(this, t, "buyB_" + e), $("buy", this).each(function(a) {
            setText(this, "id", "#buy_" + e + "_" + t), setText(this, "Count", "#buy_" + e + "_DCount_" + t)
        }), $("buyB", this).each(function(a) {
            setText(this, "id", "#buyB_" + e + "_" + t), setText(this, "Count", "#buyB_" + e + "_DCount_" + t)
        }), setEquipmentXMLForPart(this, t, "Sell_" + e)
    })) : isMinecart(a) ? (setCheckbox(e, "CustomDisplayTile", "#CustomDisplayTile_" + t), setText(e, "DisplayTile", "#DisplayTile_" + t), setText(e, "DisplayOffset", "#DisplayOffset_" + t), "furnace_minecart" == a ? (setText(e, "PushX", "#PushX_" + t), setText(e, "PushZ", "#PushZ_" + t), setText(e, "Fuel", "#Fuel_" + t)) : "hopper_minecart" == a ? (setText(e, "TransferCooldown", "#TransferCooldown_" + t), setCheckbox(e, "hopper_minecartEnabled", "#hopper_minecartEnabled_" + t), setText(e, "LootTable", "#LootTable_" + t), setChestSlotItems(e, t)) : "chest_minecart" == a ? (setText(e, "LootTable", "#LootTable_" + t), setChestSlotItems(e, t)) : "tnt_minecart" == a ? setText(e, "TNTFuse", "#TNTFuse_" + t) : "commandblock_minecart" == a ? (setText(e, "Command", "#Command_" + t), setCheckbox(e, "EscapeQuotes", "#EscapeQuotes_" + t)) : "spawner_minecart" == a && setText(e, "spawnData", "#spawnData_" + t)) : "vex" == a ? (setText(e, "BoundX", "#BoundX_" + t), setText(e, "BoundY", "#BoundY_" + t), setText(e, "BoundZ", "#BoundZ_" + t), setText(e, "LifeTicks", "#LifeTicks_" + t)) : "villager_golem" == a ? setCheckbox(e, "PlayerCreated", "#PlayerCreated_" + t) : "vindication_illager" == a ? setCheckbox(e, "Johnny", "#Johnny_" + t) : "wither" == a ? setText(e, "Invul", "#Invul_" + t) : "wolf" == a ? (setCheckbox(e, "Angry", "#Angry_" + t), setText(e, "CollarColor", "#CollarColor_" + t)) : "zombie" != a && "husk" != a && "zombie_villager" != a || (0 == $(e).find("IsVillager").text().length ? $("#IsVillager_" + t).val(-1) : setText(e, "IsVillager", "#IsVillager_" + t), 0 == $(e).find("IsBaby").text().length ? $("#IsBaby_" + t).val(-1) : setText(e, "IsBaby", "#IsBaby_" + t), setCheckbox(e, "CanBreakDoors", "#CanBreakDoors_" + t), "zombie_villager" == a && (0 == $(e).find("VillagerProfession").text().length ? $("#VillagerProfession_" + t).val(-1) : setText(e, "VillagerProfession", "#VillagerProfession_" + t), setText(e, "ConversionTime", "#ConversionTime_" + t))), canBreed(a) && (setText(e, "InLove", "#InLove_" + t), setText(e, "Age", "#Age_" + t), setText(e, "ForcedAge", "#ForcedAge_" + t), setText(e, "OwnerUUID", "#OwnerUUID_" + t), setText(e, "Owner", "#Owner_" + t), "wolf" != a && "ocelot" != a || setCheckbox(e, "Sitting", "#Sitting_" + t)), hasDrops(a) && (setEquipmentXML(e, t), setAttributeXML(e, t), setActiveEffectsXML(e, "#leftDiv_" + t))
}

function setCheckbox(e, t, a, n) {
    setCheckbox(e, t, a), n && $(a).click()
}

function setCheckbox(e, t, a) {
    1 == $(e).find(t).text() ? $(a).prop("checked", !0) : $(a).prop("checked", !1)
}

function setSelect(e, t, a, n) {
    setText(e, t, a), n && $(a).change()
}

function setText(e, t, a, n) {
    setText(e, t, a), n && $(a).keyup()
}

function setText(e, t, a) {
    $(a).val($(e).find("> " + t).text())
}

function setTextOld(e, t, a) {
    $(a).val($(e).find(t).text())
}

function createEntityListFromXML() {
    var e = "<div class='EntityOptions' id='entityDiv_" + entityIndex + "'><span class='leftDivAndControls'><span id='entityOrdering_" + entityIndex + "' class='entityOrdering'>" + mkLL("entityLabelBig", llEntity) + "<select class='entityList' id='entityList_" + entityIndex + "' onChange='updateOptions(" + entityIndex + ")'" + mkTT(ttEntity) + ">";
    for (i = 0; i < entities.length; i++) e += "<option value='" + entities[i][1] + "'>" + entities[i][1] + "</option>";
    e += "</select><img src='cross.png' id='deleteButton" + entityIndex + "' onClick='deleteEntityListSelect(" + entityIndex + ")'" + mkTT(ttRemoveFromStack) + ">", e += "<img src='minus.png'" + mkTT(ttShowHide) + " id='showHide_" + entityIndex + "' onClick='showHide(" + entityIndex + ")'><img src='up.png'" + mkTT(ttMoveUpStack) + " id='up_" + entityIndex + "' onClick='moveUp(" + entityIndex + ")'><img src='down.png'" + mkTT(ttMoveDownStack) + " id='down_" + entityIndex + "' onClick='moveDown(" + entityIndex + ")'></span>", e += "<div class='leftDiv' id='leftDiv_" + entityIndex + "'>", e += "</div></span><div class='rightDiv' id='rightDiv_" + entityIndex + "'></div></div>", $("#inputForm").append(e)
}

function makeTag(e, t, a) {
    return 0 == $(t).length ? "" : $(t).val().length > 0 || a ? "<" + e + ">" + $(t).val().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;") + "</" + e + ">" : ""
}

function makeCheckboxTag(e, t, a) {
    return $(t).is(":checked") ? "<" + e + ">1</" + e + ">" : a ? "<" + e + ">0</" + e + ">" : ""
}

function setTargetSelectorXML(e) {
    $("targetSelector", e).each(function(e) {
        setSelect(this, "target", "#target", !0), "specific" == $("#target option:selected").val() ? setText(this, "playerName", "#playerName") : (setText(this, "target", "#target"), setText(this, "x", "#x"), setText(this, "y", "#y"), setText(this, "z", "#z"), setText(this, "c", "#c"), "farthest" == $(this).find("countOrder").text() && $("#farthest").click(), "radius" == $(this).find("areaType").text() ? (setText(this, "mr", "#rm"), setText(this, "rm", "#rm"), setText(this, "r", "#r")) : ($("#volume").click(), changeAreaType(), setText(this, "dx", "#dx"), setText(this, "dy", "#dy"), setText(this, "dz", "#dz")), setText(this, "m", "#m"), setText(this, "lm", "#lm"), setText(this, "l", "#l"), setText(this, "rxm", "#rxm"), setText(this, "rx", "#rx"), setText(this, "rym", "#rym"), setText(this, "ry", "#ry"), $("score", this).each(function(e) {
            scoreid = $(this).attr("id"), addScoreObjective(), setText(this, "scoreName", "#score_name_" + scoreid, !1), setText(this, "score_min", "#score_min_" + scoreid, !1), setText(this, "score_max", "#score_max_" + scoreid, !1), scoreid++
        }), $(this).find("notOnAnyTeam").length && $("#notOnAnyTeam").click(), setText(this, "team", "#team"), setCheckbox(this, "notTeam", "#notTeam"), setText(this, "eName", "#eName"), setCheckbox(this, "notName", "#notName"), setText(this, "eType", "#eType"), setCheckbox(this, "notEntityType", "#notEntityType"))
    })
}

function getTargetSelectorXML() {
    var e = "<targetSelector>";
    return e += makeTag("target", "#target", !0), "specific" == $("#target option:selected").val() ? e += makeTag("playerName", "#playerName", !1) : (e += makeTag("x", "#x", !1), e += makeTag("y", "#y", !1), e += makeTag("z", "#z", !1), e += makeTag("c", "#c", !1), "nearest" != $("input[name=countOrder]:checked").val() && (e += "<countOrder>farthest</countOrder>"), "radius" == $("input[name=areaType]:checked").val() ? (e += "<areaType>radius</areaType>", e += makeTag("rm", "#rm", !1), e += makeTag("r", "#r", !1)) : (e += "<areaType>volume</areaType>", e += makeTag("dx", "#dx", !1), e += makeTag("dy", "#dy", !1), e += makeTag("dz", "#dz", !1)), e += makeTag("m", "#m", !1), e += makeTag("lm", "#lm", !1), e += makeTag("l", "#l", !1), e += makeTag("rxm", "#rxm", !1), e += makeTag("rx", "#rx", !1), e += makeTag("rym", "#rym", !1), e += makeTag("ry", "#ry", !1), $("#scoreObjectives > .scoreObj").each(function(t) {
        var a = this.id.substr(this.id.indexOf("_") + 1);
        $("#score_name_" + a).val().length && (e += "<score id=" + t + ">", e += "<scoreName>" + $("#score_name_" + a).val() + "</scoreName>", e += makeTag("score_min", "#score_min_" + a, !1), e += makeTag("score_max", "#score_max_" + a, !1), e += "</score>")
    }), e += makeCheckboxTag("notOnAnyTeam", "#notOnAnyTeam", !1), e += makeTag("team", "#team", !1), e += makeCheckboxTag("notTeam", "#notTeam", !1), e += makeTag("eName", "#eName", !1), e += makeCheckboxTag("notName", "#notName", !1), e += makeTag("eType", "#eType", !1), e += makeCheckboxTag("notEntityType", "#notEntityType", !1)), e + "</targetSelector>"
}

function getSlotItemXML() {
    return makeTag("slotType", "#slotType") + makeTag("slotNumberSelector", "#slotNumberSelector")
}

function generateXML() {
    var e = "<mode>";
    if (e += makeTag("commandType", "#commandType", !0), e += makeCheckboxTag("modeEnchantAll", "#modeEnchantAll", !1), "Give" == $("#commandType").val()) e += getTargetSelectorXML() + "<Item>" + generateEquipmentXMLForPart(0, "Item") + "</Item>";
    else if ("ReplaceItemEntity" == $("#commandType").val()) e += getTargetSelectorXML() + getSlotItemXML() + "<Item>" + generateEquipmentXMLForPart(0, "Item") + "</Item>";
    else if ("ReplaceItemBlock" == $("#commandType").val() || "SetBlock" == $("#commandType").val() || "Fill" == $("#commandType").val() || "BlockData" == $("#commandType").val()) e += getBlockCommandXML();
    else if ("AnyCommand" == $("#commandType").val()) e += makeTag("anyCommand", "#anyCommand", !0);
    else {
        var t = $("#inputForm > .EntityOptions").map(function() {
            return this.id || null
        }).get(),
            a = [],
            n = [];
        for (i = 0; i < t.length; i++) {
            var o = t[i].split("_")[1];
            a.push($("#entityList_" + o + " option:selected").text()), n.push(o)
        }
        for (e += makeTag("xpos", "#xpos", !0), e += makeTag("ypos", "#ypos", !0), e += makeTag("zpos", "#zpos", !0), e += makeCheckboxTag("relative", "#relative", !0), stackindex = 0; stackindex < a.length; stackindex++) e += "<entity><entityType>" + a[stackindex] + "</entityType>" + generateEntityXML(n[stackindex], a[stackindex]) + "</entity>";
        "Spawner" == $("#commandType").val() && (e += makeTag("SpawnCount", "#SpawnCount", !1), e += makeTag("SpawnRange", "#SpawnRange", !1), e += makeTag("RequiredPlayerRange", "#RequiredPlayerRange", !1), e += makeTag("Delay", "#Delay", !1), e += makeTag("MinSpawnDelay", "#MinSpawnDelay", !1), e += makeTag("MaxSpawnDelay", "#MaxSpawnDelay", !1), e += makeTag("MaxNearbyEntities", "#MaxNearbyEntities", !1), e += makeTag("spawnXpos", "#spawnXpos", !1), e += makeTag("spawnYpos", "#spawnYpos", !1), e += makeTag("spawnZpos", "#spawnZpos", !1))
    }
    return e += "</mode>"
}

function setDropChanceCountXML(e, t) {
    var a = t.substring(t.lastIndexOf("_") + 1);
    if (hasDrops($("#entityList_" + a + " option:selected").text()) || -1 != t.indexOf("Item_") || -1 != t.indexOf("Sell_") || -1 != t.indexOf("Slot_")) return setText(e, "Count", t.replace("DC", "DCount"))
}

function dropChanceCountXML(e) {
    var t = e.substring(e.lastIndexOf("_") + 1);
    return hasDrops($("#entityList_" + t + " option:selected").text()) || -1 != e.indexOf("Item_") || -1 != e.indexOf("Sell_") || -1 != e.indexOf("Slot_") ? makeTag("Count", e.replace("DC", "DCount"), !0) : ""
}

function setEnchantmentsXML(e, t, a) {
    var n = a.replace("NamedItem", "Lore"),
        o = $(t.replace("_enc", "")).val();
    if ($(e).find("Enchantments").length > 0 || -1 != o.indexOf("_shulker_box") || "trapped_chest" == o || "chest" == o || "banner" == o || "shield" == o || "enchanted_book" == o || "writable_book" == o || "written_book" == o || "fireworks" == o || "firework_charge" == o || "armor_stand" == o || "lingering_potion" == o || "splash_potion" == o || "tipped_arrow" == o || "potion" == o || -1 != o.indexOf("potion:") || -1 != o.indexOf("spawn_egg") || isLeatherArmor(o) && $(e).find("leatherColor").length > 0)
        if ($("Enchantments", e).each(function(e) {
            $("enchant", this).each(function(e) {
                eid = $(this).find("eid").text(), $(t + "_" + eid).click(), $(t.replace("enc", "lvl") + "_" + eid).val($(this).find("lvl").text())
            })
        }), isLeatherArmor(o) && $(e).find("leatherColor").length > 0 && ($(t.replace("_enc", "") + "_customcol").click(), (i = new jscolor.color(document.getElementById(t.replace("_enc", "").substring(1) + "_color"), {})).fromString($(e).find("leatherColor").text())), "firework_charge" == o) setFireWorksRocketXML(e, t.replace("_enc", ""));
        else if ("fireworks" == o) setFireWorksRocketXML(e, t.replace("_enc", ""));
    else if ("banner" == o || "shield" == o) setText(e, "bannerTag", t.replace("_enc", "") + "_bannerCode");
    else if (-1 != o.indexOf("spawn_egg") || -1 != o.indexOf("armor_stand")) setText(e, "entityTag", t.replace("_enc", "") + "_entityCode");
    else if ("potion" == o || -1 != o.indexOf("potion:") || "splash_potion" == o || "lingering_potion" == o || "tipped_arrow" == o) {
        setActiveEffectsXML(e, t), setText(e, "PotionChoice", t + "_potion_id_1p9"), $(t + "_customcol").click();
        var i = new jscolor.color(document.getElementById(t.substr(1) + "_color"), {});
        i.fromString($(e).find("color").text())
    } else "written_book" == o ? setWrittenBookXML(e, t) : "writable_book" == o ? setText(e, "bookText", t.replace("_enc", "_bookText")) : -1 != o.indexOf("_shulker_box") || "trapped_chest" == o || "chest" == o ? setChestSlotItems(e, 0) : "enchanted_book" == o && $("StoredEnchantments", e).each(function(e) {
        $("enchant", this).each(function(e) {
            eid = $(this).find("eid").text(), newname = t.replace("enc", "SEenc"), $(newname + "_" + eid).click(), $(newname.replace("enc", "lvl") + "_" + eid).val($(this).find("lvl").text())
        })
    });
    setText(e, "NamedItem", a), setText(e, "Lore", n), setCheckbox(e, "Unbreakable", t.replace("_enc", "_unbreakable"))
}

function setFireWorksRocketXML(e, t) {
    $(t + "_flight").val($(e).find("Flight").text()), $("Explosions", e).each(function(e) {
        removeFireworkExplosion(t.substring(1) + "_fireworkrocket_exp_0"), $("Explosion", this).each(function(e) {
            explosion = t + "_fireworkrocket_exp_" + e, addFireworkExplosion(t.substring(1) + "_fireworkrocket", !0), setText(this, "ExplosionType", explosion + "_type"), setCheckbox(this, "Flicker", explosion + "_flicker"), setCheckbox(this, "Trail", explosion + "_trail"), setFireWorkColorsXML(this, "Colors", explosion + "_col"), setFireWorkColorsXML(this, "FadeColors", explosion + "_fade")
        })
    })
}

function setFireWorkColorsXML(e, t, a) {
    $(a + "_0").remove(), $(t, e).each(function(e) {
        j = 0, $("fwCol", this).each(function(e) {
            addFireWorkColor(a.substring(1)), myPicker = new jscolor.color(document.getElementById(a.substring(1) + "_" + j), {}), myPicker.fromString($(this).text()), j++
        })
    })
}

function enchantmentsXML(e, t) {
    var a = t.replace("NamedItem", "Lore"),
        n = $(e + " .Enchants").map(function() {
            return this.id || null
        }).get(),
        o = [];
    for (i = 0; i < n.length; i++) - 1 != ("#" + n[i]).indexOf(e) && $("#" + n[i]).is(":checked") && o.push(n[i]);
    var l = "",
        r = $(e.replace("_enc", "")).val();
    if (o.length > 0 || "banner" == r || "shield" == r || "trapped_chest" == r || "chest" == r || -1 != r.indexOf("_shulker_box") || "writable_book" == r || "written_book" == r || "enchanted_book" == r || "fireworks" == r || "firework_charge" == r || "armor_stand" == r || "potion" == r || "lingering_potion" == r || "splash_potion" == r || "tipped_arrow" == r || -1 != r.indexOf("spawn_egg") || -1 != r.indexOf("potion:") || isLeatherArmor(r) && $(e.replace("_enc", "") + "_customcol").is(":checked")) {
        if (o.length > 0) {
            for (l += "<Enchantments>", i = 0; i < o.length; i++) $("#" + o[i]).is(":checked") && (l += "<enchant><eid>" + o[i].substring(o[i].lastIndexOf("_") + 1, o[i].length) + "</eid><lvl>" + $("#" + o[i].replace("enc", "lvl")).val() + "</lvl></enchant>");
            l += "</Enchantments>"
        }
        isLeatherArmor(r) && $(e.replace("_enc", "") + "_customcol").is(":checked") && (l += makeTag("leatherColor", e.replace("_enc", "") + "_color", !0)), "fireworks" == r || "firework_charge" == r ? l += makeFireWorksRocketXML(e.replace("_enc", "")) : "banner" == r || "shield" == r ? $(e.replace("_enc", "") + "_bannerCode").length && (l += makeTag("bannerTag", e.replace("_enc", "") + "_bannerCode", !1)) : -1 != r.indexOf("_shulker_box") || "trapped_chest" == r || "chest" == r ? l += getChestSlotItemsXML(e, 0) : -1 != r.indexOf("spawn_egg") || -1 != r.indexOf("armor_stand") ? $(e.replace("_enc", "") + "_entityCode").length && (l += makeTag("entityTag", e.replace("_enc", "") + "_entityCode", !1)) : "potion" == r || "lingering_potion" == r || "splash_potion" == r || "tipped_arrow" == r || -1 != r.indexOf("potion:") ? (l += generateActiveEffectsXML(e), l += generatePotionEffectChoiceXML(e), l += makeTag("color", e + "_color", !1)) : "enchanted_book" == r ? l += generateEnchantedBookXML(e) : "written_book" == r ? l += generateWrittenBookXML(e) : "writable_book" == r && $(e.replace("_enc", "_bookText")).length && (l += makeTag("bookText", e.replace("_enc", "_bookText"), !1))
    }
    return l += makeTag("NamedItem", t, !1), l += makeTag("Lore", a, !1), l += makeCheckboxTag("Unbreakable", e.replace("_enc", "_unbreakable"), !1)
}

function generatePotionEffectChoiceXML(e) {
    return "<PotionChoice>" + $(e + "_potion_id_1p9").val() + "</PotionChoice>"
}

function generateEnchantedBookXML(e) {
    for (var t = $(e + " .StoredEnchants").map(function() {
        return this.id || null
    }).get(), a = [], n = 0; n < t.length; n++) $("#" + t[n]).is(":checked") && a.push(t[n]);
    var o = "";
    if (a.length > 0) {
        for (o += "<StoredEnchantments>", n = 0; n < a.length; n++) $("#" + a[n]).is(":checked") && (o += "<enchant><eid>" + a[n].substring(a[n].lastIndexOf("_") + 1, a[n].length) + "</eid><lvl>" + $("#" + a[n].replace("enc", "lvl")).val() + "</lvl></enchant>");
        o += "</StoredEnchantments>"
    }
    return o
}

function makeFireWorksRocketXML(e) {
    var t = "<Firework>";
    return t += makeTag("Flight", e + "_flight", !0), t += "<Explosions>", $(e + "_fireworkrocket > .explosion").each(function() {
        var e = this.id;
        t += "<Explosion><ExplosionType>" + $("#" + e + "_type").val() + "</ExplosionType>", t += makeCheckboxTag("Flicker", "#" + e + "_flicker", !1), t += makeCheckboxTag("Trail", "#" + e + "_trail", !1), t += "<Colors>" + makeFireWorkColorsXML(e + "_col") + "</Colors>", t += "<FadeColors>" + makeFireWorkColorsXML(e + "_fade") + "</FadeColors>", t += "</Explosion>"
    }), (t += "</Explosions>") + "</Firework>"
}

function makeFireWorkColorsXML(e) {
    var t = "";
    return $("#" + e + " > .colField").each(function() {
        t += "<fwCol>" + $("#" + this.id).val() + "</fwCol>"
    }), t
}

function isLeatherArmor(e) {
    return "leather_helmet" == e || "leather_chestplate" == e || "leather_leggings" == e || "leather_boots" == e
}

function generateAttributeXML(e) {
    var t = "";
    return ($("#maxhealth_" + e).val().length > 0 || $("#movementSpeed_" + e).val().length > 0 || $("#attackDamage_" + e).val().length > 0 || $("#followRange_" + e).val().length > 0 || ("zombie" == $("#entityList_" + e).val() || "husk" == $("#entityList_" + e).val()) && $("#spawnReinforcements_" + e).val().length > 0 || ("horse" == $("#entityList_" + e).val() || "mule" == $("#entityList_" + e).val() || "donkey" == $("#entityList_" + e).val() || "zombie_horse" == $("#entityList_" + e).val() || "skeleton_horse" == $("#entityList_" + e).val()) && $("#jumpStrength_" + e).val().length > 0 || $("#knockbackResistance_" + e).val().length > 0) && (t += "<Attributes>", t += makeTag("maxhealth", "#maxhealth_" + e, !1), t += makeTag("movementSpeed", "#movementSpeed_" + e, !1), t += makeTag("spawnReinforcements", "#spawnReinforcements_" + e, !1), t += makeTag("jumpStrength", "#jumpStrength_" + e, !1), t += makeTag("attackDamage", "#attackDamage_" + e, !1), t += makeTag("followRange", "#followRange_" + e, !1), t += makeTag("knockbackResistance", "#knockbackResistance_" + e, !1), t += makeTag("armor", "#armor_" + e, !1), t += "</Attributes>"), t += makeCheckboxTag("Invulnerable", "#invulnerable_" + e, !1), t += makeCheckboxTag("Glowing", "#glowing_" + e, !1), t += makeCheckboxTag("LeftHanded", "#leftHanded_" + e, !1), t += makeTag("Team", "#team_" + e, !1), t += makeTag("HealF", "#HealF_" + e, !1), t += makeTag("yaw", "#yaw_" + e, !1), t += makeTag("pitch", "#pitch_" + e, !1), t += makeTag("leashUUIDLeast", "#leashUUIDLeast_" + e, !1), t += makeTag("leashToUUIDMost", "#leashUUIDMost_" + e, !1), t += makeCheckboxTag("PersistenceRequired", "#PersistenceRequired_" + e, !1), t += makeCheckboxTag("FallFlying", "#FallFlying_" + e, !1), t += makeCheckboxTag("CanPickUpLoot", "#CanPickUpLoot_" + e, !1), t += makeCheckboxTag("NoAI", "#NoAI_" + e, !1), t += makeCheckboxTag("Silent", "#Silent_" + e, !1), t += makeTag("Fire", "#Fire_" + e, !1), t += makeTag("DeathLootTable", "#DeathLootTable_" + e, !1)
}

function setAttributeXML(e, t) {
    $("Attributes", e).each(function(e) {
        "zombie" != $("#entityList_" + t).val() && "husk" != $("#entityList_" + t).val() || setText(this, "spawnReinforcements", "#spawnReinforcements_" + t), "horse" != $("#entityList_" + t).val() && "mule" != $("#entityList_" + t).val() && "donkey" != $("#entityList_" + t).val() && "zombie_horse" != $("#entityList_" + t).val() && "skeleton_horse" != $("#entityList_" + t).val() || setText(this, "jumpStrength", "#jumpStrength_" + t, !1), setText(this, "maxhealth", "#maxhealth_" + t), setText(this, "movementSpeed", "#movementSpeed_" + t), setText(this, "attackDamage", "#attackDamage_" + t), setText(this, "followRange", "#followRange_" + t), setText(this, "armor", "#armor_" + t), setText(this, "knockbackResistance", "#knockbackResistance_" + t)
    }), setCheckbox(e, "Invulnerable", "#invulnerable_" + t), setCheckbox(e, "Glowing", "#glowing_" + t), setCheckbox(e, "LeftHanded", "#leftHanded_" + t), setText(e, "Team", "#team_" + t), setText(e, "HealF", "#HealF_" + t), setText(e, "yaw", "#yaw_" + t), setText(e, "pitch", "#pitch_" + t), setText(e, "leashUUIDLeast", "#leashUUIDLeast_" + t), setText(e, "leashToUUIDMost", "#leashUUIDMost_" + t), setCheckbox(e, "FallFlying", "#FallFlying_" + t), setCheckbox(e, "PersistenceRequired", "#PersistenceRequired_" + t), setCheckbox(e, "CanPickUpLoot", "#CanPickUpLoot_" + t), setCheckbox(e, "NoAI", "#NoAI_" + t), setCheckbox(e, "Silent", "#Silent_" + t), setText(e, "Fire", "#Fire_" + t), setText(e, "DeathLootTable", "#DeathLootTable_" + t)
}

function generateActiveEffectsXML(e) {
    var t = "";
    if ($(e + "_enableStatusEffect").is(":checked"))
        for (i = 0; i < statusEffects.length; i++) $(e + "_effect_" + statusEffects[i][0]).is(":checked") && (t += "<effect><effectid>" + statusEffects[i][0] + "</effectid>" + makeTag("Amplifier", e + "_" + statusEffects[i][0] + "_amp", !0) + makeTag("Duration", e + "_" + statusEffects[i][0] + "_dur", !0) + makeCheckboxTag("Hide", e + "_" + statusEffects[i][0] + "_hideParticle", !1) + "</effect>");
    return 0 == t.length ? "" : "<ActiveEffects>" + t + "</ActiveEffects>"
}

function setEquipmentXMLForPart(e, t, a) {
    $(a, e).each(function(e) {
        setSelect(this, "id", "#" + a + "_" + t, !0), setText(this, "Damage", "#" + a + "_" + t + "_dmg"), setDropChanceCountXML(this, "#" + a + "_DC_" + t), -1 != $("#" + a + "_" + t).val().indexOf("skull:3") && setText(this, "SkullOwner", "#" + a + "_" + t + "_skull"), setEnchantmentsXML(this, "#" + a + "_" + t + "_enc", "#" + a + "_NamedItem_" + t), $(this).find("AttributeModifiers").length > 0 && ($("#itemAttributeModifiers_" + a + "_" + t + "_cb").click(), setAttributeModifiersXML(this, "itemAttributeModifiers_" + a + "_" + t)), setCanDestroyCanPlaceOnHideFlagsXML(this, t, a)
    })
}

function generateEquipmentXMLForPart(e, t) {
    var a = makeTag("id", "#" + t + "_" + e, !0);
    return a += makeTag("Damage", "#" + t + "_" + e + "_dmg", !1), a += dropChanceCountXML("#" + t + "_DC_" + e), -1 != $("#" + t + "_" + e).val().indexOf("skull:3") && (a += makeTag("SkullOwner", "#" + t + "_" + e + "_skull", !0)), a += enchantmentsXML("#" + t + "_" + e + "_enc", "#" + t + "_NamedItem_" + e), $("#itemAttributeModifiers_" + t + "_" + e + "_cb").is(":checked") && (a += getAttributeModifiersXML("itemAttributeModifiers_" + t + "_" + e)), ($("#" + t + "_cpo_" + e).is(":checked") || $("#" + t + "_cd_" + e).is(":checked") || $("#" + t + "_hf_" + e).is(":checked")) && (a += getCanDestroyCanPlaceOnHideFlagsXML(e, t)), a
}

function getCanDestroyCanPlaceOnHideFlagsXML(e, t) {
    var a = "",
        n = "";
    if ($("#" + t + "_cpo_" + e).is(":checked"))
        for (var o = $("#" + t + "_cpoPanel_" + e + " > .anItem").map(function() {
            return this.id || null
        }).get(), i = 0; i < o.length; i++) n += "<item>" + $("#" + o[i] + "_item").val() + "</item>";
    n.length > 0 && (a += "<CanPlaceOn>" + n + "</CanPlaceOn>");
    var l = "";
    if ($("#" + t + "_cd_" + e).is(":checked"))
        for (var o = $("#" + t + "_cdPanel_" + e + " > .anItem").map(function() {
            return this.id || null
        }).get(), i = 0; i < o.length; i++) l += "<item>" + $("#" + o[i] + "_item").val() + "</item>";
    l.length > 0 && (a += "<CanDestroy>" + l + "</CanDestroy>");
    var r = "";
    return $("#" + t + "_hf_" + e).is(":checked") && (r += makeCheckboxTag("enc", "#" + t + "_hfenc_" + e, !1), r += makeCheckboxTag("mod", "#" + t + "_hfmod_" + e, !1), r += makeCheckboxTag("unb", "#" + t + "_hfunb_" + e, !1), r += makeCheckboxTag("cd", "#" + t + "_hfcd_" + e, !1), r += makeCheckboxTag("cpo", "#" + t + "_hfcpo_" + e, !1), (r += makeCheckboxTag("o", "#" + t + "_hfo_" + e, !1)).length > 0 && (a += "<HideFlags>" + r + "</HideFlags>")), a
}

function setCanDestroyCanPlaceOnHideFlagsXML(e, t, a) {
    $("CanPlaceOn", e).each(function(e) {
        $("#" + a + "_cpo_" + t).click(), index = 0, $("item", this).each(function(e) {
            addItemSelect(a + "_cpoPanel_" + t, ttCanPlaceChoose), $("#" + a + "_cpoPanel_" + t + "_" + index + "_item").val($(this).text()), index++
        })
    }), $("CanDestroy", e).each(function(e) {
        $("#" + a + "_cd_" + t).click(), index = 0, $("item", this).each(function(e) {
            addItemSelect(a + "_cdPanel_" + t, ttCanDestroyChoose), $("#" + a + "_cdPanel_" + t + "_" + index + "_item").val($(this).text()), index++
        })
    }), $("HideFlags", e).each(function(e) {
        $("#" + a + "_hf_" + t).click(), setCheckbox(this, "enc", "#" + a + "_hfenc_" + t), setCheckbox(this, "mod", "#" + a + "_hfmod_" + t), setCheckbox(this, "unb", "#" + a + "_hfunb_" + t), setCheckbox(this, "cd", "#" + a + "_hfcd_" + t), setCheckbox(this, "cpo", "#" + a + "_hfcpo_" + t), setCheckbox(this, "o", "#" + a + "_hfo_" + t)
    })
}

function setEquipmentXML(e, t) {
    $(e).find("Equipment").length && (setEquipmentXMLForPart(e, t, "eHolding"), setEquipmentXMLForPart(e, t, "eHoldingOffHand"), setEquipmentXMLForPart(e, t, "eBoot"), setEquipmentXMLForPart(e, t, "eLeg"), setEquipmentXMLForPart(e, t, "eBody"), setEquipmentXMLForPart(e, t, "eHead"), $(e).find("DropChances").length > 0 && $("DropChances", e).each(function(e) {
        setText(this, "eHoldingDC", "#eHolding_DC_" + t), setText(this, "eHoldingOffHandDC", "#eHoldingOffHand_DC_" + t), setText(this, "eBootDC", "#eBoot_DC_" + t), setText(this, "eLegDC", "#eLeg_DC_" + t), setText(this, "eBodyDC", "#eBody_DC_" + t), setText(this, "eHeadDC", "#eHead_DC_" + t)
    }))
}

function generateEquipmentXML(e) {
    if (0 != $("#eHolding_" + e).val() || 0 != $("#eHoldingOffHand_" + e).val() || 0 != $("#eHead_" + e).val() || 0 != $("#eBody_" + e).val() || 0 != $("#eLeg_" + e).val() || 0 != $("#eBoot_" + e).val()) {
        var t = "<Equipment><eHolding>";
        return t += generateEquipmentXMLForPart(e, "eHolding") + "</eHolding><eHoldingOffHand>", t += generateEquipmentXMLForPart(e, "eHoldingOffHand") + "</eHoldingOffHand><eBoot>", t += generateEquipmentXMLForPart(e, "eBoot") + "</eBoot><eLeg>", t += generateEquipmentXMLForPart(e, "eLeg") + "</eLeg><eBody>", t += generateEquipmentXMLForPart(e, "eBody") + "</eBody><eHead>", t += generateEquipmentXMLForPart(e, "eHead") + "</eHead>", hasDropChances(e) && (t += "<DropChances><eHoldingDC>" + $("#eHolding_DC_" + e).val() + "</eHoldingDC><eHoldingOffHandDC>" + $("#eHoldingOffHand_DC_" + e).val() + "</eHoldingOffHandDC><eBootDC>" + $("#eBoot_DC_" + e).val() + "</eBootDC><eLegDC>" + $("#eLeg_DC_" + e).val() + "</eLegDC><eBodyDC>" + $("#eBody_DC_" + e).val() + "</eBodyDC><eHeadDC>" + $("#eHead_DC_" + e).val() + "</eHeadDC></DropChances>"), t + "</Equipment>"
    }
    return ""
}

function getMotionXML(e) {
    return 0 != $("#motionX_" + e).val().length && 0 != $("#motionY_" + e).val().length && 0 != $("#motionZ_" + e).val().length ? makeTag("motionX", "#motionX_" + e, !1) + makeTag("motionY", "#motionY_" + e, !1) + makeTag("motionZ", "#motionZ_" + e, !1) : ""
}

function generateEntityXML(e, t) {
    var a = makeTag("CustomName", "#entityCustomName_" + e, !1);
    if (a += makeTag("Tags", "#Tags_" + e, !1), a += makeTag("StackID", "#StackID_" + e, !1), a += makeTag("RidingStackID", "#RidingStackID_" + e, !1), a += makeCheckboxTag("HideCustomName", "#hideCustomName_" + e, !1), a += makeCheckboxTag("NoGravity", "#NoGravity_" + e, !1), a += makeTag("EntityUUIDLeast", "#entityUUIDLeast_" + e, !1), a += makeTag("EntityUUIDMost", "#entityUUIDMost_" + e, !1), isVehicle(t) && $("#invulnerable_" + e).is(":checked") && (a += makeCheckboxTag("invulnerable", "#invulnerable_" + e, !1)), a += getMotionXML(e), isProjectile(t) && (a += makeCheckboxTag("inGround", "#inGround_" + e, !1), "arrow" == t || "spectral_arrow" == t ? (a += makeTag("pickup", "#pickup_" + e), a += makeCheckboxTag("player", "#player_" + e, !1), a += makeCheckboxTag("crit", "#crit_" + e, !1), a += makeTag("damage", "#damage_" + e, !1), a += makeTag("life", "#life_" + e, !1), "spectral_arrow" == t ? a += makeTag("duration", "#duration_" + e, !1) : (a += generatePotionEffectChoiceXML("#rightDiv_" + e), a += generateActiveEffectsXML("#rightDiv_" + e))) : "fireball" == t || "small_fireball" == t || "wither_skull" == t || "dragon_fireball" == t ? (a += makeTag("powerX", "#powerX_" + e, !1), a += makeTag("powerY", "#powerY_" + e, !1), a += makeTag("powerZ", "#powerZ_" + e, !1), a += makeTag("Life", "#Life_" + e, !1), "fireball" == t && (a += makeTag("ExplosionPower", "#ExplosionPower_" + e, !1))) : "ThrownEnderpearl" != t && "xp_bottle" != t && "potion" != t && "snowball" != t || (a += makeTag("ownerName", "#ownerName_" + e, !1), "potion" == t && (a += makeTag("potionBottle", "#potionBottle_" + e, !1), a += makeCheckboxTag("Lingering", "#Lingering_" + e, !1), a += generatePotionEffectChoiceXML("#rightDiv_" + e), a += generateActiveEffectsXML("#rightDiv_" + e)))), "AreaEffectCloud" == t) a += makeTag("Particle", "#Particle_" + e, !1), a += makeTag("ReapplicationDelay", "#ReapplicationDelay_" + e, !1), a += makeTag("Radius", "#Radius_" + e, !1), a += makeTag("RadiusPerTick", "#RadiusPerTick_" + e, !1), a += makeTag("RadiusOnUse", "#RadiusOnUse_" + e, !1), a += makeTag("Duration", "#Duration_" + e, !1), a += makeTag("DurationOnUse", "#DurationOnUse_" + e, !1), a += makeTag("Age", "#Age_" + e, !1), a += makeTag("WaitTime", "#WaitTime_" + e, !1), $("#ColorAreaEffectCloud_" + e + "_customcol").is(":checked") && (a += makeTag("Color", "#ColorAreaEffectCloud_" + e + "_color", !1)), a += makeTag("OwnerUUIDLeast", "#OwnerUUIDLeast_" + e, !1), a += makeTag("OwnerUUIDMost", "#OwnerUUIDMost_" + e, !1), a += generateActiveEffectsXML("#rightDiv_" + e), a += generatePotionEffectChoiceXML("#rightDiv_" + e);
    else if ("armor_stand" == t) a += makeCheckboxTag("ShowArms", "#ShowArms_" + e, !1), a += makeCheckboxTag("Small", "#Small_" + e, !1), a += makeCheckboxTag("Marker", "#Marker_" + e, !1), a += makeCheckboxTag("Glowing", "#glowing_" + e, !1), a += makeCheckboxTag("Invisible", "#Invisible_" + e, !1), a += makeCheckboxTag("NoBasePlate", "#NoBasePlate_" + e, !1), a += makeCheckboxTag("invulnerable", "#invulnerable_" + e, !1), a += makeCheckboxTag("FallFlying", "#FallFlying_" + e, !1), a += makeCheckboxTag("PersistenceRequired", "#PersistenceRequired_" + e, !1), a += makeTag("Rotation", "#Rotation_" + e, !1), a += generateEquipmentXML(e), a += armorStandPoseXML(e), a += generateArmorStandDisabledSlotXML(e);
    else if ("bat" == t) a += makeCheckboxTag("BatFlags", "#BatFlags_" + e, !1);
    else if ("boat" == t) a += makeTag("BoatType", "#BoatType_" + e, !1);
    else if ("chicken" == t) a += makeCheckboxTag("IsChickenJockey", "#IsChickenJockey_" + e, !1), a += makeTag("EggLayTime", "#EggLayTime_" + e, !1);
    else if ("creeper" == t) a += makeCheckboxTag("powered", "#powered_" + e, !1), a += makeCheckboxTag("ignited", "#ignited_" + e, !1), a += makeTag("ExplosionRadius", "#ExplosionRadius_" + e, !1), a += makeTag("Fuse", "#Fuse_" + e, !1);
    else if ("ender_crystal" == t) a += makeTag("BTX", "#BTX_" + e, !1), a += makeTag("BTY", "#BTY_" + e, !1), a += makeTag("BTZ", "#BTZ_" + e, !1), a += makeCheckboxTag("HideBase", "#HideBase_" + e, !1);
    else if ("ender_dragon" == t) a += makeTag("DragonPhase", "#DragonPhase_" + e, !1);
    else if ("enderman" == t) a += makeTag("carried", "#carried_" + e, !1);
    else if ("endermite" == t) a += makeTag("Lifetime", "#Lifetime_" + e, !1);
    else if ("evocation_illager" == t) a += makeTag("SpellTicks", "#SpellTicks_" + e, !1);
    else if ("llama" == t) a += makeCheckboxTag("Bred", "#Bred_" + e, !1), a += makeTag("Variant", "#Variant_" + e, !0), a += makeTag("DecorItem", "#DecorItem_" + e, !1), a += makeCheckboxTag("EatingHaystack", "#EatingHaystack_" + e, !1), a += makeCheckboxTag("Tame", "#Tame_" + e, !1), a += makeTag("Temper", "#Temper_" + e, !1), a += makeTag("LlamaStrength", "#LlamaStrength_" + e, !1), a += makeCheckboxTag("ChestedHorse", "#ChestedHorse_" + e, !0), a += getChestSlotItemsXML("#ChestSlot_" + e, e);
    else if ("horse" == t || "skeleton_horse" == t || "zombie_horse" == t || "donkey" == t || "mule" == t) a += makeCheckboxTag("SaddleItem", "#SaddleItem_" + e, !1), "horse" == t ? (a += makeTag("Variant", "#Variant_" + e, !0), 0 != $("#ArmorItem_" + e).val() && (a += makeTag("ArmorItem", "#ArmorItem_" + e, !0))) : "donkey" == t || "mule" == t ? $("#ChestedHorse_" + e).is(":checked") && (a += makeCheckboxTag("ChestedHorse", "#ChestedHorse_" + e, !0), a += getChestSlotItemsXML("#ChestSlot_" + e, e)) : "skeleton_horse" == t && (a += makeCheckboxTag("SkeletonTrap", "#SkeletonTrap_" + e, !1), a += makeTag("SkeletonTrapTime", "#SkeletonTrapTime_" + e, !1)), a += makeCheckboxTag("Bred", "#Bred_" + e, !1), a += makeCheckboxTag("EatingHaystack", "#EatingHaystack_" + e, !1), a += makeCheckboxTag("Tame", "#Tame_" + e, !1), a += makeTag("Temper", "#Temper_" + e, !1);
    else if ("falling_block" == t) a += makeTag("Block", "#Block_" + e, !1), a += makeTag("DataValue", "#Block_" + e + "_dataValue", !0), a += makeTag("TileEntityData", "#TileEntityData_" + e, !1), a += makeTag("Time", "#Time_" + e, !1), a += makeCheckboxTag("DropItem", "#DropItem_" + e, !1), a += makeCheckboxTag("HurtEntities", "#HurtEntities_" + e, !1), a += makeTag("FallHurtMax", "#FallHurtMax_" + e, !1), a += makeTag("FallHurtAmount", "#FallHurtAmount_" + e, !1);
    else if ("fireworks_rocket" == t) a += makeTag("LifeTime", "#LifeTime_" + e, !1), a += makeFireWorksRocketXML("#Fireworks_" + e);
    else if ("ghast" == t) a += makeTag("ExplosionPower", "#ExplosionPower_" + e, !1);
    else if ("item" == t) a += "<Item>" + generateEquipmentXMLForPart(e, "Item") + "</Item>", a += makeTag("Age", "#Age_" + e, !1), a += makeTag("Health", "#Health_" + e, !1), a += makeTag("PickupDelay", "#PickupDelay_" + e, !1), a += makeTag("Owner", "#Owner_" + e, !1), a += makeTag("Thrower", "#Thrower_" + e, !1);
    else if ("item_frame" == t) a += "<Item>" + generateEquipmentXMLForPart(e, "Item") + "</Item>", a += makeTag("Facing", "#Facing_" + e, !1), a += makeTag("ItemRotation", "#ItemRotation_" + e, !1);
    else if ("magma_cube" == t || "slime" == t) a += makeTag("Size", "#Size_" + e, !1), a += makeCheckboxTag("wasOnGround", "#wasOnGround_" + e, !1);
    else if ("ocelot" == t) a += makeTag("CatType", "#CatType_" + e, !0);
    else if ("tnt" == t) a += makeTag("Fuse", "#Fuse_" + e, !1);
    else if ("squid" == t) a += makeTag("Air", "#Air_" + e, !1);
    else if ("painting" == t) a += makeTag("Facing", "#Facing_" + e, !1), a += makeTag("Motive", "#Motive_" + e, !1);
    else if ("parrot" == t) a += makeTag("Variant", "#Variant_" + e, !1), a += makeCheckboxTag("Sitting", "#Sitting_" + e, !1), a += makeTag("OwnerUUID", "#OwnerUUID_" + e, !1);
    else if ("pig" == t) a += makeCheckboxTag("Saddle", "#Saddle_" + e, !1);
    else if ("zombie_pigman" == t) a += makeTag("IsBaby", "#IsBaby_" + e, !1), a += makeTag("Anger", "#Anger_" + e, !1);
    else if ("rabbit" == t) a += makeTag("RabbitType", "#RabbitType_" + e, !0), a += makeTag("MoreCarrotTicks", "#MoreCarrotTicks_" + e, !1);
    else if ("sheep" == t) a += makeCheckboxTag("Sheared", "#Sheared_" + e, !1), a += makeTag("Color", "#Color_" + e, !0);
    else if ("shulker" == t) a += makeTag("Peek", "#Peek_" + e, !0), a += makeTag("APX", "#APX_" + e, !0), a += makeTag("APY", "#APY_" + e, !0), a += makeTag("APZ", "#APZ_" + e, !0), a += makeTag("AttachFace", "#AttachFace_" + e, !0), a += makeTag("Color", "#Color_" + e, !0);
    else if ("shulker_bullet" == t) a += makeTag("Steps", "#Steps_" + e, !0), a += makeTag("TXD", "#TXD_" + e, !0), a += makeTag("TYD", "#TYD_" + e, !0), a += makeTag("TZD", "#TZD_" + e, !0), a += makeTag("OX", "#OX_" + e, !0), a += makeTag("OY", "#OY_" + e, !0), a += makeTag("OZ", "#OZ_" + e, !0), a += makeTag("OUUID", "#OUUID_" + e, !0), a += makeTag("TX", "#TX_" + e, !0), a += makeTag("TY", "#TY_" + e, !0), a += makeTag("TZ", "#TZ_" + e, !0), a += makeTag("TUUID", "#TUUID_" + e, !0);
    else if ("snowman" == t) a += makeCheckboxTag("NoPumpkin", "#NoPumpkin_" + e, !1);
    else if ("xp_orb" == t) a += makeTag("Value", "#Value_" + e, !1), a += makeTag("Health", "#Health_" + e, !1), a += makeTag("Age", "#Age_" + e, !1);
    else if ("villager" == t) {
        if (a += makeTag("Profession", "#Profession_" + e, !0), a += makeTag("Career", "#Career_" + e, !0), a += makeTag("CareerLevel", "#CareerLevel_" + e, !1), a += makeCheckboxTag("Willing", "#Willing_" + e, !1), $("#recipes" + e).children().length > 0) {
            var n = "<offers>";
            $("#recipes" + e + " > .villagerOffer").each(function() {
                var t = "<trade>",
                    a = this.id.split("_")[1];
                t += makeCheckboxTag("rewardExp", "#rewardExp" + a + "_" + e, !1), t += makeTag("maxUses", "#maxUses" + a + "_" + e, !1), t += makeTag("uses", "#uses" + a + "_" + e, !1), t += "<buy_" + a + ">" + generateEquipmentXMLForPart(e, "buy_" + a) + "</buy_" + a + ">", 0 != $("#buyB_" + a + "_" + e).val() && (t += "<buyB_" + a + ">" + generateEquipmentXMLForPart(e, "buyB_" + a) + "</buyB_" + a + ">"), t += "<Sell_" + a + ">" + generateEquipmentXMLForPart(e, "Sell_" + a) + "</Sell_" + a + ">", n += t += "</trade>"
            }), a += n + "</offers>"
        }
    } else isMinecart(t) ? ($("#CustomDisplayTile_" + e).is(":checked") && (a += makeCheckboxTag("CustomDisplayTile", "#CustomDisplayTile_" + e, !0), a += makeTag("DisplayTile", "#DisplayTile_" + e, !1), a += makeTag("DisplayOffset", "#DisplayOffset_" + e, !1)), "furnace_minecart" == t ? (a += makeTag("PushX", "#PushX_" + e, !1), a += makeTag("PushZ", "#PushZ_" + e, !1), a += makeTag("Fuel", "#Fuel_" + e, !1)) : "hopper_minecart" == t ? (a += makeCheckboxTag("hopper_minecartEnabled", "#hopper_minecartEnabled_" + e, !1), a += makeTag("TransferCooldown", "#TransferCooldown_" + e, !1), a += makeTag("LootTable", "#LootTable_" + e, !1), a += getChestSlotItemsXML("#rightDiv_" + e, e)) : "chest_minecart" == t ? (a += makeTag("LootTable", "#LootTable_" + e, !1), a += getChestSlotItemsXML("#rightDiv_" + e, e)) : "tnt_minecart" == t ? a += makeTag("TNTFuse", "#TNTFuse_" + e, !1) : "commandblock_minecart" == t ? (a += makeTag("Command", "#Command_" + e, !1), a += makeCheckboxTag("EscapeQuotes", "#EscapeQuotes_" + e, !1)) : "spawner_minecart" == t && (a += makeTag("spawnData", "#spawnData_" + e, !1))) : "vex" == t ? (a += makeTag("BoundX", "#BoundX_" + e, !1), a += makeTag("BoundY", "#BoundY_" + e, !1), a += makeTag("BoundZ", "#BoundZ_" + e, !1), a += makeTag("LifeTicks", "#LifeTicks_" + e, !1)) : "villager_golem" == t ? a += makeCheckboxTag("PlayerCreated", "#PlayerCreated_" + e, !0) : "vindication_illager" == t ? a += makeCheckboxTag("Johnny", "#Johnny_" + e, !1) : "wither" == t ? a += makeTag("Invul", "#Invul_" + e, !1) : "wolf" == t ? (a += makeCheckboxTag("Angry", "#Angry_" + e, !1), a += makeTag("CollarColor", "#CollarColor_" + e, !1)) : "zombie" != t && "husk" != t && "zombie_villager" != t || (a += makeTag("IsVillager", "#IsVillager_" + e, !1), a += makeTag("IsBaby", "#IsBaby_" + e, !1), a += makeCheckboxTag("CanBreakDoors", "#CanBreakDoors_" + e, !1), "zombie_villager" == t && (a += makeTag("VillagerProfession", "#VillagerProfession_" + e, !1), a += makeTag("ConversionTime", "#ConversionTime_" + e, !1)));
    return canBreed(t) && (a += makeTag("InLove", "#InLove_" + e, !1), a += makeTag("Age", "#Age_" + e, !1), a += makeTag("ForcedAge", "#ForcedAge_" + e, !1), a += makeTag("OwnerUUID", "#OwnerUUID_" + e, !1), a += makeTag("Owner", "#Owner_" + e, !1), "wolf" != t && "ocelot" != t || (a += makeCheckboxTag("Sitting", "#Sitting_" + e, !1))), hasDrops(t) && (a += generateEquipmentXML(e), a += generateAttributeXML(e), a += generateActiveEffectsXML("#leftDiv_" + e)), a
}

function setChestSlotItems(e, t) {
    $("items", e).each(function(e) {
        $("Slot", this).each(function(e) {
            chestIndex = $(this).attr("number"), setEquipmentXMLForPart(this, t, "Slot" + chestIndex)
        })
    })
}

function getChestSlotItemsXML(e, t) {
    for (var a = $(e + " > .chestSlot").map(function() {
        return this.id || null
    }).get(), n = "", o = 0; o < a.length; o++) {
        var i = a[o].split("_")[1];
        0 != $("#Slot" + i + "_" + t).val() && (n += "<Slot number='" + i + "'><Slot" + i + ">" + generateEquipmentXMLForPart(t, "Slot" + i) + "</Slot" + i + "></Slot>")
    }
    return n.length > 0 ? "<items>" + n + "</items>" : ""
}

function getAttributeModifiersXML(e) {
    var t = "<AttributeModifiers>";
    for (j = 0; j < attributeModifiers.length; j++) "" != $("#" + e + "_" + attributeModifiers[j] + "_amount").val() && (t += "<" + attributeModifiers[j] + "><Amount>" + $("#" + e + "_" + attributeModifiers[j] + "_amount").val() + "</Amount><Operation>" + $("#" + e + "_" + attributeModifiers[j] + "_operation").val() + "</Operation><UUIDLeast>" + $("#" + e + "_" + attributeModifiers[j] + "_UUIDLeast").val() + "</UUIDLeast><UUIDMost>" + $("#" + e + "_" + attributeModifiers[j] + "_UUIDMost").val() + "</UUIDMost><AppliedSlot>" + $("#" + e + "_" + attributeModifiers[j] + "_Slot").val() + "</AppliedSlot></" + attributeModifiers[j] + ">");
    return t + "</AttributeModifiers>"
}

function setAttributeModifiersXML(e, t) {
    var a = 0;
    $("AttributeModifiers", e).each(function(e) {
        for (a = 0; a < attributeModifiers.length; a++) $(attributeModifiers[a], this).each(function(e) {
            setText(this, "Amount", "#" + t + "_" + attributeModifiers[a] + "_amount"), setText(this, "Operation", "#" + t + "_" + attributeModifiers[a] + "_operation"), setText(this, "UUIDLeast", "#" + t + "_" + attributeModifiers[a] + "_UUIDLeast"), setText(this, "UUIDMost", "#" + t + "_" + attributeModifiers[a] + "_UUIDMost"), setText(this, "AppliedSlot", "#" + t + "_" + attributeModifiers[a] + "_Slot")
        })
    })
}

function setArmorStandPoseXML(e, t) {
    var a = new Array("Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Head");
    for (p = 0; p < a.length; p++) $(e).find(a[p]).length && $(a[p], e).each(function(e) {
        setText(this, "x", "#pose_" + t + "_" + p + "_x"), setText(this, "y", "#pose_" + t + "_" + p + "_y"), setText(this, "z", "#pose_" + t + "_" + p + "_z")
    })
}

function armorStandPoseXML(e) {
    var t = "<Pose>",
        n = !1,
        o = new Array("Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Head"),
        i = new Array("x", "y", "z");
    for (p = 0; p < o.length; p++) {
        for (t += "<" + o[p] + ">", a = 0; a < i.length; a++) $("#pose_" + e + "_" + p + "_" + i[a]).val().length > 0 && (n = !0, t += "<" + i[a] + ">" + $("#pose_" + e + "_" + p + "_" + i[a]).val() + "</" + i[a] + ">");
        t += "</" + o[p] + ">"
    }
    return t += "</Pose>", n ? t : ""
}

function armorStandDisabledSlotXML(e) {
    str = "";
    var t = new Array("dsHand", "dsBoot", "dsLeg", "dsChest", "dsHead");
    for (p = 0; p < 5; p++) part = "", $("#disableSlot_" + e + "_" + p + "_remove").is(":checked") && (part += "<remove>1</remove>"), $("#disableSlot_" + e + "_" + p + "_replace").is(":checked") && (part += "<replace>1</replace>"), $("#disableSlot_" + e + "_" + p + "_place").is(":checked") && (part += "<place>1</place>"), part.length > 0 && (str += "<" + t[p] + ">" + part + "</" + t[p] + ">");
    return str.length > 0 ? "<DisabledSlots>" + str + "</DisabledSlots>" : ""
}

function generateArmorStandDisabledSlotXML(e) {
    str = "";
    var t = new Array("dsHand", "dsBoot", "dsLeg", "dsChest", "dsHead");
    for (p = 0; p < 5; p++) part = "", $("#disableSlot_" + e + "_" + p + "_remove").is(":checked") && (part += "<remove>1</remove>"), $("#disableSlot_" + e + "_" + p + "_replace").is(":checked") && (part += "<replace>1</replace>"), $("#disableSlot_" + e + "_" + p + "_place").is(":checked") && (part += "<place>1</place>"), part.length > 0 && (str += "<" + t[p] + ">" + part + "</" + t[p] + ">");
    return str.length > 0 ? "<DisabledSlots>" + str + "</DisabledSlots>" : ""
}

function setArmorStandDisabledSlotXML(e, t) {
    $("DisabledSlots", e).each(function(e) {
        var a = new Array("dsHand", "dsBoot", "dsLeg", "dsChest", "dsHead");
        for (p = 0; p < 5; p++) $(a[p], this).each(function(e) {
            setCheckbox(this, "remove", "#disableSlot_" + t + "_" + p + "_remove"), setCheckbox(this, "replace", "#disableSlot_" + t + "_" + p + "_replace"), setCheckbox(this, "place", "#disableSlot_" + t + "_" + p + "_place")
        })
    })
}

function makeWrittenBookInput(e) {
    var t = e.substring(1);
    $(e + "_writtenBook").remove(), $(e).append("<span class='leftpan' id='" + t + "_writtenBook'><br>" + mkLL("entityLabelBig", llWrittenBook) + "<br>" + mkLL("entityLabelBig", llTitle) + "<input type='text' onkeyup='generateSummon()' id='" + t + "_writtenBook_title'" + mkTT(ttTitle) + "><br>" + mkLL("entityLabelBig", llAuthor) + "<input type='text' onkeyup='generateSummon()' id='" + t + "_writtenBook_author'" + mkTT(ttAuthor) + "><br>" + mkLL("entityLabelBig", llGeneration) + makeSelectWithIndex(t + "_writtenBook_generation", [0, 1, 2, 3], [llOriginal, llCopyOfOriginal, llCopyOfCopy, llTattered], mkTT(ttGeneration)) + makeButton(llAddPage, "addPage('" + t + "_writtenBook')", ttAddPage) + "<br></span>"), addPage(t + "_writtenBook")
}

function setWrittenBookXML(e, t) {
    $(t + "_writtenBook_title").val($(e).find("bookTitle").text()), $(t + "_writtenBook_author").val($(e).find("author").text()), $(t + "_writtenBook_generation").val($(e).find("generation").text()), $(t + "_writtenBook_page_0").remove(), $("Page", e).each(function(e) {
        addPage(t.substr(1) + "_writtenBook"), $(t + "_writtenBook_page_" + e + "_sec_0").remove(), $("Section", this).each(function(a) {
            addSection(t.substr(1) + "_writtenBook_page_" + e), id = t + "_writtenBook_page_" + e + "_sec_" + a, setText(this, "secText", id + "_text"), setText(this, "textCol", id + "_textCol"), setCheckbox(this, "bold", id + "_bold"), setCheckbox(this, "italic", id + "_italic"), setCheckbox(this, "underlined", id + "_underlined"), setCheckbox(this, "strikethrough", id + "_strikethrough"), setCheckbox(this, "obfuscated", id + "_obfuscated"), setText(this, "hoverEventAction", id + "_hoverEventAction"), setText(this, "hoverEvent", id + "_hoverEvent"), setText(this, "clickEventAction", id + "_clickEventAction"), setText(this, "clickEvent", id + "_clickEvent")
        })
    })
}

function generateWrittenBookXML(e) {
    return xml = "<WrittenBook>" + makeTag("bookTitle", e + "_writtenBook_title", !1), xml += makeTag("author", e + "_writtenBook_author", !1), xml += makeTag("generation", e + "_writtenBook_generation", !1), xml += "<Pages>", $(e + "_writtenBook > .bookPage").each(function() {
        xml += generateBookPageXML(this.id)
    }), xml + "</Pages></WrittenBook>"
}

function generateBookPageXML(e) {
    return xml = "", $("#" + e + " > .bookSection").each(function() {
        id = this.id, tmp = makeTag("secText", "#" + id + "_text", !1), tmp += makeTag("textCol", "#" + id + "_textCol", !1), tmp += makeCheckboxTag("bold", "#" + id + "_bold", !1), tmp += makeCheckboxTag("italic", "#" + id + "_italic", !1), tmp += makeCheckboxTag("underlined", "#" + id + "_underlined", !1), tmp += makeCheckboxTag("strikethrough", "#" + id + "_strikethrough", !1), tmp += makeCheckboxTag("obfuscated", "#" + id + "_obfuscated", !1), tmp += makeTag("hoverEventAction", "#" + id + "_hoverEventAction", !1), tmp += makeTag("hoverEvent", "#" + id + "_hoverEvent", !1), tmp += makeTag("clickEventAction", "#" + id + "_clickEventAction", !1), tmp += makeTag("clickEvent", "#" + id + "_clickEvent", !1), xml += "<Section>" + tmp + "</Section>"
    }), "<Page>" + xml + "</Page>"
}

function generateWrittenBook(e) {
    return str = 'title:"' + escapeText($(e + "_writtenBook_title").val()) + '",author:"' + escapeText($(e + "_writtenBook_author").val()) + '",generation:' + $(e + "_writtenBook_generation").val() + ",pages:[", $(e + "_writtenBook > .bookPage").each(function() {
        str += generateBookPage(this.id)
    }), str.substr(0, str.length - 1) + "]"
}

function generateBookPage(e) {
    return str = "", count = 0, $("#" + e + " > .bookSection").each(function() {
        id = this.id, tmp = '{\\"text\\":\\"' + escapeText($("#" + id + "_text").val()) + '\\",\\"color\\":\\"' + $("#" + id + "_textCol").val() + '\\"', tmp += ',\\"bold\\":' + $("#" + id + "_bold").is(":checked"), tmp += ',\\"italic\\":' + $("#" + id + "_italic").is(":checked"), tmp += ',\\"underlined\\":' + $("#" + id + "_underlined").is(":checked"), tmp += ',\\"strikethrough\\":' + $("#" + id + "_strikethrough").is(":checked"), tmp += ',\\"obfuscated\\":' + $("#" + id + "_obfuscated").is(":checked"), $("#" + id + "_hoverEvent").val().length && (tmp += ',\\"hoverEvent\\":{\\"action\\":\\"' + $("#" + id + "_hoverEventAction").val() + '\\",\\"value\\":\\"' + escapeText($("#" + id + "_hoverEvent").val()) + '\\"}'), $("#" + id + "_clickEvent").val().length && (tmp += ',\\"clickEvent\\":{\\"action\\":\\"' + $("#" + id + "_clickEventAction").val() + '\\",\\"value\\":\\"' + escapeText($("#" + id + "_clickEvent").val()) + '\\"}'), 0 == count ? str += '"' + tmp : 1 == count ? str += ',\\"extra\\":[' + tmp + "}" : str += "," + tmp + "}", count++
    }), -1 == str.indexOf('\\"bold\\":true') && (str = replaceAll(',\\"bold\\":false', "", str)), -1 == str.indexOf('\\"italic\\":true') && (str = replaceAll(',\\"italic\\":false', "", str)), -1 == str.indexOf('\\"underlined\\":true') && (str = replaceAll(',\\"underlined\\":false', "", str)), -1 == str.indexOf('\\"strikethrough\\":true') && (str = replaceAll(',\\"strikethrough\\":false', "", str)), -1 == str.indexOf('\\"obfuscated\\":true') && (str = replaceAll(',\\"obfuscated\\":false', "", str)), count > 1 ? str += ']}",' : str += '}",', str
}

function escapeText(e) {
    return e = e.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\b]/g, "\\b").replace(/[\f]/g, "\\f").replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r").replace(/[\t]/g, "\\t"), replaceAll('"', "", e)
}

function addPage(e) {
    for (var t = 0; $("#" + e + "_page_" + t).length;) t++;
    $("#" + e).append("<div id='" + e + "_page_" + t + "' class='bookPage'>" + makeButton(llRemovePage, "removePage('" + e + "_page_" + t + "')", ttRemovePage) + makeButton(llAddSection, "addSection('" + e + "_page_" + t + "')", ttAddSection) + "<br></div>"), addSection(e + "_page_" + t)
}

function removePage(e) {
    $("#" + e).remove(), generateSummon()
}

function addSection(e) {
    for (var t = 0; $("#" + e + "_sec_" + t).length;) t++;
    $("#" + e).append("<div id='" + e + "_sec_" + t + "' class='bookSection'>" + mkLL("entityLabel", llBookText) + "<input class='inputForBooks' type='text' onkeyup='generateSummon()' id='" + e + "_sec_" + t + "_text'" + mkTT(ttBookText) + ">" + makeButton(llRemoveSection, "removeSection('" + e + "_sec_" + t + "')", ttRemoveSection) + "<br>" + mkLL("entityLabel", llTextColor) + makeColorSelectBookText(e + "_sec_" + t + "_textCol", mkTT(ttTextColor)) + "<br>" + mkLL("entityLabel", llTextStyle) + "<input type='checkbox' onclick='generateSummon()' id='" + e + "_sec_" + t + "_bold'>" + llBold + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='" + e + "_sec_" + t + "_italic'>" + llItalic + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='" + e + "_sec_" + t + "_underlined'>" + llUnderlined + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='" + e + "_sec_" + t + "_strikethrough'>" + llStrikethrough + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='" + e + "_sec_" + t + "_obfuscated'>" + llObfuscated + "<br>" + mkLL("entityLabel", llHoverEvent) + makeSelect(e + "_sec_" + t + "_hoverEventAction", ["show_text", "run_command", "open_url", "change_page", "show_item", "show_achievement"], mkTT(ttHoverActionType)) + "<input class='inputForBooks' type='text' onkeyup='generateSummon()' id='" + e + "_sec_" + t + "_hoverEvent'" + mkTT(ttClickHoverAction) + "><br>" + mkLL("entityLabel", llClickEvent) + makeSelect(e + "_sec_" + t + "_clickEventAction", ["run_command", "show_text", "open_url", "change_page", "show_item", "show_achievement"], mkTT(ttClickActionType)) + "<input class='inputForBooks' type='text' onkeyup='generateSummon()' id='" + e + "_sec_" + t + "_clickEvent'" + mkTT(ttClickHoverAction) + "><hr></div>"), generateSummon()
}

function makeColorSelectBookText(e, t) {
    return makeSelect(e, ["black", "dark_blue", "dark_green", "dark_aqua", "dark_red", "dark_purple", "gold", "gray", "dark_gray", "blue", "green", "aqua", "red", "light_purple", "yellow", "white"], t)
}

function removeSection(e) {
    $("#" + e).remove(), generateSummon()
}

function mkLL(e, t) {
    return "<span class='" + e + "'>" + t + ":</span>"
}

function mkTT(e) {
    return ' title="' + e + '"'
}

function makeInputText(e, t, a, n) {
    return t.length > 0 ? title = ' title="' + t + '"' : title = "", a.length > 0 ? _css = " class='" + a + "'" : _css = "", "<input type='text' id='" + e + "' " + n + title + _css + ">"
}

function makeInputTextWithValue(e, t, a, n, o) {
    return str = makeInputText(e, t, a, n), str.replace("<input", "<input value='" + o + "'")
}

function makeInputCheckbox(e, t, a, n) {
    return t.length > 0 ? title = ' title="' + t + '"' : title = "", CHECKED = n ? " CHECKED" : "", "<input type='checkbox' id='" + e + "' " + a + title + CHECKED + ">"
}

function populateBlockCommandForm(e, t) {
    setText(e, "xpos", "#xpos"), setText(e, "ypos", "#ypos"), setText(e, "zpos", "#zpos"), setText(e, "expos", "#expos"), setText(e, "eypos", "#eypos"), setText(e, "ezpos", "#ezpos"), "ReplaceItemBlock" == t ? (setText(e, "slotNo", "#slotNo"), setChestSlotItems(e, 0)) : "SetBlock" == t ? ($("#Item_0").val($(e).find("Item_0").text()), generateDataValue("Item_0"), $("#Item_0_dataValue").val($(e).find("DV_0").text()), $("#blockHandle").val($(e).find("blockHandle").text()), setDataTagXML(e, $("#Item_0").val())) : "Fill" == t ? ($("#Item_0").val($(e).find("Item_0").text()), generateDataValue("Item_0"), $("#Item_0_dataValue").val($(e).find("DV_0").text()), $("#blockHandle").val($(e).find("blockHandle").text()), setDataTagXML(e, $("#Item_0").val()), "replace" == $("#blockHandle").val() && ($("#Item_1").val($(e).find("Item_1").text()), generateDataValue("Item_1"), $("#Item_1_dataValue").val($(e).find("DV_1").text()))) : "BlockData" == t && ($("#Item_0").val($(e).find("Item_0").text()), generateDataValue("Item_0"), $("#Item_0_dataValue").val($(e).find("DV_0").text()), $("#blockHandle").val($(e).find("blockHandle").text()))
}

function getBlockCommandXML() {
    return xml = makeTag("xpos", "#xpos", !0), xml += makeTag("ypos", "#ypos", !0), xml += makeTag("zpos", "#zpos", !0), xml += makeTag("expos", "#expos", !1), xml += makeTag("eypos", "#eypos", !1), xml += makeTag("ezpos", "#ezpos", !1), "ReplaceItemBlock" == $("#commandType").val() ? (xml += makeTag("slotNo", "#slotNo", !0), xml += getChestSlotItemsXML("#itemTag", 0)) : "SetBlock" == $("#commandType").val() ? (xml += makeTag("Item_0", "#Item_0", !0), xml += makeTag("DV_0", "#Item_0_dataValue", !0), xml += makeTag("blockHandle", "#blockHandle", !0), xml += getDataTagXML($("#Item_0").val())) : "Fill" == $("#commandType").val() ? (xml += makeTag("Item_0", "#Item_0", !0), xml += makeTag("DV_0", "#Item_0_dataValue", !0), xml += makeTag("blockHandle", "#blockHandle", !0), "replace" == $("#blockHandle").val() && (xml += makeTag("Item_1", "#Item_1", !0), xml += makeTag("DV_1", "#Item_1_dataValue", !0)), xml += getDataTagXML($("#Item_0").val())) : "BlockData" == $("#commandType").val() && (xml += makeTag("Item_0", "#Item_0", !0), xml += makeTag("DV_0", "#Item_0_dataValue", !0), xml += getDataTagXML($("#Item_0").val())), xml
}

function getBlockCommand() {
    coords = getCoords("xpos", "ypos", "zpos", "relative");
    var e = " " + coords[0] + " " + coords[1] + " " + coords[2];
    return "ReplaceItemBlock" == $("#commandType").val() ? (e = "replaceitem block" + e + " slot.container.", $("#slotNo").val().length > 0 ? e += $("#slotNo").val() : e += "0", tag = getChestSlotItems("#itemTag", 0), tag = tag.replace(",Items:[{Slot:0,id:", ""), e += " " + tag.substr(0, tag.indexOf(",")), count = tag.substr(tag.indexOf(",Count:") + 7), dataTag = "", -1 != count.indexOf(",tag") ? (dataTag = count.substr(count.indexOf("tag:{") + 4), dataTag = dataTag.substr(0, dataTag.lastIndexOf("}]")), count = count.substr(0, count.indexOf(",tag"))) : count = count.substr(0, count.indexOf("}]")), e += " " + count, -1 != tag.indexOf("Damage") ? (tag = tag.substr(tag.indexOf(",Damage:") + 8, tag.indexOf(",Count")), e += " " + tag.substr(0, tag.indexOf(",Count"))) : e += " 0", e += " " + dataTag) : "SetBlock" == $("#commandType").val() ? (e = "setblock" + e, e += " minecraft:" + $("#Item_0").val(), e += " " + getDataValue("Item_0"), e += " " + $("#blockHandle").val(), e += " " + getDataTag($("#Item_0").val())) : "Fill" == $("#commandType").val() ? (e = "fill" + e, coords = getCoords("expos", "eypos", "ezpos", "relative"), e += " " + coords[0] + " " + coords[1] + " " + coords[2], e += " minecraft:" + $("#Item_0").val(), e += " " + getDataValue("Item_0"), e += " " + $("#blockHandle").val(), "replace" == $("#blockHandle").val() && "unset" != $("#Item_1").val() && (e += " minecraft:" + $("#Item_1").val(), e += " " + getDataValue("Item_1")), e += " " + getDataTag($("#Item_0").val())) : "BlockData" == $("#commandType").val() && (e = "blockdata" + e + " " + getDataTag($("#Item_0").val())), e
}

function getDataValue(e) {
    return $("#" + e + "_dataValue").length ? $("#" + e + "_dataValue").val() : 0
}

function endBlockCoordsForFill(e) {
    return "Fill" == e ? " " + llEndBlockCoords + ": X" + makeInputText("expos", ttBlockEX, "inputSmall", "onKeyUp='generateSummon()'") + " Y" + makeInputText("eypos", ttBlockEY, "inputSmall", "onKeyUp='generateSummon()'") + " Z" + makeInputText("ezpos", ttBlockEZ, "inputSmall", "onKeyUp='generateSummon()'") : ""
}

function makeBlockHandlingFill() {
    return "<span class='entityLabelBig'>" + llBlockHandling + ": </span>" + makeInputSelect("blockHandle", ttFillBlockhandling, "", "onChange='blockHandlingForReplace()'", ["replace", "destroy", "hollow", "keep", "outline"])
}

function blockHandlingForReplace() {
    "replace" == $("#blockHandle").val() ? $("#replaceOptions").html("<span class='entityLabelBig'>" + llReplaceBlock + ": </span>" + makeSelectTileID("Item_1")) : $("#replaceOptions").html(""), generateSummon()
}

function makeSelectTileIDForBlockData(e) {
    var t = makeTileSearch(e);
    t += "<select id='" + e + "' title=\"" + ttTileSelect + '" onChange="generateDataValue(\'' + e + "')\">", "Item_1" == e && (t += "<option value='unset'>Replace Everything</option>");
    for (var a = 0; a < tileIDs.length; a++) 3 == tileIDs[a].length && -1 != tileIDs[a][2].indexOf("E") && (t += "<option value='" + tileIDs[a][0] + "'>" + tileIDs[a][1] + "</option>");
    return t += "</select><div id='" + e + "_dataValueDiv'></div>"
}

function makeSelectTileID(e) {
    var t = makeTileSearch(e);
    for (t += "<select id='" + e + "' title=\"" + ttTileSelect + '" onChange="generateDataValue(\'' + e + "')\">", "Item_1" == e && (t += "<option value='unset'>Replace Everything</option>"), i = 0; i < tileIDs.length; i++) t += "<option value='" + tileIDs[i][0] + "'>" + tileIDs[i][1] + "</option>";
    return t += "</select><div id='" + e + "_dataValueDiv'></div>"
}

function setDataTagXML(e, t) {
    if (setTextOld(e, "customName", "#customName"), setTextOld(e, "lock", "#lock"), -1 != t.indexOf("furnace")) setTextOld(e, "BurnTime", "#BurnTime"), setTextOld(e, "CookTime", "#CookTime"), setTextOld(e, "CookTimeTotal", "#CookTimeTotal"), setChestSlotItems(e, 0);
    else if ("bed" == t) setTextOld(e, "color", "#color");
    else if ("chest" == t) setTextOld(e, "LootTable", "#LootTable"), setChestSlotItems(e, 0);
    else if (-1 != t.indexOf("_shulker_box")) setChestSlotItems(e, 0);
    else if ("dropper" == t) setChestSlotItems(e, 0);
    else if ("hopper" == t) setTextOld(e, "TransferCooldown", "#TransferCooldown"), setTextOld(e, "LootTable", "#LootTable"), setChestSlotItems(e, 0);
    else if ("dispenser" == t) setChestSlotItems(e, 0);
    else if ("trapped_chest" == t) setChestSlotItems(e, 0);
    else if ("bed" == t);
    else if ("brewing_stand" == t) setChestSlotItems(e, 0), $(e).find("Fuel").length && setTextOld(e, "Fuel", "#Fuel");
    else if ("wall_sign" == t || "standing_sign" == t) {
        for (tl = 1; tl <= 4; tl++) setSelect(e, "signMode" + tl, "#signMode" + tl, !0), setTextOld(e, "objective" + tl, "#objective" + tl), setTextOld(e, "textLine" + tl, "#textLine" + tl), setTextOld(e, "textLineColor" + tl, "#textLineColor" + tl), setCheckbox(e, "bold" + tl, "#bold" + tl), setCheckbox(e, "italic" + tl, "#italic" + tl), setCheckbox(e, "underlined" + tl, "#underlined" + tl), setCheckbox(e, "strikethrough" + tl, "#strikethrough" + tl), setCheckbox(e, "obfuscated" + tl, "#obfuscated" + tl), setTextOld(e, "command" + tl, "#command" + tl);
        makeCommandStatsXML(e)
    } else "command_block" == t || "repeating_command_block" == t || "chain_command_block" == t ? ($(e).find("auto").length && setTextOld(e, "auto", "#auto"), $(e).find("powered").length && setTextOld(e, "powered", "#powered"), $(e).find("conditionMet").length && setTextOld(e, "conditionMet", "#conditionMet"), $(e).find("TrackOutput").length && setTextOld(e, "TrackOutput", "#TrackOutput"), $(e).find("UpdateLastExecution").length && setTextOld(e, "UpdateLastExecution", "#UpdateLastExecution"), setTextOld(e, "Command", "#Command"), setCheckbox(e, "EscapeQuotes", "#EscapeQuotes"), setTextOld(e, "SuccessCount", "#SuccessCount"), setTextOld(e, "LastOutput", "#LastOutput"), makeCommandStatsXML(e)) : "structure_block" == t ? ($(e).find("powered").length && setTextOld(e, "powered", "#powered"), $(e).find("showair").length && setTextOld(e, "showair", "#showair"), $(e).find("showboundingbox").length && setTextOld(e, "showboundingbox", "#showboundingbox"), setTextOld(e, "integrity", "#integrity"), setTextOld(e, "seed", "#seed")) : "standing_banner" == t || "wall_banner" == t ? setTextOld(e, "Banner_bannerCode", "#Banner_bannerCode") : "beacon" == t ? (setTextOld(e, "beaconLevel", "#beaconLevel"), setTextOld(e, "primaryEffect", "#primaryEffect"), setTextOld(e, "secondaryEffect", "#secondaryEffect")) : -1 != t.indexOf("_comparator") ? setTextOld(e, "outputSignal", "#outputSignal") : "flower_pot" == t ? setTextOld(e, "pot_item", "#pot_item") : "mob_spawner" == t ? (setTextOld(e, "SpawnCount", "#SpawnCount"), setTextOld(e, "SpawnRange", "#SpawnRange"), setTextOld(e, "RequiredPlayerRange", "#RequiredPlayerRange"), setTextOld(e, "MaxNearbyEntities", "#MaxNearbyEntities"), setTextOld(e, "Delay", "#Delay"), setTextOld(e, "MinSpawnDelay", "#MinSpawnDelay"), setTextOld(e, "MaxSpawnDelay", "#MaxSpawnDelay"), removeSpawnPotential(0), $("spawnPot", e).each(function(e) {
        addSpawnPotential(), setTextOld(this, "Weight", "#Weight_" + e), setTextOld(this, "spawnXpos", "#spawnXpos" + e), setTextOld(this, "spawnYpos", "#spawnYpos" + e), setTextOld(this, "spawnZpos", "#spawnZpos" + e), setTextOld(this, "SpawnData", "#SpawnData_" + e)
    })) : "noteblock" == t ? (setTextOld(e, "Note", "#Note"), $(e).find("powered").length && setTextOld(e, "powered", "#powered")) : "jukebox" == t ? setChestSlotItems(e, 0) : "skull" == t ? (setTextOld(e, "SkullType", "#SkullType", !0), 3 == $("#SkullType").prop("selectedIndex") && (playerHeadOptions(), setTextOld(e, "skullselect_player", "#skullselect_player", !0), loadSkullPlayerName("skullselect_player", "player_skull"), setTextOld(e, "player_skull", "#player_skull")), setTextOld(e, "Rotation", "#Rotation")) : "chorus_flower" == t ? setTextOld(e, "Age", "#Age") : "chorus_plant" == t ? (setCheckbox(e, "north", "#north"), setCheckbox(e, "south", "#south"), setCheckbox(e, "east", "#east"), setCheckbox(e, "west", "#west"), setCheckbox(e, "up", "#up"), setCheckbox(e, "down", "#down")) : "end_gateway" == t && (setTextOld(e, "X", "#X"), setTextOld(e, "Y", "#Y"), setTextOld(e, "Z", "#Z"), setTextOld(e, "Age", "#Age"), setCheckbox(e, "ExactTeleport", "#ExactTeleport"))
}

function getDataTagXML(e) {
    var t = "";
    if (t += makeTag("customName", "#customName", !1), t += makeTag("lock", "#lock", !1), -1 != e.indexOf("furnace")) t += makeTag("BurnTime", "#BurnTime", !1), t += makeTag("CookTime", "#CookTime", !1), t += makeTag("CookTimeTotal", "#CookTimeTotal", !1), t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if ("bed" == e) t += makeTag("color", "#color", !1);
    else if ("chest" == e) t += makeTag("LootTable", "#LootTable", !1), t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if (-1 != e.indexOf("_shulker_box")) t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if ("dropper" == e) t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if ("hopper" == e) t += makeTag("TransferCooldown", "#TransferCooldown", !1), t += makeTag("LootTable", "#LootTable", !1), t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if ("dispenser" == e) t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if ("trapped_chest" == e) t += getChestSlotItemsXML("#dataTagOptions", 0);
    else if ("brewing_stand" == e) t += getChestSlotItemsXML("#dataTagOptions", 0), t += makeTag("Fuel", "#Fuel", !1);
    else if ("wall_sign" == e || "standing_sign" == e) {
        for (tl = 1; tl <= 4; tl++) t += makeTag("signMode" + tl, "#signMode" + tl, !1), t += makeTag("textLine" + tl, "#textLine" + tl, !1), t += makeTag("objective" + tl, "#objective" + tl, !1), t += makeTag("textLineColor" + tl, "#textLineColor" + tl, !1), t += makeCheckboxTag("bold" + tl, "#bold" + tl, !1), t += makeCheckboxTag("italic" + tl, "#italic" + tl, !1), t += makeCheckboxTag("underlined" + tl, "#underlined" + tl, !1), t += makeCheckboxTag("strikethrough" + tl, "#strikethrough" + tl, !1), t += makeCheckboxTag("obfuscated" + tl, "#obfuscated" + tl, !1), t += makeTag("command" + tl, "#command" + tl, !1);
        t += getCommandStatsXML()
    } else "command_block" == e || "repeating_command_block" == e || "chain_command_block" == e ? (t += makeTag("auto", "#auto", !1), t += makeTag("powered", "#powered", !1), t += makeTag("conditionMet", "#conditionMet", !1), t += makeTag("UpdateLastExecution", "#UpdateLastExecution", !1), t += makeTag("TrackOutput", "#TrackOutput", !1), t += makeTag("Command", "#Command", !1), t += makeCheckboxTag("EscapeQuotes", "#EscapeQuotes", !1), t += makeTag("SuccessCount", "#SuccessCount", !1), t += makeTag("LastOutput", "#LastOutput", !1), t += getCommandStatsXML()) : "structure_block" == e ? (t += makeTag("powered", "#powered", !1), t += makeTag("showair", "#showair", !1), t += makeTag("showboundingbox", "#showboundingbox", !1), t += makeTag("integrity", "#integrity", !1), t += makeTag("seed", "#seed", !1)) : "standing_banner" == e || "wall_banner" == e ? t += makeTag("Banner_bannerCode", "#Banner_bannerCode", !1) : "beacon" == e ? (t += makeTag("beaconLevel", "#beaconLevel", !1), t += makeTag("primaryEffect", "#primaryEffect", !1), t += makeTag("secondaryEffect", "#secondaryEffect", !1)) : -1 != e.indexOf("_comparator") ? t += makeTag("outputSignal", "#outputSignal", !1) : "flower_pot" == e ? t += makeTag("pot_item", "#pot_item", !1) : "mob_spawner" == e ? (t += makeTag("SpawnCount", "#SpawnCount", !1), t += makeTag("SpawnRange", "#SpawnRange", !1), t += makeTag("RequiredPlayerRange", "#RequiredPlayerRange", !1), t += makeTag("MaxNearbyEntities", "#MaxNearbyEntities", !1), t += makeTag("Delay", "#Delay", !1), t += makeTag("MinSpawnDelay", "#MinSpawnDelay", !1), t += makeTag("MaxSpawnDelay", "#MaxSpawnDelay", !1), potentials = "", $("#spawnPotentials > .spawnPot").each(function() {
        var e = this.id.substr(this.id.indexOf("_") + 1);
        potentials += "<spawnPot>", potentials += makeTag("SpawnData", "#SpawnData_" + e, !1), potentials += makeTag("Weight", "#Weight_" + e, !1), potentials += makeTag("spawnXpos", "#spawnXpos" + e, !1), potentials += makeTag("spawnYpos", "#spawnYpos" + e, !1), potentials += makeTag("spawnZpos", "#spawnZpos" + e, !1), potentials += "</spawnPot>"
    }), potentials.length > 0 && (t += "<Potentials>" + potentials + "</Potentials>")) : "noteblock" == e ? (t += makeTag("Note", "#Note", !1), t += makeTag("powered", "#powered", !1)) : "jukebox" == e ? t += getChestSlotItemsXML("#dataTagOptions", 0) : "skull" == e ? (t += makeTag("SkullType", "#SkullType", !1), t += makeTag("player_skull", "#player_skull", !1), t += makeTag("skullselect_player", "#skullselect_player", !1), t += makeTag("Rotation", "#Rotation", !1)) : "chorus_flower" == e ? t += makeTag("Age", "#Age", !1) : "chorus_plant" == e ? (t += makeCheckboxTag("north", "#north", !1), t += makeCheckboxTag("south", "#south", !1), t += makeCheckboxTag("east", "#east", !1), t += makeCheckboxTag("west", "#west", !1), t += makeCheckboxTag("up", "#up", !1), t += makeCheckboxTag("down", "#down", !1)) : "end_gateway" == e && (t += makeTag("X", "#X", !1), t += makeTag("Y", "#Y", !1), t += makeTag("Z", "#Z", !1), t += makeTag("Age", "#Age", !1), t += makeCheckboxTag("ExactTeleport", "#ExactTeleport", !1));
    return t
}

function getDataTag(e) {
    var t = "";
    if (-1 == e.indexOf("furnace") && "chest" != e && -1 == e.indexOf("_shulker_box") && "dropper" != e && "hopper" != e && "dispenser" != e && "enchanting_table" != e && "trapped_chest" != e && "brewing_stand" != e && -1 == e.indexOf("command_block") || ($("#customName").val().length > 0 && (t += ",CustomName:" + $("#customName").val()), "enchanting_table" != e && -1 == e.indexOf("command_block") && $("#lock").val().length > 0 && (t += ',Lock:"' + $("#lock").val() + '"')), -1 != e.indexOf("furnace")) $("#BurnTime").val().length > 0 && (t += ",BurnTime:" + $("#BurnTime").val()), $("#CookTime").val().length > 0 && (t += ",CookTime:" + $("#CookTime").val()), $("#CookTimeTotal").val().length > 0 && (t += ",CookTimeTotal:" + $("#CookTimeTotal").val()), t += getChestSlotItems("#dataTagOptions", 0);
    else if ("bed" == e) t += ",color:" + $("#color").val();
    else if ("chest" == e) $("#LootTable").val().length > 0 && (t += ',LootTable:"' + $("#LootTable").val() + '"'), t += getChestSlotItems("#dataTagOptions", 0);
    else if (-1 != e.indexOf("_shulker_box")) t += getChestSlotItems("#dataTagOptions", 0);
    else if ("dropper" == e) t += getChestSlotItems("#dataTagOptions", 0);
    else if ("hopper" == e) $("#TransferCooldown").val().length > 0 && (t += ",TransferCooldown:" + $("#TransferCooldown").val()), $("#LootTable").val().length > 0 && (t += ',LootTable:"' + $("#LootTable").val() + '"'), t += getChestSlotItems("#dataTagOptions", 0);
    else if ("dispenser" == e) t += getChestSlotItems("#dataTagOptions", 0);
    else if ("trapped_chest" == e) t += getChestSlotItems("#dataTagOptions", 0);
    else if ("brewing_stand" == e) t += getChestSlotItems("#dataTagOptions", 0), $("#Fuel").val().length > 0 && (t += ",Fuel:" + $("#Fuel").val() + "b");
    else if ("wall_sign" == e || "standing_sign" == e) {
        for (tl = 1; tl <= 4; tl++) "text" == $("#signMode" + tl).val() ? t += ",Text" + tl + ':"{\\"text\\":\\"' + $("#textLine" + tl).val() + '\\"' : "selector" == $("#signMode" + tl).val() ? t += ",Text" + tl + ':"{\\"selector\\":\\"' + $("#textLine" + tl).val() + '\\"' : "score" == $("#signMode" + tl).val() && (t += ",Text" + tl + ':"{\\"score\\":{\\"name\\":\\"' + $("#textLine" + tl).val() + '\\",\\"objective\\":\\"' + $("#objective" + tl).val() + '\\"}'), "black" != $("#textLineColor" + tl).val() && (t += ',\\"color\\":\\"' + $("#textLineColor" + tl).val() + '\\"'), t += $("#bold" + tl).is(":checked") ? ',\\"bold\\":true' : "", t += $("#italic" + tl).is(":checked") ? ',\\"italic\\":true' : "", t += $("#underlined" + tl).is(":checked") ? ',\\"underlined\\":true' : "", t += $("#strikethrough" + tl).is(":checked") ? ',\\"strikethrough\\":true' : "", t += $("#obfuscated" + tl).is(":checked") ? ',\\"obfuscated\\":true' : "", $("#command" + tl).val().length && (t += ',\\"clickEvent\\":{\\"action\\":\\"run_command\\",\\"value\\":\\"' + $("#command" + tl).val() + '\\"}'), t += '}"';
        t += getCommandStats()
    } else if ("command_block" == e || "repeating_command_block" == e || "chain_command_block" == e) 0 == $("#auto").val() ? t += ",auto:0b" : 1 == $("#auto").val() && (t += ",auto:1b"), 0 == $("#powered").val() ? t += ",powered:0b" : 1 == $("#powered").val() && (t += ",powered:1b"), 0 == $("#conditionMet").val() ? t += ",conditionMet:0b" : 1 == $("#conditionMet").val() && (t += ",conditionMet:1b"), 0 == $("#UpdateLastExecution").val() ? t += ",UpdateLastExecution:0b" : 1 == $("#UpdateLastExecution").val() && (t += ",UpdateLastExecution:1b"), $("#Command").val().length > 0 && ($("#EscapeQuotes").is(":checked") ? t += ',Command:"' + replaceAll('"', '\\"', $("#Command").val()) + '"' : t += ",Command:" + $("#Command").val()), $("#SuccessCount").val().length > 0 && (t += ",SuccessCount:" + $("#SuccessCount").val()), $("#LastOutput").val().length > 0 && (t += ",LastOutput:" + $("#LastOutput").val()), 0 == $("#TrackOutput").val() ? t += ",TrackOutput:0b" : 1 == $("#TrackOutput").val() && (t += ",TrackOutput:1b"), t += getCommandStats();
    else if ("structure_block" == e) 0 == $("#powered").val() ? t += ",powered:0b" : 1 == $("#powered").val() && (t += ",powered:1b"), 0 == $("#showair").val() ? t += ",showair:0b" : 1 == $("#showair").val() && (t += ",showair:1b"), 0 == $("#showboundingbox").val() ? t += ",showboundingbox:0b" : 1 == $("#showboundingbox").val() && (t += ",showboundingbox:1b"), $("#integrity").val().length > 0 && (t += ",integrity:" + $("#integrity").val() + "f"), $("#seed").val().length > 0 && (t += ",seed:" + $("#seed").val());
    else if ("standing_banner" == e || "wall_banner" == e) $("#Banner_bannerCode").val().length && (t += "," + (a = $("#Banner_bannerCode").val()).substring(a.indexOf("BlockEntityTag:{") + 16, a.lastIndexOf("}") - 1));
    else if ("beacon" == e) $("#beaconLevel").val().length > 0 && (t += ",Levels:" + $("#beaconLevel").val()), $("#primaryEffect").val().length > 0 && 0 != $("#primaryEffect").val() && (t += ",Primary:" + $("#primaryEffect").val()), $("#secondaryEffect").val().length > 0 && 0 != $("#secondaryEffect").val() && (t += ",Secondary:" + $("#secondaryEffect").val());
    else if (-1 != e.indexOf("_comparator")) $("#outputSignal").val().length > 0 && (t += ",OutputSignal:" + $("#outputSignal").val());
    else if ("flower_pot" == e) {
        var a = getItemTag($("#pot_item").val());
        t += "," + (a = (a = a.replace("id:", "Item:")).replace(",Damage:", ",Data:"))
    } else "mob_spawner" == e ? ($("#SpawnCount").val().length > 0 && (t += ",SpawnCount:" + $("#SpawnCount").val()), $("#SpawnRange").val().length > 0 && (t += ",SpawnRange:" + $("#SpawnRange").val()), $("#RequiredPlayerRange").val().length > 0 && (t += ",RequiredPlayerRange:" + $("#RequiredPlayerRange").val()), $("#MaxNearbyEntities").val().length > 0 && (t += ",MaxNearbyEntities:" + $("#MaxNearbyEntities").val()), $("#Delay").val().length > 0 && (t += ",Delay:" + $("#Delay").val()), $("#MinSpawnDelay").val().length > 0 && (t += ",MinSpawnDelay:" + $("#MinSpawnDelay").val()), $("#MaxSpawnDelay").val().length > 0 && (t += ",MaxSpawnDelay:" + $("#MaxSpawnDelay").val()), potentials = "", firstSpawn = "", count = 0, $("#spawnPotentials > .spawnPot").each(function() {
        var e = this.id.substr(this.id.indexOf("_") + 1);
        summon = $("#SpawnData_" + e).val(), summon.length > 0 && (count++, pos = getSpawnPosition("spawnXpos" + e, "spawnYpos" + e, "spawnZpos" + e), summon = summon.substr(summon.indexOf("summon") + 7), -1 == summon.indexOf("{") && -1 == summon.indexOf("}") ? pos.length > 0 && (summon += "{" + pos.substr(1) + "}") : (summon = summon.substr(0, summon.length - 1), summon += pos + "}"), entity = summon.substr(0, summon.indexOf(" ")), -1 != summon.indexOf("{") ? (summon = ",Properties:" + summon.substr(summon.indexOf("{"), summon.lastIndexOf("}") + 1), 0 == firstSpawn.length && (firstSpawn = summon.replace(",Properties:{", ',SpawnData:{id:"minecraft:' + entity + '",'))) : (summon = "", 0 == firstSpawn.length && (firstSpawn = ',SpawnData:{id:"minecraft:' + entity + '"}')), "" == summon ? potentials += ",{Weight:" + $("#Weight_" + e).val() + ',Entity:{id:"minecraft:' + entity + '"}}' : potentials += ",{Weight:" + $("#Weight_" + e).val() + ',Entity:{id:"minecraft:' + entity + '"' + summon.replace("Properties:{", "") + "}")
    }), count > 1 ? t += firstSpawn + ",SpawnPotentials:[" + potentials.substr(1) + "]" : count > 0 && (t += firstSpawn)) : "noteblock" == e ? ($("#Note").val().length > 0 && (t += ",note:" + $("#Note").val()), 0 == $("#powered").val() ? t += ",powered:0b" : 1 == $("#powered").val() && (t += ",powered:1b")) : "jukebox" == e ? t += (a = (a = getChestSlotItems("#dataTagOptions", 0)).replace(",Items:[{Slot:0,", ",RecordItem:{")).substr(0, a.lastIndexOf("]")) : "skull" == e ? (3 == $("#SkullType").prop("selectedIndex") ? $("#player_skull").length && $("#player_skull").val().length > 0 ? -1 != $("#player_skull").val().indexOf("SkullOwner:{Id:") ? (pSkull = getSkullNonPlayerHead($("#player_skull").val().trim()), pSkull = pSkull.replace("SkullOwner", "Owner"), t += "," + pSkull + ",SkullType:3") : t += ",ExtraType:" + $("#player_skull").val() + ",SkullType:3" : t += ",ExtraType:" + $("#skullselect_player").val() + ",SkullType:3" : t += ",SkullType:" + $("#SkullType").prop("selectedIndex"), 1 == $("#Item_0_dataValue").val() && (t += ",Rot:" + $("#Rotation").val())) : "chorus_flower" == e ? $("#Age").val().length > 0 && (t += ",Age:" + $("#Age").val()) : "chorus_plant" == e ? (t += ",north:" + $("#north").is(":checked"), t += ",south:" + $("#south").is(":checked"), t += ",east:" + $("#east").is(":checked"), t += ",west:" + $("#west").is(":checked"), t += ",up:" + $("#up").is(":checked"), t += ",down:" + $("#down").is(":checked")) : "end_gateway" == e && (t += ",ExitPortal:{X:" + $("#X").val() + ",Y:" + $("#Y").val() + ",Z:" + $("#Z").val() + "}", $("#ExactTeleport").is(":checked") && (t += ",ExactTeleport:1"), $("#Age").val().length > 0 && (t += ",Age:" + $("#Age").val()));
    return t.length > 0 ? "{" + t.substr(1) + "}" : t
}

function displayDataTagOptions(e, t) {
    if ($("#" + t).html(""), -1 == e.indexOf("furnace") && "chest" != e && -1 == e.indexOf("_shulker_box") && "dropper" != e && "hopper" != e && "dispenser" != e && "enchanting_table" != e && "trapped_chest" != e && "brewing_stand" != e && -1 == e.indexOf("command_block") || ($("#" + t).html("<span class='entityLabelBig'>" + llCustomName + ": </span>" + makeInputText("customName", ttCustomName, "inputLarge", "onKeyUp='generateSummon()'")), "enchanting_table" != e && -1 == e.indexOf("command_block") && $("#" + t).append("<br><span class='entityLabelBig'> " + llLock + ": </span>" + makeInputText("lock", ttLock, "inputLarge", "onKeyUp='generateSummon()'") + "<br>")), -1 != e.indexOf("furnace")) $("#" + t).append("<span class='entityLabelBig'> " + llBurnTime + ": </span>" + makeInputText("BurnTime", ttBurnTime, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llCookTime + ": </span>" + makeInputText("CookTime", ttCookTime, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llCookTimeTotal + ": </span>" + makeInputText("CookTimeTotal", ttCookTimeTotal, "inputSmall", "onKeyUp='generateSummon()'") + "<br>"), makeChestSlots(0, 2, 0, t);
    else if ("bed" == e) $("#" + t).append("<span class='entityLabelBig'>" + llBedColor + "</span>" + makeSelectWithIndex("color", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [llWhite, llOrange, llMagenta, llLightBlue, llYellow, llLime, llPink, llGray, llLightGray, llCyan, llPurple, llDarkBlue, llBrown, llGreen, llRed, llBlack], mkTT(ttBedColor)));
    else if ("chest" == e) $("#" + t).append("<span class='entityLabelBig'> " + llLootTable + ": </span>" + makeInputText("LootTable", ttLootTable, "inputBig", "onKeyUp='generateSummon()'") + "<br>"), makeChestSlots(0, 26, 0, t);
    else if (-1 != e.indexOf("_shulker_box")) makeChestSlots(0, 26, 0, t);
    else if ("dropper" == e) makeChestSlots(0, 8, 0, t);
    else if ("hopper" == e) $("#" + t).append("<span class='entityLabelBig'> " + llTransferCooldown + ": </span>" + makeInputText("TransferCooldown", ttTransferCooldown, "inputSmall", "onKeyUp='generateSummon()'") + "<br>"), $("#" + t).append("<span class='entityLabelBig'> " + llLootTable + ": </span>" + makeInputText("LootTable", ttLootTable, "inputBig", "onKeyUp='generateSummon()'") + "<br>"), makeChestSlots(0, 4, 0, t);
    else if ("dispenser" == e) makeChestSlots(0, 8, 0, t);
    else if ("trapped_chest" == e) makeChestSlots(0, 26, 0, t);
    else if ("brewing_stand" == e) $("#" + t).append("<span class='entityLabelBig'> " + llFuel + ": </span>" + makeInputText("Fuel", ttBrewingFuel, "inputSmall", "onKeyUp='generateSummon()'") + "<br>"), makeChestSlots(0, 3, 0, t);
    else if ("wall_sign" == e || "standing_sign" == e) $("#" + t).append(makeLineForSign(1) + "<br>" + makeLineForSign(2) + "<br>" + makeLineForSign(3) + "<br>" + makeLineForSign(4) + "<br><br>" + makeCommandStats()), changeSignMode(1), changeSignMode(2), changeSignMode(3), changeSignMode(4);
    else if ("command_block" == e || "repeating_command_block" == e || "chain_command_block" == e) $("#" + t).append("<br><span class='entityLabelBig'> " + llAuto + ": </span>" + makeSelectWithIndex("auto", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttAuto)) + "<br><span class='entityLabelBig'> " + llPowered + ": </span>" + makeSelectWithIndex("powered", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttPoweredCB)) + "<br><span class='entityLabelBig'> " + llConditionMet + ": </span>" + makeSelectWithIndex("conditionMet", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttConditionMet)) + "<br><span class='entityLabelBig'> " + llUpdateLastExecution + ": </span>" + makeSelectWithIndex("UpdateLastExecution", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttUpdateLastExecution)) + "<br><span class='entityLabelBig'> " + llCommand + ": </span>" + makeInputText("Command", ttCommand, "inputLarge", "onKeyUp='generateSummon()'") + mkLL("entityLabel", llEscapeQuotes) + makeCheckbox("EscapeQuotes", mkTT(ttEscapeQuotes)) + "<br><span class='entityLabelBig'> " + llSuccessCount + ": </span>" + makeInputText("SuccessCount", ttSuccessCount, "inputLarge", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llLastOutput + ": </span>" + makeInputText("LastOutput", ttLastOutput, "inputLarge", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llTrackOutput + ": </span>" + makeSelectWithIndex("TrackOutput", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttTrackOutput)) + "<br>" + makeCommandStats());
    else if ("enchanting_table" == e);
    else if ("structure_block" == e) $("#" + t).append("<span class='entityLabelBig'> " + llPowered + ": </span>" + makeSelectWithIndex("powered", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttPoweredSB)) + "<br><span class='entityLabelBig'> " + llShowAir + ": </span>" + makeSelectWithIndex("showair", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttShowAir)) + "<br><span class='entityLabelBig'> " + llShowBoundingBox + ": </span>" + makeSelectWithIndex("showboundingbox", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttShowBoundingBox)) + "<br><span class='entityLabelBig'> " + llIntegrity + ": </span>" + makeInputText("integrity", ttIntegrity, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llSeed + ": </span>" + makeInputText("seed", ttSeed, "inputSmall", "onKeyUp='generateSummon()'"));
    else if ("standing_banner" == e || "wall_banner" == e) makeBannerTagInput("Banner", "#" + t);
    else if ("beacon" == e) $("#" + t).append("<span class='entityLabelBig'> " + llBeaconLevels + ": </span>" + makeInputText("beaconLevel", ttBeaconLevels, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llPrimaryEffect + ": </span>" + makeBeaconEffectList("primaryEffect", ttBeaconEffect) + "<br><span class='entityLabelBig'> " + llSecondaryEffect + ": </span>" + makeBeaconEffectList("secondaryEffect", ttBeaconEffect));
    else if (-1 != e.indexOf("_comparator")) $("#" + t).append("<span class='entityLabelBig'> " + llOutputSignal + ": </span>" + makeInputText("outputSignal", ttOutputSignal, "inputSmall", "onKeyUp='generateSummon()'"));
    else if ("flower_pot" == e) $("#" + t).append("<span class='entityLabelBig'> " + llFlowerPot + ": </span>" + makeSelectHoldingItem("pot_item", mkTT(ttFlowerPot)));
    else if ("mob_spawner" == e) $("#" + t).append("<span class='entityLabelBig'> " + llSpawnCount + ": </span>" + makeInputText("SpawnCount", ttSpawnCount, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<br><span class='entityLabelBig'> " + llSpawnRange + ": </span>" + makeInputText("SpawnRange", ttSpawnRange, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<br><span class='entityLabelBig'> " + llRequiredPlayerRange + ": </span>" + makeInputText("RequiredPlayerRange", ttRequiredPlayerRange, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<br><span class='entityLabelBig'> " + llMaxNearbyEntities + ": </span>" + makeInputText("MaxNearbyEntities", ttMaxNearbyEntities, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<br><span class='entityLabelBig'> " + llDelay + ": </span>" + makeInputText("Delay", ttDelay, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<br><span class='entityLabelBig'> " + llMinSpawnDelay + ": </span>" + makeInputText("MinSpawnDelay", ttMinSpawnDelay, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<br><span class='entityLabelBig'> " + llMaxSpawnDelay + ": </span>" + makeInputText("MaxSpawnDelay", ttMaxSpawnDelay, "inputSmall", "onKeyUp='generateSummon()'")), $("#" + t).append("<div id='spawnPotentials'>" + makeButton(llAddSpawnPotential, "addSpawnPotential()", -1) + "</div>"), addSpawnPotential();
    else if ("noteblock" == e) $("#" + t).append("<span class='entityLabelBig'> " + llNote + ": </span>" + makeInputText("Note", ttNote, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llPowered + ": </span>" + makeSelectWithIndex("powered", [-1, 0, 1], ["Unset", "Off", "On"], mkTT(ttPoweredNote)));
    else if ("jukebox" == e) $("#" + t).append(ttJukebox + "<br>"), makeChestSlots(0, 0, 0, t);
    else if ("skull" == e) {
        for ($("#" + t).append("<span class='entityLabelBig'> " + llSkullType + ": </span>" + makeInputSelect("SkullType", ttSkullType, "", "onChange='playerHeadOptions()'", ["Skeleton", "Wither Skeleton", "Zombie Head", "Player Head", "Creeper Head", "(1.9)Dragon Head"]) + " <span id='playerHead'></span>"), $("#" + t).append("<br><span class='entityLabelBig'> " + llRotation + ": </span>" + makeInputSelect("Rotation", ttRotation, "", "onChange='generateSummon()'", [])), rotation = getDVOptions("standing_sign"), options = [], i = 0; i < rotation.length; i++) options.push('<option value="', rotation[i][0] + -8, '">', rotation[i][0] + -8 + " " + rotation[i][1], "</option>");
        $("#Rotation").html(options.join(""))
    } else "chorus_flower" == e ? $("#" + t).append("<br><span class='entityLabelBig'> " + llAge + ": </span>" + makeInputSelect("Age", ttAgeChorusFlower, "", "onChange='generateSummon()'", [0, 1, 2, 3, 4, 5]) + "</span>") : "chorus_plant" == e ? $("#" + t).append("<span class='entityLabelBig'> " + llExtendDirection + "</span><br><span class='entityLabelBig'> " + llNorth + ": </span><input type='checkbox' id='north' title='" + ttExtendDirection + "'  onClick='generateSummon()'><br><span class='entityLabelBig'>" + llSouth + "</span><input type='checkbox' id='south' title='" + ttExtendDirection + "'  onClick='generateSummon()'><br><span class='entityLabelBig'>" + llEast + "</span><input type='checkbox' id='east' title='" + ttExtendDirection + "'  onClick='generateSummon()'><br><span class='entityLabelBig'>" + llWest + "</span><input type='checkbox' id='west' title='" + ttExtendDirection + "'  onClick='generateSummon()'><br><span class='entityLabelBig'>" + llUp + "</span><input type='checkbox' id='up' title='" + ttExtendDirection + "'  onClick='generateSummon()'><br><span class='entityLabelBig'>" + llDown + "</span><input type='checkbox' id='down' title='" + ttExtendDirection + "'  onClick='generateSummon()'>") : "end_gateway" == e && $("#" + t).append("<br><span class='entityLabelBig'> " + llEndGatewayExit + " </span><br><span class='entityLabelBig'>X</span>" + makeInputText("X", ttEndGatewayExit, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'>Y</span>" + makeInputText("Y", ttEndGatewayExit, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'>Z</span>" + makeInputText("Z", ttEndGatewayExit, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'>" + llExactTeleport + "</span>" + makeInputCheckbox("ExactTeleport", ttExactTeleport, "onClick='generateSummon()'", !1) + "<br><span class='entityLabelBig'>" + llEndGatewayAge + "</span>" + makeInputText("Age", ttEndGatewayAge, "inputSmall", "onKeyUp='generateSummon()'"))
}

function makeLineForSign(e) {
    return mkLL("label", e + " " + llSignLineMode) + makeInputSelect("signMode" + e, ttSignLineMode, "", "onChange='changeSignMode(" + e + ")'", ["text", "selector", "score"]) + makeColorSelectBookText("textLineColor" + e, mkTT(ttTextColor)) + "<input type='checkbox' onclick='generateSummon()' id='bold" + e + "'>" + llBold + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='italic" + e + "'>" + llItalic + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='underlined" + e + "'>" + llUnderlined + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='strikethrough" + e + "'>" + llStrikethrough + "&nbsp;&nbsp;&nbsp;<input type='checkbox' onclick='generateSummon()' id='obfuscated" + e + "'>" + llObfuscated + "<span id='signLine" + e + "'></span>" + mkLL("label", llCommand) + makeInputText("command" + e, ttCommandSign, "inputLarge", "onKeyUp='generateSummon()'")
}

function changeSignMode(e) {
    "text" == $("#signMode" + e).val() ? $("#signLine" + e).html(mkLL("label", llTextLine) + makeInputText("textLine" + e, ttTextLine, "inputSmall", "onKeyUp='generateSummon()'")) : "selector" == $("#signMode" + e).val() ? $("#signLine" + e).html(mkLL("label", llTarget) + makeInputText("textLine" + e, ttTargetSignLine, "inputSmall", "onKeyUp='generateSummon()'")) : "score" == $("#signMode" + e).val() && $("#signLine" + e).html(mkLL("label", llTarget) + makeInputText("textLine" + e, ttTargetSignLine, "inputSmall", "onKeyUp='generateSummon()'") + mkLL("label", llObjectiveName) + makeInputText("objective" + e, ttObjectiveName, "inputSmall", "onKeyUp='generateSummon()'"))
}

function playerHeadOptions() {
    "Player Head" == $("#SkullType").val() ? $("#playerHead").html("<br><span class='entityLabelBig'>Skull Owner:</span>" + makeSkullOwnerSelect("player")) : $("#playerHead").html(""), generateSummon()
}

function addSpawnPotential() {
    for (var e = 0; $("#spawnPotential_" + e).length;) e++;
    $("#spawnPotentials").append("<div id='spawnPotential_" + e + "' class='spawnPot'><hr><span class='label'> " + llWeight + ": </span>" + makeInputTextWithValue("Weight_" + e, ttWeight, "inputSmall", "onKeyUp='generateSummon()'", 1) + "<span class='label'> " + llSpawnData + ": </span>" + makeInputText("SpawnData_" + e, ttSpawnData, "inputBig", "onKeyUp='generateSummon()'") + mkLL("entityLabelBig", llSpawnPosition) + "<b> X<input type='text' id='spawnXpos" + e + "' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttSpawnX) + "> Y<input type='text' id='spawnYpos" + e + "' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttSpawnY) + "> Z<input type='text' id='spawnZpos" + e + "' class='inputSmall' onKeyUp='generateSummon()'" + mkTT(ttSpawnZ) + "></b>" + makeButton(llRemoveSpawnPotential, "removeSpawnPotential(" + e + ")", -1) + "</div>"), generateSummon()
}

function removeSpawnPotential(e) {
    $("#spawnPotential_" + e).remove(), generateSummon()
}

function makeBeaconEffectList(e, t) {
    for (str = "<select id='" + e + "' title='" + t + "' onChange='generateSummon()'>", str += "<option value=0>None</option>", i = 0; i < statusEffects.length; i++) str += "<option value=" + statusEffects[i][0] + ">" + statusEffects[i][1] + "</option>";
    return str + "</select>"
}

function getCommandStatsXML() {
    return str = "", str += makeTag("SuccessCountName", "#SuccessCountName", !1), str += makeTag("SuccessCountObjective", "#SuccessCountObjective", !1), str += makeTag("AffectedBlocksName", "#AffectedBlocksName", !1), str += makeTag("AffectedBlocksObjective", "#AffectedBlocksObjective", !1), str += makeTag("AffectedEntitiesName", "#AffectedEntitiesName", !1), str += makeTag("AffectedEntitiesObjective", "#AffectedEntitiesObjective", !1), str += makeTag("AffectedItemsName", "#AffectedItemsName", !1), str += makeTag("AffectedItemsObjective", "#AffectedItemsObjective", !1), str += makeTag("QueryResultName", "#QueryResultName", !1), str += makeTag("QueryResultObjective", "#QueryResultObjective", !1), str
}

function getCommandStats() {
    return str = "", $("#SuccessCountName").val().length > 0 && (str += ",SuccessCountName:" + $("#SuccessCountName").val()), $("#SuccessCountObjective").val().length > 0 && (str += ",SuccessCountObjective:" + $("#SuccessCountObjective").val()), $("#AffectedBlocksName").val().length > 0 && (str += ",AffectedBlocksName:" + $("#AffectedBlocksName").val()), $("#AffectedBlocksObjective").val().length > 0 && (str += ",AffectedBlocksObjective:" + $("#AffectedBlocksObjective").val()), $("#AffectedEntitiesName").val().length > 0 && (str += ",AffectedEntitiesName:" + $("#AffectedEntitiesName").val()), $("#AffectedEntitiesObjective").val().length > 0 && (str += ",AffectedEntitiesObjective:" + $("#AffectedEntitiesObjective").val()), $("#AffectedItemsName").val().length > 0 && (str += ",AffectedItemsName:" + $("#AffectedItemsName").val()), $("#AffectedItemsObjective").val().length > 0 && (str += ",AffectedItemsObjective:" + $("#AffectedItemsObjective").val()), $("#QueryResultName").val().length > 0 && (str += ",QueryResultName:" + $("#QueryResultName").val()), $("#QueryResultObjective").val().length > 0 && (str += ",QueryResultObjective:" + $("#QueryResultObjective").val()), str.length > 0 ? ",CommandStats:{" + str.substr(1) + "}" : ""
}

function makeCommandStats() {
    return "<span class='entityLabelBig'> " + llSuccessCountName + ": </span>" + makeInputText("SuccessCountName", ttSuccessCountName, "inputSmall", "onKeyUp='generateSummon()'") + "<span class='entityLabelBig'> " + llSuccessCountObjective + ": </span>" + makeInputText("SuccessCountObjective", ttSuccessCountObjective, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llAffectedBlocksName + ": </span>" + makeInputText("AffectedBlocksName", ttAffectedBlocksName, "inputSmall", "onKeyUp='generateSummon()'") + "<span class='entityLabelBig'> " + llAffectedBlocksObjective + ": </span>" + makeInputText("AffectedBlocksObjective", ttAffectedBlocksObjective, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llAffectedEntitiesName + ": </span>" + makeInputText("AffectedEntitiesName", ttAffectedEntitiesName, "inputSmall", "onKeyUp='generateSummon()'") + "<span class='entityLabelBig'> " + llAffectedEntitiesObjective + ": </span>" + makeInputText("AffectedEntitiesObjective", ttAffectedEntitiesObjective, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llAffectedItemsName + ": </span>" + makeInputText("AffectedItemsName", ttAffectedItemsName, "inputSmall", "onKeyUp='generateSummon()'") + "<span class='entityLabelBig'> " + llAffectedItemsObjective + ": </span>" + makeInputText("AffectedItemsObjective", ttAffectedItemsObjective, "inputSmall", "onKeyUp='generateSummon()'") + "<br><span class='entityLabelBig'> " + llQueryResultName + ": </span>" + makeInputText("QueryResultName", ttQueryResultName, "inputSmall", "onKeyUp='generateSummon()'") + "<span class='entityLabelBig'> " + llQueryResultObjective + ": </span>" + makeInputText("QueryResultObjective", ttQueryResultObjective, "inputSmall", "onKeyUp='generateSummon()'")
}

function makeCommandStatsXML(e) {
    setTextOld(e, "SuccessCountName", "#SuccessCountName"), setTextOld(e, "SuccessCountObjective", "#SuccessCountObjective"), setTextOld(e, "AffectedBlocksName", "#AffectedBlocksName"), setTextOld(e, "AffectedBlocksObjective", "#AffectedBlocksObjective"), setTextOld(e, "AffectedEntitiesName", "#AffectedEntitiesName"), setTextOld(e, "AffectedEntitiesObjective", "#AffectedEntitiesObjective"), setTextOld(e, "AffectedItemsName", "#AffectedItemsName"), setTextOld(e, "AffectedItemsObjective", "#AffectedItemsObjective"), setTextOld(e, "QueryResultName", "#QueryResultName"), setTextOld(e, "QueryResultObjective", "#QueryResultObjective")
}

function updateTileSelectOptions(e) {
    var t = $("#" + e + "_search").val().toLowerCase();
    options = [];
    for (var a = 0; a < tileIDs.length; a++) 0 != t.length && -1 == tileIDs[a][0].toLowerCase().indexOf(t) && -1 == tileIDs[a][1].toLowerCase().indexOf(t) || options.push('<option value="', tileIDs[a][0], '">', tileIDs[a][1], "</option>");
    $("#" + e).html(options.join("")), generateDataValue(e)
}

function makeTileSearch(e) {
    return "<input type='text' onKeyUp=\"updateTileSelectOptions('" + e + "')\" class='inputBig' id='" + e + "_search' title='" + ttSearchFilter + "'>"
}

function makeBlockHandlingSetBlock() {
    return "<span class='entityLabelBig'>" + llBlockHandling + ": </span>" + makeInputSelect("blockHandle", ttSetBlockhandling, "", "onChange='generateSummon()'", ["replace", "destroy", "keep"])
}

function generateDataValue(e) {
    var t = $("#" + e).val();
    if ("planks" == t || "stone" == t || "dirt" == t || "sand" == t || "leaves" == t || "leaves2" == t || "carpet" == t || "stained_hardened_clay" == t || "wool" == t || "stained_glass_pane" == t || "stained_glass" == t || "double_stone_slab" == t || "double_wooden_slab" == t || "sandstone" == t || "red_sandstone" == t || "tallgrass" == t || "red_flower" == t || "double_plant" == t || "monster_egg" == t || "sapling" == t || "stonebrick" == t || "prismarine" == t || "sponge" == t || "cobblestone_wall" == t || "concrete" == t || "concrete_powder" == t) {
        $("#" + e + "_dataValueDiv").html("<span class='entityLabelBig'>" + llDataValue + ": </span><select id='" + e + "_dataValue' onChange='generateSummon()'" + mkTT(ttDataValue) + "></select>"), options = [];
        for (var a = 0; a < items.length; a++) dv = tileDataValue(t, items[a][0]), -1 != dv && options.push('<option value="', dv, '">', dv + " " + items[a][1], "</option>");
        $("#" + e + "_dataValue").html(options.join(""))
    } else if (dvOptions = getDVOptions(t), options = [], dvOptions.length > 0) {
        for ($("#" + e + "_dataValueDiv").html("<span class='entityLabelBig'>" + llDataValue + ": </span><select id='" + e + "_dataValue' onChange='generateSummon()'" + mkTT(ttDataValue) + "></select>"), a = 0; a < dvOptions.length; a++) 2 == dvOptions[a].length ? options.push('<option value="', dvOptions[a][0], '">', dvOptions[a][0] + " " + dvOptions[a][1], "</option>") : options.push('<option value="', dvOptions[a], '">', dvOptions[a], "</option>");
        $("#" + e + "_dataValue").html(options.join(""))
    } else options.push('<option value="', 0, '">', 0, "</option>"), $("#" + e + "_dataValue").html(options.join(""));
    "Item_0" == e && ($("#" + e + "_dataValueDiv").append("<div id='dataTagOptions'></div>"), displayDataTagOptions(t, "dataTagOptions")), generateSummon(e)
}

function getDVOptions(e) {
    return "lava" == e || "water" == e ? [0, 1, 2, 3, 4, 5, 6, 7] : "log" == e ? [
        [0, "Oak wood facing up/down"],
        [1, "Spruce wood facing up/down"],
        [2, "Birch wood facing up/down"],
        [3, "Jungle wood facing up/down"],
        [4, "Oak wood facing East/West"],
        [5, "Spruce wood facing East/West"],
        [6, "Birch wood facing East/West"],
        [7, "Jungle wood facing East/West"],
        [8, "Oak wood facing North/South"],
        [9, "Spruce wood facing North/South"],
        [10, "Birch wood facing North/South"],
        [11, "Jungle wood facing North/South"],
        [12, "Oak wood with only bark"],
        [13, "Spruce wood with only bark"],
        [14, "Birch wood with only bark"],
        [15, "Jungle wood with only bark"]
    ] : "bed" == e ? [
        [0, "Bottom of bed (foot facing north)"],
        [1, "Bottom of bed (foot facing east)"],
        [2, "Bottom of bed (foot facing south)"],
        [3, "Bottom of bed (foot facing west)"],
        [8, "Top of bed (foot facing north)"],
        [9, "Top of bed (foot facing east)"],
        [10, "Top of bed (foot facing south)"],
        [11, "Top of bed (foot facing west)"]
    ] : "log2" == e ? [
        [0, "Acacia wood facing up/down"],
        [1, "Dark Oak wood facing up/down"],
        [4, "Acacia wood facing East/West"],
        [5, "Dark Oak wood facing East/West"],
        [8, "Acacia wood facing North/South"],
        [9, "Dark Oak wood facing North/South"],
        [12, "Acacia wood with only bark"],
        [13, "Dark Oak wood with only bark"]
    ] : -1 != e.indexOf("torch") ? [
        [1, "Facing east (attached to a block to its west)"],
        [2, "Facing west (attached to a block to its east)"],
        [3, "Facing south (attached to a block to its north)"],
        [4, "Facing north (attached to a block to its south)"],
        [5, "Facing up (attached to a block beneath it)"]
    ] : "double_stone_slab2" == e ? [
        [0, "Double Red Sandstone Slab"],
        [8, "Smooth Double Red Sandstone Slab"]
    ] : "stone_slab" == e ? [
        [0, "Stone Slab"],
        [1, "Sandstone Slab"],
        [2, "(Stone) Wooden Slab"],
        [3, "Cobblestone Slab"],
        [4, "Bricks Slab"],
        [5, "Stone Brick Slab"],
        [6, "Nether Brick Slab"],
        [7, "Quartz Slab"],
        [8, "Upper Stone Slab"],
        [9, "Upper Sandstone Slab"],
        [10, "Upper (Stone) Wooden Slab"],
        [11, "Upper Cobblestone Slab"],
        [12, "Upper Bricks Slab"],
        [13, "Upper Stone Brick Slab"],
        [14, "Upper Nether Brick Slab"],
        [15, "Upper Quartz Slab"]
    ] : "stone_slab2" == e ? [
        [0, "Red Sandstone Slab"],
        [8, "Upper Red Sandstone Slab"]
    ] : "wooden_slab" == e ? [
        [0, "Oak Wood Slab"],
        [1, "Spruce Wood Slab"],
        [2, "Birch Wood Slab"],
        [3, "Jungle Wood Slab"],
        [4, "Acacia Wood Slab"],
        [5, "Dark Oak Wood Slab"],
        [8, "Upper Oak Wood Slab"],
        [9, "Upper Spruce Wood Slab"],
        [10, "Upper Birch Wood Slab"],
        [11, "Upper Jungle Wood Slab"],
        [12, "Upper Acacia Wood Slab"],
        [13, "Upper Dark Oak Wood Slab"]
    ] : "sticky_piston" == e || "piston" == e || "piston_head" == e || "dropper" == e || "dispenser" == e ? [
        [0, "Down"],
        [1, "Up"],
        [2, "north"],
        [3, "south"],
        [4, "west"],
        [5, "east"]
    ] : -1 != e.indexOf("_shulker_box") ? [
        [0, "down"],
        [1, "up"],
        [2, "north"],
        [3, "south"],
        [4, "west"],
        [5, "east"]
    ] : "hopper" == e ? [
        [0, "Down"],
        [2, "north"],
        [3, "south"],
        [4, "west"],
        [5, "east"]
    ] : -1 != e.indexOf("_stairs") ? [
        [0, "East"],
        [1, "West"],
        [2, "South"],
        [3, "North"],
        [4, "East Upside-down"],
        [5, "West Upside-down"],
        [6, "South Upside-down"],
        [7, "North Upside-down"]
    ] : "carrots" == e || "potatoes" == e || "wheat" == e || "farmland" == e || "pumpkin_stem" == e || "melon_stem" == e ? [0, 1, 2, 3, 4, 5, 6, 7] : "standing_banner" == e || "standing_sign" == e ? [
        [0, "south"],
        [1, "south-southwest"],
        [2, "southwest"],
        [3, "west-southwest"],
        [4, "west"],
        [5, "west-northwest"],
        [6, "northwest"],
        [7, "north-northwest"],
        [8, "north"],
        [9, "north-northeast"],
        [10, "northeast"],
        [11, "east-northeast"],
        [12, "east"],
        [13, "east-southeast"],
        [14, "southeast"],
        [15, "south-southeast"]
    ] : "wall_banner" == e || "wall_sign" == e || "ladder" == e || "chest" == e || -1 != e.indexOf("furnace") || "trapped_chest" == e || "ender_chest" == e ? [
        [2, "north"],
        [3, "south"],
        [4, "west"],
        [5, "east"]
    ] : "rail" == e ? [
        [0, "Straight rail connecting to the north and south"],
        [1, "Straight rail connecting to the east and west"],
        [2, "Sloped rail ascending to the east"],
        [3, "Sloped rail ascending to the west"],
        [4, "Sloped rail ascending to the north"],
        [5, "Sloped rail ascending to the south"],
        [6, "Curved rail connecting to the south and east"],
        [7, "Curved rail connecting to the south and west"],
        [8, "Curved rail connecting to the north and west"],
        [9, "Curved rail connecting to the north and east"]
    ] : "golden_rail" == e || "detector_rail" == e || "activator_rail" == e ? [
        [0, "flat track going north-south"],
        [1, "flat track going west-east"],
        [2, "sloped track ascending to the east"],
        [3, "sloped track ascending to the west"],
        [4, "sloped track ascending to the north"],
        [5, "sloped track ascending to the south"]
    ] : "lever" == e ? [
        [0, "Lever on block bottom points east when off"],
        [1, "Lever on block side facing east"],
        [2, "Lever on block side facing west"],
        [3, "Lever on block side facing south"],
        [4, "Lever on block side facing north"],
        [5, "Lever on block top points south when off"],
        [6, "Lever on block top points east when off"],
        [7, "Lever on block bottom points south when off"],
        [8, "Lever on block bottom points east when off (active)"],
        [9, "Lever on block side facing east (active)"],
        [10, "Lever on block side facing west (active)"],
        [11, "Lever on block side facing south (active)"],
        [12, "Lever on block side facing north (active)"],
        [13, "Lever on block top points south when off (active)"],
        [14, "Lever on block top points east when off (active)"],
        [15, "Lever on block bottom points south when off (active)"]
    ] : -1 != e.indexOf("pressure_plate") ? [
        [0, "Inactive"],
        [1, "Active"]
    ] : -1 != e.indexOf("_button") ? [
        [0, "Button on block bottom facing down"],
        [1, "Button on block side facing east"],
        [2, "Button on block side facing west"],
        [3, "Button on block side facing south"],
        [4, "Button on block side facing north"],
        [5, "Button on block top facing up"],
        [8, "Button on block bottom facing down (active)"],
        [9, "Button on block side facing east (active)"],
        [10, "Button on block side facing west (active)"],
        [11, "Button on block side facing south (active)"],
        [12, "Button on block side facing north (active)"],
        [13, "Button on block top facing up (active)"]
    ] : "snow_layer" == e ? [
        [0, "One layer, 2 pixels thick"],
        [1, "Two layers, 4 pixels thick"],
        [2, "Three layers, 6 pixels thick"],
        [3, "Four layers, 8 pixels thick"],
        [4, "Five layers, 10 pixels thick"],
        [5, "Six layers, 12 pixels thick"],
        [6, "Seven layers, 14 pixels thick"],
        [7, "Eight layers, 16 pixels thick"]
    ] : "cactus" == e || "reeds" == e ? [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15] : "jukebox" == e ? [
        [0, "No disc inserted"],
        [1, "Contains a disc"]
    ] : "lit_pumpkin" == e || "pumpkin" == e || "vine" == e ? [
        [0, "Facing south"],
        [1, "Facing west"],
        [2, "Facing north"],
        [3, "Facing east"]
    ] : "cake" == e ? [
        [0, "pieces eaten"],
        [1, "piece eaten"],
        [2, "pieces eaten"],
        [3, "pieces eaten"],
        [4, "pieces eaten"],
        [5, "pieces eaten"]
    ] : -1 != e.indexOf("_repeater") ? [
        [0, "Facing north, 1 tick delay"],
        [1, "Facing east, 1 tick delay"],
        [2, "Facing south, 1 tick delay"],
        [3, "Facing west, 1 tick delay"],
        [4, "Facing north, 2 tick delay"],
        [5, "Facing east, 2 tick delay"],
        [6, "Facing south, 2 tick delay"],
        [7, "Facing west, 2 tick delay"],
        [8, "Facing north, 3 tick delay"],
        [9, "Facing east, 3 tick delay"],
        [10, "Facing south, 3 tick delay"],
        [11, "Facing west, 3 tick delay"],
        [12, "Facing north, 4 tick delay"],
        [13, "Facing east, 4 tick delay"],
        [14, "Facing south, 4 tick delay"],
        [15, "Facing west, 4 tick delay"]
    ] : -1 != e.indexOf("_comparator") ? [
        [0, "Facing north"],
        [1, "Facing east"],
        [2, "Facing south"],
        [3, "Facing west"],
        [4, "Facing north, subtraction mode"],
        [5, "Facing east, subtraction mode"],
        [6, "Facing south, subtraction mode"],
        [7, "Facing west, subtraction mode"],
        [8, "Facing north, powered"],
        [9, "Facing east, powered"],
        [10, "Facing south, powered"],
        [11, "Facing west, powered"],
        [12, "Facing north, subtraction mode, powered"],
        [13, "Facing east, subtraction mode, powered"],
        [14, "Facing south, subtraction mode, powered"],
        [15, "Facing west, subtraction mode, powered"]
    ] : -1 != e.indexOf("trapdoor") ? [
        [0, "Trapdoor on the west side of a block (bottom of block)"],
        [1, "Trapdoor on the south side of a block (bottom of block)"],
        [2, "Trapdoor on the east side of a block (bottom of block)"],
        [3, "Trapdoor on the north side of a block (bottom of block)"],
        [4, "Open Trapdoor on the west side of a block (bottom of block)"],
        [5, "Open Trapdoor on the south side of a block (bottom of block)"],
        [6, "Open Trapdoor on the east side of a block (bottom of block)"],
        [7, "Open Trapdoor on the north side of a block (bottom of block)"],
        [8, "Trapdoor on the west side of a block (top of block)"],
        [9, "Trapdoor on the south side of a block (top of block)"],
        [10, "Trapdoor on the east side of a block (top of block)"],
        [11, "Trapdoor on the north side of a block (top of block)"],
        [12, "Open Trapdoor on the west side of a block (top of block)"],
        [13, "Open Trapdoor on the south side of a block (top of block)"],
        [14, "Open Trapdoor on the east side of a block (top of block)"],
        [15, "Open Trapdoor on the north side of a block (top of block)"]
    ] : -1 != e.indexOf("_mushroom_block") ? [
        [0, "Pores on all sides"],
        [1, "Cap texture on top, west and north"],
        [2, "Cap texture on top and north"],
        [3, "Cap texture on top, north and east"],
        [4, "Cap texture on top and west"],
        [5, "Cap texture on top"],
        [6, "Cap texture on top and east"],
        [7, "Cap texture on top, south and west"],
        [8, "Cap texture on top and south"],
        [9, "Cap texture on top, east and south"],
        [10, "Stem texture on all four sides, pores on top and bottom"],
        [14, "Cap texture on all six sides"],
        [15, "Stem texture on all six sides"]
    ] : -1 != e.indexOf("fence_gate") ? [
        [0, "Facing south"],
        [1, "Facing west"],
        [2, "Facing north"],
        [3, "Facing east"],
        [4, "Facing south (open)"],
        [5, "Facing west (open)"],
        [6, "Facing north (open)"],
        [7, "Facing east (open)"]
    ] : "nether_wart" == e ? [0, 1, 2, 3] : "brewing_stand" == e ? [
        [1, "The slot pointing east"],
        [2, "The slot pointing southwest"],
        [4, "The slot pointing northwest"]
    ] : "cauldron" == e ? [
        [0, "Empty"],
        [1, "â…“ filled"],
        [2, "â…” filled"],
        [3, "Fully filled"]
    ] : "cocoa" == e ? [
        [0, "Attached to the north (First stage)"],
        [1, "Attached to the east (First stage)"],
        [2, "Attached to the south (First stage)"],
        [3, "Attached to the west (First stage)"],
        [4, "Attached to the north (Second stage)"],
        [5, "Attached to the east (Second stage)"],
        [6, "Attached to the south (Second stage)"],
        [7, "Attached to the west (Second stage)"],
        [8, "Attached to the north (Final stage)"],
        [9, "Attached to the east (Final stage)"],
        [10, "Attached to the south (Final stage)"],
        [11, "Attached to the west (Final stage)"]
    ] : "tripwire_hook" == e ? [
        [0, "Tripwire hook on block side facing south"],
        [1, "Tripwire hook on block side facing west"],
        [2, "Tripwire hook on block side facing north"],
        [3, "Tripwire hook on block side facing east"],
        [4, "Tripwire hook on block side facing south (ready position)"],
        [5, "Tripwire hook on block side facing west (ready position)"],
        [6, "Tripwire hook on block side facing north (ready position)"],
        [7, "Tripwire hook on block side facing east (ready position)"],
        [8, "Tripwire hook on block side facing south (down position)"],
        [9, "Tripwire hook on block side facing west (down position)"],
        [10, "Tripwire hook on block side facing north (down position)"],
        [11, "Tripwire hook on block side facing east (down position)"]
    ] : "tripwire" == e ? [
        [1, "Tripwire is activated (an entity is intersecting its collision mask)"],
        [2, "Tripwire is suspended in the air (not above a solid block)"],
        [4, "Tripwire is attached to a valid tripwire circuit"],
        [8, "Tripwire is disarmed"]
    ] : "skull" == e ? [
        [1, "On the floor"],
        [2, "On a wall, facing north"],
        [3, "On a wall, facing south"],
        [4, "On a wall, facing east"],
        [5, "On a wall, facing west"]
    ] : "anvil" == e ? [
        [0, "Anvil (North/South)"],
        [1, "Anvil (East/West)"],
        [2, "Anvil (South/North)"],
        [3, "Anvil (West/East)"],
        [4, "Slightly Damaged Anvil (North/South)"],
        [5, "Slightly Damaged Anvil (East/West)"],
        [6, "Slightly Damaged Anvil (West/East)"],
        [7, "Slightly Damaged Anvil (South/North)"],
        [8, "Very Damaged Anvil (North/South)"],
        [9, "Very Damaged Anvil (East/West)"],
        [10, "Very Damaged Anvil (West/East)"],
        [11, "Very Damaged Anvil (South/North)"]
    ] : "end_portal_frame" == e ? [
        [0, "Facing south"],
        [1, "Facing west"],
        [2, "Facing north"],
        [3, "Facing east"],
        [4, "Facing south (with eye)"],
        [5, "Facing west (with eye)"],
        [6, "Facing north (with eye)"],
        [7, "Facing east (with eye)"]
    ] : -1 != e.indexOf("terracotta") ? [
        [0, "Facing north"],
        [1, "Facing south"],
        [2, "Facing east"],
        [3, "Facing west"]
    ] : "end_rod" == e ? [
        [0, "Facing down"],
        [1, "Facing up"],
        [2, "Facing north"],
        [3, "Facing south"],
        [4, "Facing west"],
        [5, "Facing east"]
    ] : -1 != e.indexOf("command_block") ? [
        [0, "Facing down"],
        [1, "Facing up"],
        [2, "Facing north"],
        [3, "Facing south"],
        [4, "Facing west"],
        [5, "Facing east"],
        [8, "Facing down, Conditional"],
        [9, "Facing up, Conditional"],
        [10, "Facing north, Conditional"],
        [11, "Facing south, Conditional"],
        [12, "Facing west, Conditional"],
        [13, "Facing east, Conditional"]
    ] : "structure_block" == e ? [
        [0, "Save"],
        [1, "Load"],
        [2, "Corner"],
        [3, "Data"]
    ] : "purpur_slab" == e ? [
        [0, "Lower"],
        [8, "Upper"]
    ] : "beetroots" == e ? [
        [0, "Age 0"],
        [1, "Age 1"],
        [2, "Age 2"],
        [3, "Fully Grown"]
    ] : []
}

function tileDataValue(e, t) {
    return -1 != t.indexOf(":") && -1 != t.indexOf(e + ":") ? t.substr(t.indexOf(":") + 1) : e == t ? 0 : -1
}

function makeInputSelect(e, t, a, n, o) {
    t.length > 0 ? title = ' title="' + t + '"' : title = "", a.length > 0 ? _css = " class='" + a + "'" : _css = "";
    var l = "<select id='" + e + "' " + n + title + _css + ">";
    for (i = 0; i < o.length; i++) l += "<option value='" + o[i] + "'>" + o[i] + "</option>";
    return l + "</select>"
}

function loadBlockForm(e) {
    $("#inputForm").html("<span class='label'>" + llBlockCoords + ":  X" + makeInputText("xpos", ttBlockX, "inputSmall", "onKeyUp='generateSummon()'") + " Y" + makeInputText("ypos", ttBlockY, "inputSmall", "onKeyUp='generateSummon()'") + " Z" + makeInputText("zpos", ttBlockZ, "inputSmall", "onKeyUp='generateSummon()'") + endBlockCoordsForFill(e) + makeInputCheckbox("relative", ttRelativeBlock, "onClick='generateSummon()'", !0) + "Relative Co-ordinates</span><br><span class='label'></span>" + makeModeEnchantAll() + "<br>"), "Fill" == e || "SetBlock" == e ? ($("#inputForm").append("<span class='entityLabelBig'>" + llBlock + ": </span>" + makeSelectTileID("Item_0")), "Fill" == e ? ($("#inputForm").append(makeBlockHandlingFill() + "<div id='replaceOptions'></div>"), blockHandlingForReplace()) : "SetBlock" == e && $("#inputForm").append(makeBlockHandlingSetBlock()), generateDataValue("Item_0")) : "ReplaceItemBlock" == e ? ($("#inputForm").append("<div id='itemTag'></div>"), $("#itemTag").html("<span class='entityLabelBig'>" + llSlotNo + ": </span>" + makeInputText("slotNo", ttSlotNo, "inputSmall", "onKeyUp='generateSummon()'") + "<br>"), makeChestSlots(0, 0, 0, "itemTag"), $("#itemTag").html($("#itemTag").html().replace("Slot 0", llItem + ":"))) : "BlockData" == e && ($("#inputForm").append("<span class='entityLabelBig'>" + llBlock + ": </span>" + makeSelectTileIDForBlockData("Item_0") + "<br>" + ttBlockDataDV), generateDataValue("Item_0"))
}! function() {
    function e(e) {
        var t = "    ";
        if (isNaN(parseInt(e))) t = e;
        else switch (e) {
            case 1:
                t = " ";
                break;
            case 2:
                t = "  ";
                break;
            case 3:
                t = "   ";
                break;
            case 4:
                t = "    ";
                break;
            case 5:
                t = "     ";
                break;
            case 6:
                t = "      ";
                break;
            case 7:
                t = "       ";
                break;
            case 8:
                t = "        ";
                break;
            case 9:
                t = "         ";
                break;
            case 10:
                t = "          ";
                break;
            case 11:
                t = "           ";
                break;
            case 12:
                t = "            "
        }
        var a = ["\n"];
        for (ix = 0; ix < 100; ix++) a.push(a[ix] + t);
        return a
    }

    function t() {
        this.step = "    ", this.shift = e(this.step)
    }

    function a(e, t) {
        return t - (e.replace(/\(/g, "").length - e.replace(/\)/g, "").length)
    }

    function n(e, t) {
        return e.replace(/\s{1,}/g, " ").replace(/ AND /gi, "~::~" + t + t + "AND ").replace(/ BETWEEN /gi, "~::~" + t + "BETWEEN ").replace(/ CASE /gi, "~::~" + t + "CASE ").replace(/ ELSE /gi, "~::~" + t + "ELSE ").replace(/ END /gi, "~::~" + t + "END ").replace(/ FROM /gi, "~::~FROM ").replace(/ GROUP\s{1,}BY/gi, "~::~GROUP BY ").replace(/ HAVING /gi, "~::~HAVING ").replace(/ IN /gi, " IN ").replace(/ JOIN /gi, "~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi, "~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi, "~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi, "~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi, "~::~RIGHT JOIN ").replace(/ ON /gi, "~::~" + t + "ON ").replace(/ OR /gi, "~::~" + t + t + "OR ").replace(/ ORDER\s{1,}BY/gi, "~::~ORDER BY ").replace(/ OVER /gi, "~::~" + t + "OVER ").replace(/\(\s{0,}SELECT /gi, "~::~(SELECT ").replace(/\)\s{0,}SELECT /gi, ")~::~SELECT ").replace(/ THEN /gi, " THEN~::~" + t).replace(/ UNION /gi, "~::~UNION~::~").replace(/ USING /gi, "~::~USING ").replace(/ WHEN /gi, "~::~" + t + "WHEN ").replace(/ WHERE /gi, "~::~WHERE ").replace(/ WITH /gi, "~::~WITH ").replace(/ ALL /gi, " ALL ").replace(/ AS /gi, " AS ").replace(/ ASC /gi, " ASC ").replace(/ DESC /gi, " DESC ").replace(/ DISTINCT /gi, " DISTINCT ").replace(/ EXISTS /gi, " EXISTS ").replace(/ NOT /gi, " NOT ").replace(/ NULL /gi, " NULL ").replace(/ LIKE /gi, " LIKE ").replace(/\s{0,}SELECT /gi, "SELECT ").replace(/\s{0,}UPDATE /gi, "UPDATE ").replace(/ SET /gi, " SET ").replace(/~::~{1,}/g, "~::~").split("~::~")
    }
    t.prototype.xml = function(t, a) {
        var n = t.replace(/>\s{0,}</g, "><").replace(/</g, "~::~<").replace(/\s*xmlns\:/g, "~::~xmlns:").replace(/\s*xmlns\=/g, "~::~xmlns=").split("~::~"),
            o = n.length,
            i = !1,
            l = 0,
            r = "",
            s = 0,
            c = a ? e(a) : this.shift;
        for (s = 0; s < o; s++) n[s].search(/<!/) > -1 ? (r += c[l] + n[s], i = !0, (n[s].search(/-->/) > -1 || n[s].search(/\]>/) > -1 || n[s].search(/!DOCTYPE/) > -1) && (i = !1)) : n[s].search(/-->/) > -1 || n[s].search(/\]>/) > -1 ? (r += n[s], i = !1) : /^<\w/.exec(n[s - 1]) && /^<\/\w/.exec(n[s]) && /^<[\w:\-\.\,]+/.exec(n[s - 1]) == /^<\/[\w:\-\.\,]+/.exec(n[s])[0].replace("/", "") ? (r += n[s], i || l--) : n[s].search(/<\w/) > -1 && -1 == n[s].search(/<\//) && -1 == n[s].search(/\/>/) ? r = r += i ? n[s] : c[l++] + n[s] : n[s].search(/<\w/) > -1 && n[s].search(/<\//) > -1 ? r = r += i ? n[s] : c[l] + n[s] : n[s].search(/<\//) > -1 ? r = r += i ? n[s] : c[--l] + n[s] : n[s].search(/\/>/) > -1 ? r = r += i ? n[s] : c[l] + n[s] : n[s].search(/<\?/) > -1 ? r += c[l] + n[s] : n[s].search(/xmlns\:/) > -1 || n[s].search(/xmlns\=/) > -1 ? r += c[l] + n[s] : r += n[s];
        return "\n" == r[0] ? r.slice(1) : r
    }, t.prototype.json = function(e, t) {
        var t = t || this.step;
        return "undefined" == typeof JSON ? e : "string" == typeof e ? JSON.stringify(JSON.parse(e), null, t) : "object" == typeof e ? JSON.stringify(e, null, t) : e
    }, t.prototype.css = function(t, a) {
        var n = t.replace(/\s{1,}/g, " ").replace(/\{/g, "{~::~").replace(/\}/g, "~::~}~::~").replace(/\;/g, ";~::~").replace(/\/\*/g, "~::~/*").replace(/\*\//g, "*/~::~").replace(/~::~\s{0,}~::~/g, "~::~").split("~::~"),
            o = n.length,
            i = 0,
            l = "",
            r = 0,
            s = a ? e(a) : this.shift;
        for (r = 0; r < o; r++) /\{/.exec(n[r]) ? l += s[i++] + n[r] : /\}/.exec(n[r]) ? l += s[--i] + n[r] : (/\*\\/.exec(n[r]), l += s[i] + n[r]);
        return l.replace(/^\n{1,}/, "")
    }, t.prototype.sql = function(t, o) {
        var i = t.replace(/\s{1,}/g, " ").replace(/\'/gi, "~::~'").split("~::~"),
            l = i.length,
            r = [],
            s = 0,
            c = this.step,
            m = 0,
            d = "",
            p = 0,
            h = o ? e(o) : this.shift;
        for (p = 0; p < l; p++) r = p % 2 ? r.concat(i[p]) : r.concat(n(i[p], c));
        for (l = r.length, p = 0; p < l; p++) {
            m = a(r[p], m), /\s{0,}\s{0,}SELECT\s{0,}/.exec(r[p]) && (r[p] = r[p].replace(/\,/g, ",\n" + c + c)), /\s{0,}\s{0,}SET\s{0,}/.exec(r[p]) && (r[p] = r[p].replace(/\,/g, ",\n" + c + c)), /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(r[p]) ? d += h[++s] + r[p] : /\'/.exec(r[p]) ? (m < 1 && s && s--, d += r[p]) : (d += h[s] + r[p], m < 1 && s && s--)
        }
        return d = d.replace(/^\n{1,}/, "").replace(/\n{1,}/g, "\n")
    }, t.prototype.xmlmin = function(e, t) {
        return (t ? e : e.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g, "").replace(/[ \r\n\t]{1,}xmlns/g, " xmlns")).replace(/>\s{0,}</g, "><")
    }, t.prototype.jsonmin = function(e) {
        return "undefined" == typeof JSON ? e : JSON.stringify(JSON.parse(e), null, 0)
    }, t.prototype.cssmin = function(e, t) {
        return (t ? e : e.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g, "")).replace(/\s{1,}/g, " ").replace(/\{\s{1,}/g, "{").replace(/\}\s{1,}/g, "}").replace(/\;\s{1,}/g, ";").replace(/\/\*\s{1,}/g, "/*").replace(/\*\/\s{1,}/g, "*/")
    }, t.prototype.sqlmin = function(e) {
        return e.replace(/\s{1,}/g, " ").replace(/\s{1,}\(/, "(").replace(/\s{1,}\)/, ")")
    }, window.vkbeautify = new t
}();
var entities = [
    ["AreaEffectCloud", "area_effect_cloud"],
    ["ArmorStand", "armor_stand"],
    ["Arrow", "arrow"],
    ["Bat", "bat"],
    ["Blaze", "blaze"],
    ["Boat", "boat"],
    ["CaveSpider", "cave_spider"],
    ["MinecartChest", "chest_minecart"],
    ["Chicken", "chicken"],
    ["MinecartCommandBlock", "commandblock_minecart"],
    ["Cow", "cow"],
    ["Creeper", "creeper"],
    ["Donkey", "donkey"],
    ["DragonFireball", "dragon_fireball"],
    ["ThrownEgg", "egg"],
    ["ElderGuardian", "elder_guardian"],
    ["EnderCrystal", "ender_crystal"],
    ["EnderDragon", "ender_dragon"],
    ["ThrownEnderpearl", "ender_pearl"],
    ["Enderman", "enderman"],
    ["Endermite", "endermite"],
    ["EvocationFangs", "evocation_fangs"],
    ["Evoker", "evocation_illager"],
    ["EyeOfEnderSignal", "eye_of_ender_signal"],
    ["FallingSand", "falling_block"],
    ["Fireball", "fireball"],
    ["FireworksRocketEntity", "fireworks_rocket"],
    ["MinecartFurnace", "furnace_minecart"],
    ["MinecartHopper", "hopper_minecart"],
    ["Ghast", "ghast"],
    ["Giant", "giant"],
    ["Guardian", "guardian"],
    ["EntityHorse", "horse"],
    ["Husk", "husk"],
    ["Illusioner", "illusion_illager"],
    ["Item", "item"],
    ["ItemFrame", "item_frame"],
    ["LightningBolt", "lightning_bolt"],
    ["Llama", "llama"],
    ["Llama Spit", "llama_spit"],
    ["LavaSlime", "magma_cube"],
    ["MinecartRideable", "minecart"],
    ["MushroomCow", "mooshroom"],
    ["Mule", "mule"],
    ["Ozelot", "ocelot"],
    ["Painting", "painting"],
    ["Parrot", "parrot"],
    ["Pig", "pig"],
    ["PolarBear", "polar_bear"],
    ["ThrownPotion", "potion"],
    ["Rabbit", "rabbit"],
    ["Sheep", "sheep"],
    ["Shulker", "shulker"],
    ["ShulkerBullet", "shulker_bullet"],
    ["Silverfish", "silverfish"],
    ["Skeleton", "skeleton"],
    ["SkeletonHorse", "skeleton_horse"],
    ["Slime", "slime"],
    ["SmallFireball", "small_fireball"],
    ["Snowball", "snowball"],
    ["SnowMan", "snowman"],
    ["MinecartSpawner", "spawner_minecart"],
    ["SpectralArrow", "spectral_arrow"],
    ["Spider", "spider"],
    ["Squid", "squid"],
    ["Stray", "stray"],
    ["PrimedTnt", "tnt"],
    ["MinecartTNT", "tnt_minecart"],
    ["Vex", "vex"],
    ["Villager", "villager"],
    ["VillagerGolem", "villager_golem"],
    ["Vindicator", "vindication_illager"],
    ["Witch", "witch"],
    ["WitherBoss", "wither"],
    ["WitherSkull", "wither_skull"],
    ["WitherSkeleton", "wither_skeleton"],
    ["Wolf", "wolf"],
    ["ThrownExpBottle", "xp_bottle"],
    ["XPOrb", "xp_orb"],
    ["Zombie", "zombie"],
    ["ZombieHorse", "zombie_horse"],
    ["PigZombie", "zombie_pigman"],
    ["ZombieVillager", "zombie_villager"]
],
    entityIndex = 0,
    mLineID, skullOwners = new Array("MHF_Blaze", "MHF_CaveSpider", "MHF_Chicken", "MHF_Cow", "MHF_Enderman", "MHF_Ghast", "MHF_Golem", "MHF_Herobrine", "MHF_LavaSlime", "MHF_MushroomCow", "MHF_Ocelot", "MHF_Pig", "MHF_PigZombie", "MHF_Sheep", "MHF_Slime", "MHF_Spider", "MHF_Squid", "MHF_Villager", "MHF_Cactus", "MHF_Chest", "MHF_Melon", "MHF_OakLog", "MHF_Pumpkin", "MHF_TNT", "MHF_TNT2", "MHF_ArrowUp", "MHF_ArrowDown", "MHF_ArrowLeft", "MHF_ArrowRight", "MHF_Exclamation", "MHF_Question"),
    attributeModifiers = new Array("maxHealth", "followRange", "knockbackResistance", "movementSpeed", "attackDamage", "armor", "attackSpeed", "luck", "armorToughness"),
    enchantables = new Array;
enchantables[0] = ["Protection", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[1] = ["Fire Protection", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[2] = ["Feather Falling", ["leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[3] = ["Blast Protection", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[4] = ["Projectile Protection", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[5] = ["Respiration", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet"]], enchantables[6] = ["Aqua Affinity", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet"]], enchantables[7] = ["Thorns", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[8] = ["Depth Strider", ["leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[9] = ["Frost Walker", ["leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots"]], enchantables[10] = ["Curse of Binding", ["leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots", "elytra"]], enchantables[16] = ["Sharpness", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe"]], enchantables[17] = ["Smite", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe"]], enchantables[18] = ["Bane of Anthropods", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe"]], enchantables[19] = ["Knockback", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword"]], enchantables[20] = ["Fire Aspect", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword"]], enchantables[21] = ["Looting", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword"]], enchantables[22] = ["Sweeping Edge", ["iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword"]], enchantables[32] = ["Efficiency", ["iron_pickaxe", "wooden_pickaxe", "stone_pickaxe", "diamond_pickaxe", "golden_pickaxe", "iron_shovel", "wooden_shovel", "stone_shovel", "diamond_shovel", "golden_shovel", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe", "shears"]], enchantables[33] = ["Silk Touch", ["iron_pickaxe", "wooden_pickaxe", "stone_pickaxe", "diamond_pickaxe", "golden_pickaxe", "iron_shovel", "wooden_shovel", "stone_shovel", "diamond_shovel", "golden_shovel", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe", "shears"]], enchantables[34] = ["Unbreaking", ["iron_pickaxe", "wooden_pickaxe", "stone_pickaxe", "diamond_pickaxe", "golden_pickaxe", "iron_shovel", "wooden_shovel", "stone_shovel", "diamond_shovel", "golden_shovel", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe", "shears", "iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword", "leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots", "bow", "fishing_rod", "carrot_on_a_stick", "flint_and_steel", "wooden_hoe", "stone_hoe", "iron_hoe", "diamond_hoe", "golden_hoe", "elytra", "shield"]], enchantables[35] = ["Fortune", ["iron_pickaxe", "wooden_pickaxe", "stone_pickaxe", "diamond_pickaxe", "golden_pickaxe", "iron_shovel", "wooden_shovel", "stone_shovel", "diamond_shovel", "golden_shovel", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe"]], enchantables[48] = ["Power", ["bow"]], enchantables[49] = ["Punch", ["bow"]], enchantables[50] = ["Flame", ["bow"]], enchantables[51] = ["Infinity", ["bow"]], enchantables[61] = ["Luck of the Sea", ["fishing_rod"]], enchantables[62] = ["Lure", ["fishing_rod"]], enchantables[70] = ["Mending", ["iron_pickaxe", "wooden_pickaxe", "stone_pickaxe", "diamond_pickaxe", "golden_pickaxe", "iron_shovel", "wooden_shovel", "stone_shovel", "diamond_shovel", "golden_shovel", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe", "shears", "iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword", "leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots", "bow", "fishing_rod", "carrot_on_a_stick", "flint_and_steel", "wooden_hoe", "stone_hoe", "iron_hoe", "diamond_hoe", "golden_hoe", "shield", "elytra"]], enchantables[71] = ["Curse of Vanishing", ["iron_pickaxe", "wooden_pickaxe", "stone_pickaxe", "diamond_pickaxe", "golden_pickaxe", "iron_shovel", "wooden_shovel", "stone_shovel", "diamond_shovel", "golden_shovel", "iron_axe", "wooden_axe", "stone_axe", "diamond_axe", "golden_axe", "shears", "iron_sword", "wooden_sword", "stone_sword", "diamond_sword", "golden_sword", "leather_helmet", "chainmail_helmet", "iron_helmet", "diamond_helmet", "golden_helmet", "leather_chestplate", "chainmail_chestplate", "iron_chestplate", "diamond_chestplate", "golden_chestplate", "leather_leggings", "chainmail_leggings", "iron_leggings", "diamond_leggings", "golden_leggings", "leather_boots", "chainmail_boots", "iron_boots", "diamond_boots", "golden_boots", "bow", "fishing_rod", "carrot_on_a_stick", "flint_and_steel", "wooden_hoe", "stone_hoe", "iron_hoe", "diamond_hoe", "golden_hoe", "shield", "elytra"]];
var lastTargetType = "specific",
    slots = new Array(["slot.armor.chest", 0], ["slot.armor.feet", 0], ["slot.armor.head", 0], ["slot.armor.legs", 0], ["slot.weapon", 1], ["slot.weapon.mainhand", 1], ["slot.weapon.offhand", 1], ["slot.enderchest.", 2, 0, 26], ["slot.hotbar.", 2, 0, 8], ["slot.inventory.", 2, 0, 26], ["slot.horse.saddle", 3], ["slot.horse.armor", 4], ["slot.horse.chest.", 5, 2, 16], ["slot.villager.", 6, 0, 7]),
    signedIn = !1,
    sortField = "title",
    sortOrder = "a",
    gRowIndex = 0,
    userToken = "";
window.onpopstate = function(e) {
    showDetails(e.state.id)
};
var MD5 = function(e) {
    function t(e, t) {
        return e << t | e >>> 32 - t
    }

    function a(e, t) {
        var a, n, o, i, l;
        return o = 2147483648 & e, i = 2147483648 & t, a = 1073741824 & e, n = 1073741824 & t, l = (1073741823 & e) + (1073741823 & t), a & n ? 2147483648 ^ l ^ o ^ i : a | n ? 1073741824 & l ? 3221225472 ^ l ^ o ^ i : 1073741824 ^ l ^ o ^ i : l ^ o ^ i
    }

    function n(e, t, a) {
        return e & t | ~e & a
    }

    function o(e, t, a) {
        return e & a | t & ~a
    }

    function i(e, t, a) {
        return e ^ t ^ a
    }

    function l(e, t, a) {
        return t ^ (e | ~a)
    }

    function r(e, o, i, l, r, s, c) {
        return e = a(e, a(a(n(o, i, l), r), c)), a(t(e, s), o)
    }

    function s(e, n, i, l, r, s, c) {
        return e = a(e, a(a(o(n, i, l), r), c)), a(t(e, s), n)
    }

    function c(e, n, o, l, r, s, c) {
        return e = a(e, a(a(i(n, o, l), r), c)), a(t(e, s), n)
    }

    function m(e, n, o, i, r, s, c) {
        return e = a(e, a(a(l(n, o, i), r), c)), a(t(e, s), n)
    }

    function d(e) {
        var t, a = "",
            n = "";
        for (t = 0; t <= 3; t++) a += (n = "0" + (e >>> 8 * t & 255).toString(16)).substr(n.length - 2, 2);
        return a
    }
    var p, h, u, g, k, _, b, f, T, y = Array();
    for (y = function(e) {
        for (var t, a = e.length, n = a + 8, o = 16 * ((n - n % 64) / 64 + 1), i = Array(o - 1), l = 0, r = 0; r < a;) l = r % 4 * 8, i[t = (r - r % 4) / 4] = i[t] | e.charCodeAt(r) << l, r++;
        return t = (r - r % 4) / 4, l = r % 4 * 8, i[t] = i[t] | 128 << l, i[o - 2] = a << 3, i[o - 1] = a >>> 29, i
    }(e = function(e) {
        e = e.replace(/\r\n/g, "\n");
        for (var t = "", a = 0; a < e.length; a++) {
            var n = e.charCodeAt(a);
            n < 128 ? t += String.fromCharCode(n) : n > 127 && n < 2048 ? (t += String.fromCharCode(n >> 6 | 192), t += String.fromCharCode(63 & n | 128)) : (t += String.fromCharCode(n >> 12 | 224), t += String.fromCharCode(n >> 6 & 63 | 128), t += String.fromCharCode(63 & n | 128))
        }
        return t
    }(e)), _ = 1732584193, b = 4023233417, f = 2562383102, T = 271733878, p = 0; p < y.length; p += 16) h = _, u = b, g = f, k = T, b = m(b = m(b = m(b = m(b = c(b = c(b = c(b = c(b = s(b = s(b = s(b = s(b = r(b = r(b = r(b = r(b, f = r(f, T = r(T, _ = r(_, b, f, T, y[p + 0], 7, 3614090360), b, f, y[p + 1], 12, 3905402710), _, b, y[p + 2], 17, 606105819), T, _, y[p + 3], 22, 3250441966), f = r(f, T = r(T, _ = r(_, b, f, T, y[p + 4], 7, 4118548399), b, f, y[p + 5], 12, 1200080426), _, b, y[p + 6], 17, 2821735955), T, _, y[p + 7], 22, 4249261313), f = r(f, T = r(T, _ = r(_, b, f, T, y[p + 8], 7, 1770035416), b, f, y[p + 9], 12, 2336552879), _, b, y[p + 10], 17, 4294925233), T, _, y[p + 11], 22, 2304563134), f = r(f, T = r(T, _ = r(_, b, f, T, y[p + 12], 7, 1804603682), b, f, y[p + 13], 12, 4254626195), _, b, y[p + 14], 17, 2792965006), T, _, y[p + 15], 22, 1236535329), f = s(f, T = s(T, _ = s(_, b, f, T, y[p + 1], 5, 4129170786), b, f, y[p + 6], 9, 3225465664), _, b, y[p + 11], 14, 643717713), T, _, y[p + 0], 20, 3921069994), f = s(f, T = s(T, _ = s(_, b, f, T, y[p + 5], 5, 3593408605), b, f, y[p + 10], 9, 38016083), _, b, y[p + 15], 14, 3634488961), T, _, y[p + 4], 20, 3889429448), f = s(f, T = s(T, _ = s(_, b, f, T, y[p + 9], 5, 568446438), b, f, y[p + 14], 9, 3275163606), _, b, y[p + 3], 14, 4107603335), T, _, y[p + 8], 20, 1163531501), f = s(f, T = s(T, _ = s(_, b, f, T, y[p + 13], 5, 2850285829), b, f, y[p + 2], 9, 4243563512), _, b, y[p + 7], 14, 1735328473), T, _, y[p + 12], 20, 2368359562), f = c(f, T = c(T, _ = c(_, b, f, T, y[p + 5], 4, 4294588738), b, f, y[p + 8], 11, 2272392833), _, b, y[p + 11], 16, 1839030562), T, _, y[p + 14], 23, 4259657740), f = c(f, T = c(T, _ = c(_, b, f, T, y[p + 1], 4, 2763975236), b, f, y[p + 4], 11, 1272893353), _, b, y[p + 7], 16, 4139469664), T, _, y[p + 10], 23, 3200236656), f = c(f, T = c(T, _ = c(_, b, f, T, y[p + 13], 4, 681279174), b, f, y[p + 0], 11, 3936430074), _, b, y[p + 3], 16, 3572445317), T, _, y[p + 6], 23, 76029189), f = c(f, T = c(T, _ = c(_, b, f, T, y[p + 9], 4, 3654602809), b, f, y[p + 12], 11, 3873151461), _, b, y[p + 15], 16, 530742520), T, _, y[p + 2], 23, 3299628645), f = m(f, T = m(T, _ = m(_, b, f, T, y[p + 0], 6, 4096336452), b, f, y[p + 7], 10, 1126891415), _, b, y[p + 14], 15, 2878612391), T, _, y[p + 5], 21, 4237533241), f = m(f, T = m(T, _ = m(_, b, f, T, y[p + 12], 6, 1700485571), b, f, y[p + 3], 10, 2399980690), _, b, y[p + 10], 15, 4293915773), T, _, y[p + 1], 21, 2240044497), f = m(f, T = m(T, _ = m(_, b, f, T, y[p + 8], 6, 1873313359), b, f, y[p + 15], 10, 4264355552), _, b, y[p + 6], 15, 2734768916), T, _, y[p + 13], 21, 1309151649), f = m(f, T = m(T, _ = m(_, b, f, T, y[p + 4], 6, 4149444226), b, f, y[p + 11], 10, 3174756917), _, b, y[p + 2], 15, 718787259), T, _, y[p + 9], 21, 3951481745), _ = a(_, h), b = a(b, u), f = a(f, g), T = a(T, k);
    return (d(_) + d(b) + d(f) + d(T)).toLowerCase()
};
! function(e, t) {
    "use strict";
    var a, n = e.document;
    a = function() {
        var a, o, i, l, r, s, c, m, d, p, h, u, g, k = {}, _ = {}, b = !1,
            f = {
                ENTER: 13,
                ESC: 27,
                SPACE: 32
            }, T = [];
        return _ = {
            buttons: {
                holder: '<nav class="alertify-buttons">{{buttons}}</nav>',
                submit: '<button type="submit" class="alertify-button alertify-button-ok" id="alertify-ok">{{ok}}</button>',
                ok: '<button class="alertify-button alertify-button-ok" id="alertify-ok">{{ok}}</button>',
                cancel: '<button class="alertify-button alertify-button-cancel" id="alertify-cancel">{{cancel}}</button>'
            },
            input: '<div class="alertify-text-wrapper"><input type="text" class="alertify-text" id="alertify-text"></div>',
            message: '<p class="alertify-message">{{message}}</p>',
            log: '<article class="alertify-log{{class}}">{{message}}</article>'
        }, g = function() {
            var e, a, o = !1,
                i = n.createElement("fakeelement"),
                l = {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "otransitionend",
                    transition: "transitionend"
                };
            for (e in l)
                if (i.style[e] !== t) {
                    a = l[e], o = !0;
                    break
                }
            return {
                type: a,
                supported: o
            }
        }, a = function(e) {
            return n.getElementById(e)
        }, k = {
            labels: {
                ok: "OK",
                cancel: "Cancel"
            },
            delay: 5e3,
            buttonReverse: !1,
            buttonFocus: "ok",
            transition: t,
            addListeners: function(e) {
                var t, a, s, c, m, d = void 0 !== i,
                    p = void 0 !== o,
                    h = void 0 !== u,
                    g = "",
                    k = this;
                t = function(t) {
                    return void 0 !== t.preventDefault && t.preventDefault(), s(t), void 0 !== u && (g = u.value), "function" == typeof e && (void 0 !== u ? e(!0, g) : e(!0)), !1
                }, a = function(t) {
                    return void 0 !== t.preventDefault && t.preventDefault(), s(t), "function" == typeof e && e(!1), !1
                }, s = function() {
                    k.hide(), k.unbind(n.body, "keyup", c), k.unbind(l, "focus", m), d && k.unbind(i, "click", t), p && k.unbind(o, "click", a)
                }, c = function(e) {
                    var n = e.keyCode;
                    (n === f.SPACE && !h || h && n === f.ENTER) && t(e), n === f.ESC && p && a(e)
                }, m = function() {
                    h ? u.focus() : !p || k.buttonReverse ? i.focus() : o.focus()
                }, this.bind(l, "focus", m), this.bind(r, "focus", m), d && this.bind(i, "click", t), p && this.bind(o, "click", a), this.bind(n.body, "keyup", c), this.transition.supported || this.setFocus()
            },
            bind: function(e, t, a) {
                "function" == typeof e.addEventListener ? e.addEventListener(t, a, !1) : e.attachEvent && e.attachEvent("on" + t, a)
            },
            handleErrors: function() {
                if (void 0 !== e.onerror) {
                    var t = this;
                    return e.onerror = function(e, a, n) {
                        t.error("[" + e + " on line " + n + " of " + a + "]", 0)
                    }, !0
                }
                return !1
            },
            appendButtons: function(e, t) {
                return this.buttonReverse ? t + e : e + t
            },
            build: function(e) {
                var t = "",
                    a = e.type,
                    n = e.message,
                    o = e.cssClass || "";
                switch (t += '<div class="alertify-dialog">', t += '<a id="alertify-resetFocusBack" class="alertify-resetFocus" href="#">Reset Focus</a>', "none" === k.buttonFocus && (t += '<a href="#" id="alertify-noneFocus" class="alertify-hidden"></a>'), "prompt" === a && (t += '<div id="alertify-form">'), t += '<article class="alertify-inner">', t += _.message.replace("{{message}}", n), "prompt" === a && (t += _.input), t += _.buttons.holder, t += "</article>", "prompt" === a && (t += "</div>"), t += '<a id="alertify-resetFocus" class="alertify-resetFocus" href="#">Reset Focus</a>', t += "</div>", a) {
                    case "confirm":
                        t = (t = t.replace("{{buttons}}", this.appendButtons(_.buttons.cancel, _.buttons.ok))).replace("{{ok}}", this.labels.ok).replace("{{cancel}}", this.labels.cancel);
                        break;
                    case "prompt":
                        t = (t = t.replace("{{buttons}}", this.appendButtons(_.buttons.cancel, _.buttons.submit))).replace("{{ok}}", this.labels.ok).replace("{{cancel}}", this.labels.cancel);
                        break;
                    case "alert":
                        t = (t = t.replace("{{buttons}}", _.buttons.ok)).replace("{{ok}}", this.labels.ok)
                }
                return d.className = "alertify alertify-" + a + " " + o, m.className = "alertify-cover", t
            },
            close: function(e, t) {
                var a, n, o = t && !isNaN(t) ? +t : this.delay,
                    i = this;
                this.bind(e, "click", function() {
                    a(e)
                }), n = function(e) {
                    e.stopPropagation(), i.unbind(this, i.transition.type, n), p.removeChild(this), p.hasChildNodes() || (p.className += " alertify-logs-hidden")
                }, a = function(e) {
                    void 0 !== e && e.parentNode === p && (i.transition.supported ? (i.bind(e, i.transition.type, n), e.className += " alertify-log-hide") : (p.removeChild(e), p.hasChildNodes() || (p.className += " alertify-logs-hidden")))
                }, 0 !== t && setTimeout(function() {
                    a(e)
                }, o)
            },
            dialog: function(e, t, a, o, i) {
                c = n.activeElement;
                var l = function() {
                    p && null !== p.scrollTop && m && null !== m.scrollTop || l()
                };
                if ("string" != typeof e) throw new Error("message must be a string");
                if ("string" != typeof t) throw new Error("type must be a string");
                if (void 0 !== a && "function" != typeof a) throw new Error("fn must be a function");
                return this.init(), l(), T.push({
                    type: t,
                    message: e,
                    callback: a,
                    placeholder: o,
                    cssClass: i
                }), b || this.setup(), this
            },
            extend: function(e) {
                if ("string" != typeof e) throw new Error("extend method must have exactly one paramter");
                return function(t, a) {
                    return this.log(t, e, a), this
                }
            },
            hide: function() {
                var e, t = this;
                T.splice(0, 1), T.length > 0 ? this.setup(!0) : (b = !1, e = function(a) {
                    a.stopPropagation(), t.unbind(d, t.transition.type, e)
                }, this.transition.supported ? (this.bind(d, this.transition.type, e), d.className = "alertify alertify-hide alertify-hidden") : d.className = "alertify alertify-hide alertify-hidden alertify-isHidden", m.className = "alertify-cover alertify-cover-hidden", c.focus())
            },
            init: function() {
                n.createElement("nav"), n.createElement("article"), n.createElement("section"), null == a("alertify-cover") && ((m = n.createElement("div")).setAttribute("id", "alertify-cover"), m.className = "alertify-cover alertify-cover-hidden", n.body.appendChild(m)), null == a("alertify") && (b = !1, T = [], (d = n.createElement("section")).setAttribute("id", "alertify"), d.className = "alertify alertify-hidden", n.body.appendChild(d)), null == a("alertify-logs") && ((p = n.createElement("section")).setAttribute("id", "alertify-logs"), p.className = "alertify-logs alertify-logs-hidden", n.body.appendChild(p)), n.body.setAttribute("tabindex", "0"), this.transition = g()
            },
            log: function(e, t, a) {
                var n = function() {
                    p && null !== p.scrollTop || n()
                };
                return this.init(), n(), p.className = "alertify-logs", this.notify(e, t, a), this
            },
            notify: function(e, t, a) {
                var o = n.createElement("article");
                o.className = "alertify-log" + ("string" == typeof t && "" !== t ? " alertify-log-" + t : ""), o.innerHTML = e, p.appendChild(o), setTimeout(function() {
                    o.className = o.className + " alertify-log-show"
                }, 50), this.close(o, a)
            },
            set: function(e) {
                var t;
                if ("object" != typeof e && e instanceof Array) throw new Error("args must be an object");
                for (t in e) e.hasOwnProperty(t) && (this[t] = e[t])
            },
            setFocus: function() {
                u ? (u.focus(), u.select()) : s.focus()
            },
            setup: function(e) {
                var n, c = T[0],
                    m = this;
                b = !0, n = function(e) {
                    e.stopPropagation(), m.setFocus(), m.unbind(d, m.transition.type, n)
                }, this.transition.supported && !e && this.bind(d, this.transition.type, n), d.innerHTML = this.build(c), l = a("alertify-resetFocus"), r = a("alertify-resetFocusBack"), i = a("alertify-ok") || t, o = a("alertify-cancel") || t, s = "cancel" === k.buttonFocus ? o : "none" === k.buttonFocus ? a("alertify-noneFocus") : i, u = a("alertify-text") || t, h = a("alertify-form") || t, "string" == typeof c.placeholder && "" !== c.placeholder && (u.value = c.placeholder), e && this.setFocus(), this.addListeners(c.callback)
            },
            unbind: function(e, t, a) {
                "function" == typeof e.removeEventListener ? e.removeEventListener(t, a, !1) : e.detachEvent && e.detachEvent("on" + t, a)
            }
        }, {
            alert: function(e, t, a) {
                return k.dialog(e, "alert", t, "", a), this
            },
            confirm: function(e, t, a) {
                return k.dialog(e, "confirm", t, "", a), this
            },
            extend: k.extend,
            init: k.init,
            log: function(e, t, a) {
                return k.log(e, t, a), this
            },
            prompt: function(e, t, a, n) {
                return k.dialog(e, "prompt", t, a, n), this
            },
            success: function(e, t) {
                return k.log(e, "success", t), this
            },
            error: function(e, t) {
                return k.log(e, "error", t), this
            },
            set: function(e) {
                k.set(e)
            },
            labels: k.labels,
            debug: k.handleErrors
        }
    }, "function" == typeof define ? define([], function() {
        return new a
    }) : void 0 === e.alertify && (e.alertify = new a)
}(this);
var ttLang = "en",
    particles = new Array("mobSpell", "mobSpellAmbient", "largeexplode", "hugeexplosion", "fireworksSpark", "bubble", "splash", "wake", "suspended ", "depthsuspend", "crit ", "magicCrit", "smoke", "largesmoke", "spell", "instantSpell", "witchMagic", "dripWater", "dripLava", "angryVillager", "happyVillager", "townaura", "note", "portal", "enchantmenttable", "flame", "lava", "footstep", "reddust", "snowballpoof", "slime", "heart", "barrier", "cloud", "snowshovel", "droplet", "take", "mobappearance", "dragonbreath", "endRod", "damageIndicator", "sweepAttack", "blockcrack", "blockdust", "fallingdust", "iconcrack"),
    potions1p9 = new Array(["", "Select Potion Type"], ["water", "Water Potion"], ["awkward", "Awkward Potion"], ["mundane", "Mundane Potion"], ["thick", "Thick Potion"], ["swiftness", "Swiftness Potion"], ["strong_swiftness", "Swiftness Strong Potion"], ["long_swiftness", "Swiftness Long Strong"], ["slowness", "Slowness Potion"], ["long_slowness", "Slowness Long Potion"], ["strength", "Strength Potion"], ["strong_strength", "Strength Strong Potion"], ["long_strength", "Strength Long Potion"], ["weakness", "Weakness Potion"], ["long_weakness", "Weakness Long Potion"], ["healing", "Healing Potion"], ["strong_healing", "Healing Strong Potion"], ["harming", "Harming Potion"], ["strong_harming", "Harming Strong Potion"], ["leaping", "Leaping Potion"], ["strong_leaping", "Leaping Strong Potion"], ["long_leaping", "Leaping Long Potion"], ["regeneration", "Regeneration Potion"], ["strong_regeneration", "Regeneration Strong Potion"], ["long_regeneration", "Regeneration Long Potion"], ["poison", "Poison Potion"], ["strong_poison", "Poison Strong Potion"], ["long_poison", "Poison Long Potion"], ["fire_resistance", "Fire Resistance Potion"], ["long_fire_resistance", "Fire Resistance Long Potion"], ["water_breathing", "Water Breathing Potion"], ["long_water_breathing", "Water Breathing Long Potion"], ["night_vision", "Night Vision Potion"], ["long_night_vision", "Night Vision Long Potion"], ["invisibility", "Invisibility Potion"], ["long_invisibility", "Invisibility Long Potion"]),
    specialTiles = new Array(["flowing_water", "Water"], ["water", "Stationary Water"], ["flowing_lava", "Lava"], ["lava", "Stationary Lava"], ["fire", "Fire"]),
    items = new Array(["0", "None"], ["stone", "Stone"], ["stone:1", "Granite"], ["stone:2", "Polished Granite"], ["stone:3", "Diorite"], ["stone:4", "Polished Diorite"], ["stone:5", "Andesite"], ["stone:6", "Polished Andesite"], ["grass", "Grass"], ["dirt", "Dirt"], ["dirt:1", "Coarse Dirt"], ["dirt:2", "Podzol"], ["cobblestone", "Cobblestone"], ["planks", "Oak Wood Plank"], ["planks:1", "Spruce Wood Plank"], ["planks:2", "Birch Wood Plank"], ["planks:3", "Jungle Wood Plank"], ["planks:4", "Acacia Wood Plank"], ["planks:5", "Dark Oak Wood Plank"], ["sapling", "Oak Sapling"], ["sapling:1", "Spruce Sapling"], ["sapling:2", "Birch Sapling"], ["sapling:3", "Jungle Sapling"], ["sapling:4", "Acacia Sapling"], ["sapling:5", "Dark Oak Sapling"], ["bedrock", "Bedrock"], ["sand", "Sand"], ["sand:1", "Red Sand"], ["gravel", "Gravel"], ["gold_ore", "Gold Ore"], ["iron_ore", "Iron Ore"], ["coal_ore", "Coal Ore"], ["log", "Oak Wood"], ["log:1", "Spruce Wood"], ["log:2", "Birch Wood"], ["log:3", "Jungle Wood"], ["log:4", "Oak Wood 4"], ["log:5", "Oak Wood 5"], ["leaves", "Oak Leaves"], ["leaves:1", "Spruce Leaves"], ["leaves:2", "Birch Leaves"], ["leaves:3", "Jungle Leaves"], ["leaves2", "Acacia Leaves"], ["leaves2:1", "Dark Oak Leaves"], ["sponge", "Sponge"], ["sponge:1", "Wet Sponge"], ["glass", "Glass"], ["stained_glass", "Stained Glass (white)"], ["stained_glass:1", "Stained Glass (Orange)"], ["stained_glass:2", "Stained Glass (Magenta)"], ["stained_glass:3", "Stained Glass (Light Blue)"], ["stained_glass:4", "Stained Glass (Yellow)"], ["stained_glass:5", "Stained Glass (Lime)"], ["stained_glass:6", "Stained Glass (Pink)"], ["stained_glass:7", "Stained Glass (Gray)"], ["stained_glass:8", "Stained Glass (Light Gray)"], ["stained_glass:9", "Stained Glass (Cyan)"], ["stained_glass:10", "Stained Glass (Purple)"], ["stained_glass:11", "Stained Glass (Blue)"], ["stained_glass:12", "Stained Glass (Brown)"], ["stained_glass:13", "Stained Glass (Green)"], ["stained_glass:14", "Stained Glass (Red)"], ["stained_glass:15", "Stained Glass (Black)"], ["stained_glass_pane", "Stained Glass Pane (white)"], ["stained_glass_pane:1", "Stained Glass Pane (Orange)"], ["stained_glass_pane:2", "Stained Glass Pane (Magenta)"], ["stained_glass_pane:3", "Stained Glass Pane (Light Blue)"], ["stained_glass_pane:4", "Stained Glass Pane (Yellow)"], ["stained_glass_pane:5", "Stained Glass Pane (Lime)"], ["stained_glass_pane:6", "Stained Glass Pane (Pink)"], ["stained_glass_pane:7", "Stained Glass Pane (Gray)"], ["stained_glass_pane:8", "Stained Glass Pane (Light Gray)"], ["stained_glass_pane:9", "Stained Glass Pane (Cyan)"], ["stained_glass_pane:10", "Stained Glass Pane (Purple)"], ["stained_glass_pane:11", "Stained Glass Pane (Blue)"], ["stained_glass_pane:12", "Stained Glass Pane (Brown)"], ["stained_glass_pane:13", "Stained Glass Pane (Green)"], ["stained_glass_pane:14", "Stained Glass Pane (Red)"], ["stained_glass_pane:15", "Stained Glass Pane (Black)"], ["lapis_ore", "Lapis Lazuli Ore"], ["lapis_block", "Lapis Lazuli Block"], ["dispenser", "Dispenser"], ["sandstone", "Sandstone"], ["sandstone:1", "Chiseled Sandstone"], ["sandstone:2", "Smooth Sandstone"], ["noteblock", "Note Block"], ["golden_rail", "Powered Rail"], ["detector_rail", "Detector Rail"], ["sticky_piston", "Sticky Piston"], ["web", "Web"], ["tallgrass", "Tall Grass (Dead Shrub)"], ["tallgrass:1", "Grass"], ["tallgrass:2", "Fern"], ["deadbush", "Dead Shrub"], ["piston", "Piston"], ["wool", "White Wool"], ["wool:1", "Orange Wool"], ["wool:2", "Magenta Wool"], ["wool:3", "Light Blue Wool"], ["wool:4", "Yellow Wool"], ["wool:5", "Lime Wool"], ["wool:6", "Pink Wool"], ["wool:7", "Gray Wool"], ["wool:8", "Light Gray Wool"], ["wool:9", "Cyan Wool"], ["wool:10", "Purple Wool"], ["wool:11", "Blue Wool"], ["wool:12", "Brown Wool"], ["wool:13", "Green Wool"], ["wool:14", "Red Wool"], ["wool:15", "Black Wool"], ["carpet", "White Carpet"], ["carpet:1", "Orange Carpet"], ["carpet:2", "Magenta Carpet"], ["carpet:3", "Light Blue Carpet"], ["carpet:4", "Yellow Carpet"], ["carpet:5", "Lime Carpet"], ["carpet:6", "Pink Carpet"], ["carpet:7", "Gray Carpet"], ["carpet:8", "Light Gray Carpet"], ["carpet:9", "Cyan Carpet"], ["carpet:10", "Purple Carpet"], ["carpet:11", "Blue Carpet"], ["carpet:12", "Brown Carpet"], ["carpet:13", "Green Carpet"], ["carpet:14", "Red Carpet"], ["carpet:15", "Black Carpet"], ["yellow_flower", "Dandelion"], ["red_flower", "Poppy"], ["red_flower:1", "Blue Orchid"], ["red_flower:2", "Allium"], ["red_flower:3", "Azure Bluet"], ["red_flower:4", "Red Tulip"], ["red_flower:5", "Orange Tulip"], ["red_flower:6", "White Tulip"], ["red_flower:7", "Pink Tulip"], ["red_flower:8", "Oxeye Daisy"], ["brown_mushroom", "Brown Mushroom"], ["red_mushroom", "Red Mushroom"], ["gold_block", "Gold Block"], ["iron_block", "Iron Block"], ["double_stone_slab", "Double Stone Slab"], ["double_stone_slab:1", "Double Sandstone Slab"], ["double_stone_slab:2", "Double Wooden Slab"], ["double_stone_slab:3", "Double Cobblestone Slab"], ["double_stone_slab:4", "Double Brick Slab"], ["double_stone_slab:5", "Double Stone Brick Slab"], ["double_stone_slab:6", "Double Nether Brick Slab"], ["double_stone_slab:7", "Double Quartz Slab"], ["double_stone_slab:8", "Double Smooth Stone Slab"], ["double_stone_slab:9", "Double Smooth Sandstone Slab"], ["stone_slab", "Stone Slab"], ["stone_slab:1", "Sandstone Slab"], ["stone_slab:2", "Wooden Slab"], ["stone_slab:3", "Cobblestone Slab"], ["stone_slab:4", "Brick Slab"], ["stone_slab:5", "Stone Brick Slab"], ["stone_slab:6", "Nether Brick Slab"], ["stone_slab:7", "Quartz Slab"], ["brick_block", "Brick"], ["tnt", "TNT"], ["bookshelf", "Bookshelf"], ["mossy_cobblestone", "Mossy Cobblestone"], ["obsidian", "Obsidian"], ["torch", "Torch"], ["mob_spawner", "Monster Spawner"], ["oak_stairs", "Oak Wood Stairs"], ["chest", "Chest"], ["diamond_ore", "Diamond Ore"], ["diamond_block", "Diamond Block"], ["crafting_table", "Workbench"], ["farmland", "Soil"], ["furnace", "Furnace"], ["lit_furnace", "Burning Furnace"], ["ladder", "Ladder"], ["rail", "Rails"], ["stone_stairs", "Cobblestone Stairs"], ["lever", "Lever"], ["stone_pressure_plate", "Stone Pressure Plate"], ["wooden_pressure_plate", "Wooden Pressure Plate"], ["redstone_ore", "Redstone Ore"], ["redstone_torch", "Redstone Torch (on)"], ["stone_button", "Stone Button"], ["snow_layer", "Snow"], ["ice", "Ice"], ["snow", "Snow Block"], ["cactus", "Cactus"], ["clay", "Clay"], ["jukebox", "Jukebox"], ["fence", "Oak Fence"], ["spruce_fence", "Spruce Fence"], ["birch_fence", "Birch Fence"], ["jungle_fence", "Jungle Fence"], ["dark_oak_fence", "Dark Oak Fence"], ["acacia_fence", "Acacia Fence"], ["pumpkin", "Pumpkin"], ["netherrack", "Netherrack"], ["soul_sand", "Soul Sand"], ["glowstone", "Glowstone"], ["portal", "Portal"], ["lit_pumpkin", "Jack-O-Lantern"], ["trapdoor", "Trapdoor"], ["monster_egg", "Stone (Silverfish)"], ["monster_egg:1", "Cobblestone (Silverfish)"], ["monster_egg:2", "Stone Brick (Silverfish)"], ["monster_egg:3", "Mossey Stone Brick (Silverfish)"], ["monster_egg:4", "Cracked Stone (Silverfish)"], ["monster_egg:5", "Chiseled Stone (Silverfish)"], ["stonebrick", "Stone Brick"], ["stonebrick:1", "Mossy Stone Brick"], ["stonebrick:2", "Cracked Stone Brick"], ["stonebrick:3", "Chiseled Stone Brick"], ["brown_mushroom_block", "Brown Mushroom Cap"], ["red_mushroom_block", "Red Mushroom Cap"], ["iron_bars", "Iron Bars"], ["glass_pane", "Glass Pane"], ["melon_block", "Melon Block"], ["vine", "Vines"], ["fence_gate", "Oak Fence Gate"], ["spruce_fence_gate", "Spruce Fence Gate"], ["birch_fence_gate", "Birch Fence Gate"], ["jungle_fence_gate", "Jungle Fence Gate"], ["dark_oak_fence_gate", "Dark Oak Fence Gate"], ["acacia_fence_gate", "Acacia Fence Gate"], ["brick_stairs", "Brick Stairs"], ["stone_brick_stairs", "Stone Brick Stairs"], ["mycelium", "Mycelium"], ["waterlily", "Lily Pad"], ["nether_brick", "Nether Brick"], ["nether_brick_fence", "Nether Brick Fence"], ["nether_brick_stairs", "Nether Brick Stairs"], ["enchanting_table", "Enchantment Table"], ["end_portal", "End Portal"], ["end_portal_frame", "End Portal Frame"], ["end_stone", "End Stone"], ["dragon_egg", "Dragon Egg"], ["redstone_lamp", "Redstone Lamp (inactive)"], ["double_wooden_slab", "Double Oak Wood Slab"], ["double_wooden_slab:1", "Double Spruce Wood Slab"], ["double_wooden_slab:2", "Double Birch Wood Slab"], ["double_wooden_slab:3", "Double Jungle Wood Slab"], ["double_wooden_slab:4", "Double Acacia Wood Slab"], ["double_wooden_slab:5", "Double Dark Oak Wood Slab"], ["wooden_slab", "Oak Wood Slab"], ["wooden_slab:1", "Spruce Wood Slab"], ["wooden_slab:2", "Birch Wood Slab"], ["wooden_slab:3", "Jungle Wood Slab"], ["wooden_slab:4", "Acacia Wood Slab"], ["wooden_slab:5", "Dark Oak Wood Slab"], ["cocoa", "Cocoa Plant"], ["sandstone_stairs", "Sandstone Stairs"], ["emerald_ore", "Emerald Ore"], ["ender_chest", "Ender Chest"], ["tripwire_hook", "Tripwire Hook"], ["emerald_block", "Emerald Block"], ["spruce_stairs", "Spruce Wood Stairs"], ["birch_stairs", "Birch Wood Stairs"], ["jungle_stairs", "Jungle Wood Stairs"], ["command_block", "Command Block"], ["beacon", "Beacon Block"], ["cobblestone_wall", "Cobblestone Wall"], ["cobblestone_wall:1", "Mossy Cobblestone Wall"], ["wooden_button", "Wooden Button"], ["anvil", "Anvil"], ["anvil:1", "Anvil (Slightly Damaged)"], ["anvil:2", "Anvil (Very Damaged)"], ["trapped_chest", "Trapped Chest"], ["light_weighted_pressure_plate", "Weighted Pressure Plate (light)"], ["heavy_weighted_pressure_plate", "Weighted Pressure Plate (heavy)"], ["daylight_detector", "Daylight Sensor"], ["redstone_block", "Redstone Block"], ["quartz_ore", "Nether Quartz Ore"], ["hopper", "Hopper"], ["quartz", "Nether Quartz"], ["quartz_block", "Quartz Block"], ["quartz_block:1", "Chiseled Quartz Block"], ["quartz_block:2", "Pillar Quartz Block"], ["quartz_stairs", "Quartz Stairs"], ["activator_rail", "Activator Rail"], ["dropper", "Dropper"], ["hardened_clay", "Terracotta"], ["stained_hardened_clay", "Terracotta (white)"], ["stained_hardened_clay:1", "Terracotta (Orange)"], ["stained_hardened_clay:2", "Terracotta (Magenta)"], ["stained_hardened_clay:3", "Terracotta (Light Blue)"], ["stained_hardened_clay:4", "Terracotta (Yellow)"], ["stained_hardened_clay:5", "Terracotta (Lime)"], ["stained_hardened_clay:6", "Terracotta (Pink)"], ["stained_hardened_clay:7", "Terracotta (Gray)"], ["stained_hardened_clay:8", "Terracotta (Light Gray)"], ["stained_hardened_clay:9", "Terracotta (Cyan)"], ["stained_hardened_clay:10", "Terracotta (Purple)"], ["stained_hardened_clay:11", "Terracotta (Blue)"], ["stained_hardened_clay:12", "Terracotta (Brown)"], ["stained_hardened_clay:13", "Terracotta (Green)"], ["stained_hardened_clay:14", "Terracotta (Red)"], ["stained_hardened_clay:15", "Terracotta (Black)"], ["log2", "Wood (Acacia Oak)"], ["log2:1", "Wood (Dark Oak)"], ["acacia_stairs", "Wooden Stairs (Acacia)"], ["dark_oak_stairs", "Wooden Stairs (Dark Oak)"], ["slime", "Slime Block"], ["barrier", "Barrier"], ["iron_trapdoor", "Iron Trap Door"], ["prismarine", "Prismarine"], ["prismarine:1", "Prismarine Bricks"], ["prismarine:2", "Dark Prismarine"], ["sea_lantern", "Sea Lantern"], ["hay_block", "Hay Bale"], ["coal_block", "Block of Coal"], ["packed_ice", "Packed Ice"], ["double_plant", "Sunflower"], ["double_plant:1", "Lilac"], ["double_plant:2", "Double Tall Grass"], ["double_plant:3", "Large Fern"], ["double_plant:4", "Rose Bush"], ["double_plant:5", "Peony"], ["red_sandstone", "Red Sandstone"], ["red_sandstone:1", "Red Sandstone (Chiseled)"], ["red_sandstone:2", "Red Sandstone (Smooth)"], ["red_sandstone_stairs", "Red Sandstone Stairs"], ["double_stone_slab2", "Red Sandstone Slab (Double)"], ["stone_slab2", "Red Sandstone Slab"], ["iron_shovel", "Iron Shovel"], ["iron_pickaxe", "Iron Pickaxe"], ["iron_axe", "Iron Axe"], ["flint_and_steel", "Flint and Steel"], ["apple", "Apple"], ["bow", "Bow"], ["arrow", "Arrow"], ["coal", "Coal"], ["coal:1", "Charcoal"], ["diamond", "Diamond"], ["iron_ingot", "Iron Ingot"], ["iron_nugget", "Iron Nugget"], ["gold_ingot", "Gold Ingot"], ["iron_sword", "Iron Sword"], ["wooden_sword", "Wooden Sword"], ["wooden_shovel", "Wooden Shovel"], ["wooden_pickaxe", "Wooden Pickaxe"], ["wooden_axe", "Wooden Axe"], ["stone_sword", "Stone Sword"], ["stone_shovel", "Stone Shovel"], ["stone_pickaxe", "Stone Pickaxe"], ["stone_axe", "Stone Axe"], ["diamond_sword", "Diamond Sword"], ["diamond_shovel", "Diamond Shovel"], ["diamond_pickaxe", "Diamond Pickaxe"], ["diamond_axe", "Diamond Axe"], ["stick", "Stick"], ["bowl", "Bowl"], ["mushroom_stew", "Mushroom Soup"], ["golden_sword", "Gold Sword"], ["golden_shovel", "Gold Shovel"], ["golden_pickaxe", "Gold Pickaxe"], ["golden_axe", "Gold Axe"], ["string", "String"], ["feather", "Feather"], ["gunpowder", "Sulphur"], ["wooden_hoe", "Wooden Hoe"], ["stone_hoe", "Stone Hoe"], ["iron_hoe", "Iron Hoe"], ["diamond_hoe", "Diamond Hoe"], ["golden_hoe", "Gold Hoe"], ["wheat_seeds", "Wheat Seeds"], ["wheat", "Wheat"], ["bread", "Bread"], ["leather_helmet", "Leather Helmet"], ["leather_chestplate", "Leather Chestplate"], ["leather_leggings", "Leather Leggings"], ["leather_boots", "Leather Boots"], ["chainmail_helmet", "Chainmail Helmet"], ["chainmail_chestplate", "Chainmail Chestplate"], ["chainmail_leggings", "Chainmail Leggings"], ["chainmail_boots", "Chainmail Boots"], ["iron_helmet", "Iron Helmet"], ["iron_chestplate", "Iron Chestplate"], ["iron_leggings", "Iron Leggings"], ["iron_boots", "Iron Boots"], ["diamond_helmet", "Diamond Helmet"], ["diamond_chestplate", "Diamond Chestplate"], ["diamond_leggings", "Diamond Leggings"], ["diamond_boots", "Diamond Boots"], ["golden_helmet", "Gold Helmet"], ["golden_chestplate", "Gold Chestplate"], ["golden_leggings", "Gold Leggings"], ["golden_boots", "Gold Boots"], ["flint", "Flint"], ["porkchop", "Raw Porkchop"], ["cooked_porkchop", "Cooked Porkchop"], ["painting", "Painting"], ["golden_apple", "Golden Apple"], ["golden_apple:1", "Enchanted Golden Apple"], ["sign", "Sign"], ["wooden_door", "Wooden Door"], ["spruce_door", "Spruce Door"], ["birch_door", "Birch Door"], ["jungle_door", "Jungle  Door"], ["acacia_door", "Acacia Door"], ["dark_oak_door", "Dark Oak Door"], ["bucket", "Bucket"], ["water_bucket", "Water Bucket"], ["lava_bucket", "Lava Bucket"], ["minecart", "Minecart"], ["saddle", "Saddle"], ["iron_door", "Iron Door"], ["redstone", "Redstone"], ["snowball", "Snowball"], ["boat", "Boat"], ["leather", "Leather"], ["milk_bucket", "Milk Bucket"], ["brick", "Clay Brick"], ["clay_ball", "Clay Balls"], ["reeds", "Sugarcane"], ["paper", "Paper"], ["book", "Book"], ["slime_ball", "Slimeball"], ["chest_minecart", "Storage Minecart"], ["furnace_minecart", "Powered Minecart"], ["egg", "Egg"], ["compass", "Compass"], ["fishing_rod", "Fishing Rod"], ["clock", "Clock"], ["glowstone_dust", "Glowstone Dust"], ["fish", "Raw Fish"], ["fish:1", "Raw Salmon"], ["fish:2", "Raw Clownfish"], ["fish:3", "Pufferfish"], ["cooked_fish", "Cooked Fish"], ["cooked_fish:1", "Cooked Salmon"], ["dye", "Ink Sack"], ["dye:1", "Rose Red"], ["dye:2", "Cactus Green"], ["dye:3", "Coco Beans"], ["dye:4", "Lapis Lazuli"], ["dye:5", "Purple Dye"], ["dye:6", "Cyan Dye"], ["dye:7", "Light Gray Dye"], ["dye:8", "Gray Dye"], ["dye:9", "Pink Dye"], ["dye:10", "Lime Dye"], ["dye:11", "Dandelion Yellow"], ["dye:12", "Light Blue Dye"], ["dye:13", "Magenta Dye"], ["dye:14", "Orange Dye"], ["dye:15", "Bone Meal"], ["bone", "Bone"], ["sugar", "Sugar"], ["cake", "Cake"], ["bed:0", "White Bed"], ["bed:1", "Orange Bed"], ["bed:2", "Magenta Bed"], ["bed:3", "Light Blue Bed"], ["bed:4", "Yellow Bed"], ["bed:5", "Lime Bed"], ["bed:6", "Pink Bed"], ["bed:7", "Gray Bed"], ["bed:8", "Light Gray Bed"], ["bed:9", "Cyan Bed"], ["bed:10", "Purple Bed"], ["bed:11", "Dark Blue Bed"], ["bed:12", "Brown Bed"], ["bed:13", "Green Bed"], ["bed:14", "Red Bed"], ["bed:15", "Black Bed"], ["repeater", "Redstone Repeater"], ["cookie", "Cookie"], ["filled_map", "Map"], ["shears", "Shears"], ["melon", "Melon"], ["pumpkin_seeds", "Pumpkin Seeds"], ["melon_seeds", "Melon Seeds"], ["beef", "Raw Beef"], ["cooked_beef", "Steak"], ["chicken", "Raw Chicken"], ["cooked_chicken", "Cooked Chicken"], ["rotten_flesh", "Rotten Flesh"], ["ender_pearl", "Ender Pearl"], ["blaze_rod", "Blaze Rod"], ["ghast_tear", "Ghast Tear"], ["gold_nugget", "Gold Nugget"], ["nether_wart", "Nether Wart Seeds"], ["potion", "Water Bottle"], ["potion:16", "(1.8) Awkward Potion"], ["potion:32", "(1.8) Thick Potion"], ["potion:64", "(1.8) Mundane Potion"], ["potion:8193", "(1.8) Regeneration Potion (0:45)"], ["potion:8194", "(1.8) Swiftness Potion (3:00)"], ["potion:8195", "(1.8) Fire Resistance Potion (3:00)"], ["potion:8196", "(1.8) Poison Potion (0:45)"], ["potion:8197", "(1.8) Healing Potion"], ["potion:8198", "(1.8) Night Vision Potion (3:00)"], ["potion:8200", "(1.8) Weakness Potion (1:30)"], ["potion:8201", "(1.8) Strength Potion (3:00)"], ["potion:8202", "(1.8) Slowness Potion (1:30)"], ["potion:8203", "(1.8) Leaping Potion (3:00)"], ["potion:8204", "(1.8) Harming Potion"], ["potion:8205", "(1.8) Water Breathing Potion (3:00)"], ["potion:8206", "(1.8) Invisibility Potion (3:00)"], ["potion:8225", "(1.8) Regeneration Potion II (0:22)"], ["potion:8226", "(1.8) Swiftness Potion II (1:30)"], ["potion:8228", "(1.8) Poison Potion II (0:22)"], ["potion:8229", "(1.8) Healing Potion II"], ["potion:8233", "(1.8) Strength Potion II (1:30)"], ["potion:8235", "(1.8) Leaping Potion II (1:30)"], ["potion:8236", "(1.8) Harming Potion II"], ["potion:8257", "(1.8) Regeneration Potion (2:00)"], ["potion:8258", "(1.8) Swiftness Potion (8:00)"], ["potion:8259", "(1.8) Fire Resistance Potion (8:00)"], ["potion:8260", "(1.8) Poison Potion (2:00)"], ["potion:8262", "(1.8) Night Vision Potion (8:00)"], ["potion:8264", "(1.8) Weakness Potion (4:00)"], ["potion:8265", "(1.8) Strength Potion (8:00)"], ["potion:8266", "(1.8) Slowness Potion (4:00)"], ["potion:8269", "(1.8) Water Breathing Potion (8:00)"], ["potion:8270", "(1.8) Invisibility Potion (8:00)"], ["potion:8289", "(1.8) Regeneration Potion II (1:00)"], ["potion:8290", "(1.8) Swiftness Potion II (4:00)"], ["potion:8292", "(1.8) Poison Potion II (1:00)"], ["potion:8297", "(1.8) Strength Potion II (4:00)"], ["potion:16385", "(1.8) Regeneration Splash (0:33)"], ["potion:16386", "(1.8) Swiftness Splash (2:15)"], ["potion:16387", "(1.8) Fire Resistance Splash (2:15)"], ["potion:16388", "(1.8) Poison Splash (0:33)"], ["potion:16389", "(1.8) Healing Splash"], ["potion:16390", "(1.8) Night Vision Splash (2:15)"], ["potion:16392", "(1.8) Weakness Splash (1:07)"], ["potion:16393", "(1.8) Strength Splash (2:15)"], ["potion:16394", "(1.8) Slowness Splash (1:07)"], ["potion:16396", "(1.8) Harming Splash"], ["potion:16397", "(1.8) Breathing Splash (2:15)"], ["potion:16398", "(1.8) Invisibility Splash (2:15)"], ["potion:16417", "(1.8) Regeneration Splash II (0:16)"], ["potion:16418", "(1.8) Swiftness Splash II (1:07)"], ["potion:16420", "(1.8) Poison Splash II (0:16)"], ["potion:16421", "(1.8) Healing Splash II"], ["potion:16425", "(1.8) Strength Splash II (1:07)"], ["potion:16428", "(1.8) Harming Splash II"], ["potion:16449", "(1.8) Regeneration Splash (1:30)"], ["potion:16450", "(1.8) Swiftness Splash (6:00)"], ["potion:16451", "(1.8) Fire Resistance Splash (6:00)"], ["potion:16452", "(1.8) Poison Splash (1:30)"], ["potion:16454", "(1.8) Night Vision Splash (6:00)"], ["potion:16456", "(1.8) Weakness Splash (3:00)"], ["potion:16457", "(1.8) Strength Splash (6:00)"], ["potion:16458", "(1.8) Slowness Splash (3:00)"], ["potion:16461", "(1.8) Breathing Splash (6:00)"], ["potion:16462", "(1.8) Invisibility Splash (6:00)"], ["potion:16481", "(1.8) Regeneration Splash II (0:45)"], ["potion:16482", "(1.8) Swiftness Splash II (3:00)"], ["potion:16484", "(1.8) Poison Splash II (0:45)"], ["potion:16489", "(1.8) Strength Splash II (3:00)"], ["potion:7", "(1.8) Clear Potion (Unused)"], ["potion:15", "(1.8) Thin Potion (Unused)"], ["potion:23", "(1.8) Bungling Potion (Unused)"], ["potion:31", "(1.8) Debonair Potion (Unused)"], ["potion:39", "(1.8) Charming Potion (Unused)"], ["potion:47", "(1.8) Sparkling Potion (Unused)"], ["potion:55", "(1.8) Rank Potion (Unused)"], ["potion:63", "(1.8) Stinky Potion (Unused)"], ["potion:16391", "(1.8) Clear Splash (Unused)"], ["potion:16399", "(1.8) Thin Splash (Unused)"], ["potion:16407", "(1.8) Bungling Splash (Unused)"], ["potion:16415", "(1.8) Debonair Splash (Unused)"], ["potion:16423", "(1.8) Charming Splash (Unused)"], ["potion:16431", "(1.8) Sparkling Splash (Unused)"], ["potion:16439", "(1.8) Rank Splash (Unused)"], ["potion:16447", "(1.8) Stinky Splash (Unused)"], ["glass_bottle", "Glass Bottle"], ["spider_eye", "Spider Eye"], ["fermented_spider_eye", "Fermented Spider Eye"], ["blaze_powder", "Blaze Powder"], ["magma_cream", "Magma Cream"], ["brewing_stand", "Brewing Stand"], ["cauldron", "Cauldron"], ["ender_eye", "Eye of Ender"], ["speckled_melon", "Glistering Melon"], ["spawn_egg:50", "Spawn Egg Creeper"], ["spawn_egg:51", "Spawn Egg Skeleton"], ["spawn_egg:52", "Spawn Egg Spider"], ["spawn_egg:54", "Spawn Egg Zombie"], ["spawn_egg:55", "Spawn Egg Slime"], ["spawn_egg:56", "Spawn Egg Ghast"], ["spawn_egg:57", "Spawn Egg Pigman"], ["spawn_egg:58", "Spawn Egg Enderman"], ["spawn_egg:59", "Spawn Egg Cave Spider"], ["spawn_egg:60", "Spawn Egg Silverfish"], ["spawn_egg:61", "Spawn Egg Blaze"], ["spawn_egg:62", "Spawn Egg Magma Cube"], ["spawn_egg:65", "Spawn Egg Bat"], ["spawn_egg:66", "Spawn Egg Witch"], ["spawn_egg:67", "Spawn Egg Endermite"], ["spawn_egg:68", "Spawn Egg Guardian"], ["spawn_egg:69", "Spawn Egg Shulker"], ["spawn_egg:90", "Spawn Egg Pig"], ["spawn_egg:91", "Spawn Egg Sheep"], ["spawn_egg:92", "Spawn Egg Cow"], ["spawn_egg:93", "Spawn Egg Chicken"], ["spawn_egg:94", "Spawn Egg Squid"], ["spawn_egg:95", "Spawn Egg Wolf"], ["spawn_egg:96", "Spawn Egg Mooshroom"], ["spawn_egg:98", "Spawn Egg Ocelot"], ["spawn_egg:100", "Spawn Egg Horse"], ["spawn_egg:101", "Spawn Egg Rabbit"], ["spawn_egg:120", "Spawn Egg Villager"], ["spawn_egg:121", "Spawn Egg PolarBear"], ["spawn_egg:122", "Spawn Egg Evoker"], ["spawn_egg:123", "Spawn Egg Vindicator"], ["spawn_egg:124", "Spawn Egg Vex"], ["spawn_egg:125", "Spawn Egg Llama"], ["spawn_egg:126", "Spawn Egg Elder Guardian"], ["spawn_egg:127", "Spawn Egg Wither Skeleton"], ["spawn_egg:128", "Spawn Egg Zombie Villager"], ["spawn_egg:129", "Spawn Egg Stray"], ["spawn_egg:130", "Spawn Egg Husk"], ["spawn_egg:131", "Spawn Egg Skeleton Horse"], ["spawn_egg:132", "Spawn Egg Zombie Horse"], ["spawn_egg:133", "Spawn Egg Donkey"], ["spawn_egg:134", "Spawn Egg Mule"], ["spawn_egg:135", "Spawn Egg Parrot"], ["experience_bottle", "Bottle o' Enchanting"], ["fire_charge", "Fire Charge"], ["writable_book", "Book and Quill"], ["written_book", "Written Book"], ["emerald", "Emerald"], ["item_frame", "Item Frame"], ["flower_pot", "Flower Pot"], ["carrot", "Carrots"], ["potato", "Potato"], ["baked_potato", "Baked Potato"], ["poisonous_potato", "Poisonous Potato"], ["map", "Map"], ["golden_carrot", "Golden Carrot"], ["skull", "Mob Head (Skeleton)"], ["skull:1", "Mob Head (Wither Skeleton)"], ["skull:2", "Mob Head (Zombie)"], ["skull:3", "Mob Head (Human)"], ["skull:4", "Mob Head (Creeper)"], ["skull:5", "Mob Head (Dragon)"], ["carrot_on_a_stick", "Carrot on a Stick"], ["nether_star", "Nether Star"], ["pumpkin_pie", "Pumpkin Pie"], ["fireworks", "Firework Rocket"], ["firework_charge", "Firework Star"], ["enchanted_book", "Enchanted Book"], ["comparator", "Redstone Comparator"], ["netherbrick", "Nether Brick"], ["quartz", "Nether Quartz"], ["tnt_minecart", "Minecart with TNT"], ["hopper_minecart", "Minecart with Hopper"], ["prismarine_shard", "Prismarine Shard"], ["prismarine_crystals", "Prismarine Crystals"], ["rabbit", "Raw Rabbit"], ["cooked_rabbit", "Cooked Rabbit"], ["rabbit_stew", "Rabbit Stew"], ["rabbit_foot", "Rabbit's Foot"], ["rabbit_hide", "Rabbit Hide"], ["armor_stand", "Armor Stand"], ["iron_horse_armor", "Iron Horse Armor"], ["golden_horse_armor", "Gold Horse Armor"], ["diamond_horse_armor", "Diamond Horse Armor"], ["lead", "Lead"], ["name_tag", "Name Tag"], ["command_block_minecart", "Command Block Minecart"], ["mutton", "Raw Mutton"], ["cooked_mutton", "Cooked Mutton"], ["banner", "Banner"], ["record_13", "13 Disc"], ["record_cat", "Cat Disc"], ["record_blocks", "Blocks Disc"], ["record_chirp", "Chirp Disc"], ["record_far", "Far Disc"], ["record_mall", "Mall Disc"], ["record_mellohi", "Mellohi Disc"], ["record_stal", "Stal Disc"], ["record_strad", "Strad Disc"], ["record_ward", "Ward Disc"], ["record_11", "11 Disc"], ["grass_path", "Grass Path"], ["end_rod", "End Rod"], ["splash_potion", "Splash Potion"], ["tipped_arrow", "Tipped Arrow"], ["lingering_potion", "Lingering Potion"], ["spectral_arrow", "Spectral Arrow"], ["beetroot", "Beetroot"], ["beetroot_soup", "Beetroot Soup"], ["beetroot_seeds", "Beetroot Seeds"], ["chorus_fruit", "Chorus Fruit"], ["chorus_fruit_popped", "Popped Chorus Fruit"], ["end_bricks", "End Stone Bricks"], ["purpur_block", "Purpur Block"], ["purpur_pillar", "Purpur Pillar"], ["purpur_stairs", "Purpur Stairs"], ["purpur_slab", "Purpur Slab"], ["shield", "Shield"], ["repeating_command_block", "Repeating Command Block"], ["chain_command_block", "Chain Command Block"], ["end_crystal", "End Crystal"], ["elytra", "Elytra"], ["red_nether_brick", "Red Nether Brick"], ["nether_wart_block", "Nether Wart Block"], ["bone_block", "Bone Block"], ["magma", "Magma Block"], ["dragon_breath", "Dragon Breath"], ["observer", "Observer"], ["totem_of_undying", "Totem of Undying"], ["shulker_shell", "Shulker Shell"], ["white_shulker_box", "White Shulker Box"], ["orange_shulker_box", "Orange Shulker Box"], ["magenta_shulker_box", "Magenta Shulker Box"], ["light_blue_shulker_box", "Light Blue Shulker Box"], ["yellow_shulker_box", "Yellow Shulker Box"], ["lime_shulker_box", "Lime Shulker Box"], ["pink_shulker_box", "Pink Shulker Box"], ["gray_shulker_box", "Gray Shulker Box"], ["silver_shulker_box", "Silver Shulker Box"], ["cyan_shulker_box", "Cyan Shulker Box"], ["purple_shulker_box", "Purple Shulker Box"], ["blue_shulker_box", "Blue Shulker Box"], ["brown_shulker_box", "Brown Shulker Box"], ["green_shulker_box", "Green Shulker Box"], ["red_shulker_box", "Red Shulker Box"], ["black_shulker_box", "Black Shulker Box"], ["concrete", "White Concrete"], ["concrete:1", "Orange Concrete"], ["concrete:2", "Magenta Concrete"], ["concrete:3", "Light Blue Concrete"], ["concrete:4", "Yellow Concrete"], ["concrete:5", "Lime Concrete"], ["concrete:6", "Pink Concrete"], ["concrete:7", "Gray Concrete"], ["concrete:8", "Light Gray Concrete"], ["concrete:9", "Cyan Concrete"], ["concrete:10", "Purple Concrete"], ["concrete:11", "Blue Concrete"], ["concrete:12", "Brown Concrete"], ["concrete:13", "Green Concrete"], ["concrete:14", "Red Concrete"], ["concrete:15", "Black Concrete"], ["concrete_powder", "White Concrete Powder"], ["concrete_powder:1", "Orange Concrete Powder"], ["concrete_powder:2", "Magenta Concrete Powder"], ["concrete_powder:3", "Light Blue Concrete Powder"], ["concrete_powder:4", "Yellow Concrete Powder"], ["concrete_powder:5", "Lime Concrete Powder"], ["concrete_powder:6", "Pink Concrete Powder"], ["concrete_powder:7", "Gray Concrete Powder"], ["concrete_powder:8", "Light Gray Concrete Powder"], ["concrete_powder:9", "Cyan Concrete Powder"], ["concrete_powder:10", "Purple Concrete Powder"], ["concrete_powder:11", "Blue Concrete Powder"], ["concrete_powder:12", "Brown Concrete Powder"], ["concrete_powder:13", "Green Concrete Powder"], ["concrete_powder:14", "Red Concrete Powder"], ["concrete_powder:15", "Black Concrete Powder"], ["white_glazed_terracotta", "White Glazed Terracotta"], ["orange_glazed_terracotta", "Orange Glazed Terracotta"], ["magenta_glazed_terracotta", "Magenta Glazed Terracotta"], ["light_blue_glazed_terracotta", "Light Blue Glazed Terracotta"], ["yellow_glazed_terracotta", "Yellow Glazed Terracotta"], ["lime_glazed_terracotta", "Lime Glazed Terracotta"], ["pink_glazed_terracotta", "Pink Glazed Terracotta"], ["gray_glazed_terracotta", "Gray Glazed Terracotta"], ["silver_glazed_terracotta", "Silver Gray Glazed Terracotta"], ["cyan_glazed_terracotta", "Cyan Glazed Terracotta"], ["purple_glazed_terracotta", "Purple Glazed Terracotta"], ["blue_glazed_terracotta", "Blue Glazed Terracotta"], ["brown_glazed_terracotta", "Brown Glazed Terracotta"], ["green_glazed_terracotta", "Green Glazed Terracotta"], ["red_glazed_terracotta", "Red Glazed Terracotta"], ["black_glazed_terracotta", "Black Glazed Terracotta"]),
    tileIDs = new Array(["0", "Not Set"], ["air", "Air"], ["stone", "Stone", "SB"], ["grass", "Grass Block"], ["dirt", "Dirt", "SB"], ["cobblestone", "Cobblestone"], ["planks", "Wood Planks", "SB"], ["sapling", "Sapling", "SB"], ["bed", "Bed", "SE"], ["bedrock", "Bedrock"], ["flowing_water", "Water", "S"], ["water", "Stationary Water", "S"], ["flowing_lava", "Lava", "S"], ["lava", "Stationary Lava", "S"], ["sand", "Sand", "SB"], ["gravel", "Gravel"], ["gold_ore", "Gold Ore"], ["iron_ore", "Iron Ore"], ["coal_ore", "Coal Ore"], ["log", "Wood", "SB"], ["leaves", "Leaves", "SB"], ["sponge", "Sponge", "SB"], ["glass", "Glass"], ["lapis_ore", "Lapis Lazuli Ore"], ["lapis_block", "Lapis Lazuli Block"], ["dispenser", "Dispenser", "SE"], ["sandstone", "Sandstone", "SB"], ["noteblock", "Note Block", "E"], ["golden_rail", "Powered Rail", "S"], ["detector_rail", "Detector Rail", "S"], ["sticky_piston", "Sticky Piston", "S"], ["web", "Cobweb"], ["tallgrass", "Grass", "SB"], ["deadbush", "Dead Bush"], ["piston", "Piston", "S"], ["piston_head", "Piston Extension", "S"], ["wool", "Wool", "SB"], ["yellow_flower", "Dandelion"], ["red_flower", "Poppy", "SB"], ["brown_mushroom", "Brown Mushroom"], ["red_mushroom", "Red Mushroom"], ["gold_block", "Block of Gold"], ["iron_block", "Block of Iron"], ["double_stone_slab", "Double Stone Slab", "SB"], ["stone_slab", "Stone Slab", "SB"], ["brick_block", "Bricks"], ["tnt", "TNT"], ["bookshelf", "Bookshelf"], ["mossy_cobblestone", "Moss Stone"], ["obsidian", "Obsidian"], ["torch", "Torch", "S"], ["fire", "Fire", "S"], ["mob_spawner", "Monster Spawner", "E"], ["oak_stairs", "Oak Wood Stairs", "S"], ["chest", "Chest", "SE"], ["redstone_wire", "Redstone Wire", "S"], ["diamond_ore", "Diamond Ore"], ["diamond_block", "Block of Diamond"], ["crafting_table", "Crafting Table"], ["wheat", "Wheat", "S"], ["farmland", "Farmland", "S"], ["furnace", "Furnace", "SE"], ["lit_furnace", "Burning Furnace", "SE"], ["standing_sign", "Standing Sign", "SE"], ["wooden_door", "Oak Door", "S"], ["ladder", "Ladder", "S"], ["rail", "Rail", "S"], ["stone_stairs", "Cobblestone Stairs", "S"], ["wall_sign", "Wall Sign", "SE"], ["lever", "Lever", "S"], ["stone_pressure_plate", "Stone Pressure Plate", "S"], ["iron_door", "Iron Door", "S"], ["wooden_pressure_plate", "Wooden Pressure Plate", "S"], ["redstone_ore", "Redstone Ore"], ["lit_redstone_ore", "Glowing Redstone Ore"], ["unlit_redstone_torch", "Redstone Torch (inactive)", "S"], ["redstone_torch", "Redstone Torch (active)", "S"], ["stone_button", "Stone Button", "S"], ["snow_layer", "Snow Layer", "SB"], ["ice", "Ice"], ["snow", "Snow"], ["cactus", "Cactus", "S"], ["clay", "Clay"], ["reeds", "Sugar Cane", "S"], ["jukebox", "Jukebox", "SE"], ["fence", "Fence"], ["pumpkin", "Pumpkin", "S"], ["netherrack", "Netherrack"], ["soul_sand", "Soul Sand"], ["glowstone", "Glowstone"], ["portal", "Nether Portal"], ["lit_pumpkin", "Jack o'Lantern", "S"], ["cake", "Cake", "S"], ["unpowered_repeater", "Redstone Repeater (inactive)", "S"], ["powered_repeater", "Redstone Repeater (active)", "S"], ["stained_glass", "Stained Glass", "SB"], ["trapdoor", "Trapdoor", "S"], ["monster_egg", "Monster Egg", "SB"], ["stonebrick", "Stone Bricks", "SB"], ["brown_mushroom_block", "Brown Mushroom (block)", "S"], ["red_mushroom_block", "Red Mushroom (block)", "S"], ["iron_bars", "Iron Bars"], ["glass_pane", "Glass Pane"], ["melon_block", "Melon"], ["pumpkin_stem", "Pumpkin Stem", "S"], ["melon_stem", "Melon Stem", "S"], ["vine", "Vines", "S"], ["fence_gate", "Fence Gate", "S"], ["brick_stairs", "Brick Stairs", "S"], ["stone_brick_stairs", "Stone Brick Stairs", "S"], ["mycelium", "Mycelium"], ["waterlily", "Lily Pad"], ["nether_brick", "Nether Brick"], ["nether_brick_fence", "Nether Brick Fence"], ["nether_brick_stairs", "Nether Brick Stairs", "S"], ["nether_wart", "Nether Wart", "S"], ["enchanting_table", "Enchantment Table", "E"], ["brewing_stand", "Brewing Stand", "SE"], ["cauldron", "Cauldron", "S"], ["end_portal", "End Portal"], ["end_portal_frame", "End Portal Block"], ["end_stone", "End Stone"], ["dragon_egg", "Dragon Egg"], ["redstone_lamp", "Redstone Lamp (inactive)"], ["lit_redstone_lamp", "Redstone Lamp (active)"], ["double_wooden_slab", "Double Wooden Slab", "SB"], ["wooden_slab", "Wooden Slab", "SB"], ["cocoa", "Cocoa", "S"], ["sandstone_stairs", "Sandstone Stairs", "S"], ["emerald_ore", "Emerald Ore"], ["ender_chest", "Ender Chest", "S"], ["tripwire_hook", "Tripwire Hook", "S"], ["tripwire", "Tripwire", "S"], ["emerald_block", "Block of Emerald"], ["spruce_stairs", "Spruce Wood Stairs", "S"], ["birch_stairs", "Birch Wood Stairs", "S"], ["jungle_stairs", "Jungle Wood Stairs", "S"], ["command_block", "Command Block", "E"], ["beacon", "Beacon", "E"], ["cobblestone_wall", "Cobblestone Wall", "SB"], ["flower_pot", "Flower Pot", "SE"], ["carrots", "Carrot", "S"], ["potatoes", "Potato", "S"], ["wooden_button Wooden", "Button", "S"], ["skull", "Mob head", "SE"], ["anvil", "Anvil", "SB"], ["trapped_chest", "Trapped Chest", "SE"], ["light_weighted_pressure_plate", "Light Weighted Pressure Plate", "S"], ["heavy_weighted_pressure_plate", "Heavy Weighted Pressure Plate", "S"], ["unpowered_comparator", "Redstone Comparator (unpowered)", "S"], ["powered_comparator", "Redstone Comparator (powered)", "S"], ["daylight_detector", "Daylight Sensor"], ["redstone_block", "Block of Redstone"], ["quartz_ore", "Nether Quartz Ore"], ["hopper", "Hopper", "SE"], ["quartz_block", "Block of Quartz", "SB"], ["quartz_stairs", "Quartz Stairs", "S"], ["activator_rail", "Activator Rail", "S"], ["dropper", "Dropper", "SE"], ["stained_glass_pane", "Stained Glass Pane", "SB"], ["leaves2", "Leaves (Acacia/Dark Oak)", "SB"], ["log2", "Wood (Acacia/Dark Oak)", "SB"], ["acacia_stairs", "Acacia Wood Stairs", "S"], ["dark_oak_stairs", "Dark Oak Wood Stairs", "S"], ["slime", "Slime Block"], ["barrier", "Barrier"], ["iron_trapdoor", "Iron Trapdoor", "S"], ["prismarine", "Prismarine", "SB"], ["sea_lantern", "Sea Lantern"], ["hay_block", "Hay Bale", "S"], ["carpet", "Carpet", "SB"], ["hardened_clay", "Hardened Clay"], ["coal_block", "Block of Coal"], ["packed_ice", "Packed Ice"], ["double_plant", "Large Flowers", "SB"], ["standing_banner", "Standing Banner", "SE"], ["wall_banner", "Wall Banner", "SE"], ["daylight_detector_inverted", "Inverted Daylight Sensor"], ["red_sandstone", "Red Sandstone", "SB"], ["red_sandstone_stairs", "Red Sandstone Stairs", "S"], ["double_stone_slab2", "Double Red Sandstone Slab", "S"], ["stone_slab2", "Red Sandstone Slab", "S"], ["spruce_fence_gate", "Spruce Fence Gate"], ["birch_fence_gate", "Birch Fence Gate"], ["jungle_fence_gate", "Jungle Fence Gate"], ["dark_oak_fence_gate", "Dark Oak Fence Gate"], ["acacia_fence_gate", "Acacia Fence Gate"], ["spruce_fence", "Spruce Fence"], ["birch_fence", "Birch Fence"], ["jungle_fence", "Jungle Fence"], ["dark_oak_fence", "Dark Oak Fence"], ["acacia_fence", "Acacia Fence"], ["spruce_door", "Spruce Door", "S"], ["birch_door", "Birch Door", "S"], ["jungle_door", "Jungle Door", "S"], ["acacia_door", "Acacia Door", "S"], ["dark_oak_door", "Dark Oak Door", "S"], ["chorus_flower", "Chorus Flower", "E"], ["chorus_plant", "Chorus Plant", "E"], ["end_gateway", "End Gateway", "E"], ["end_rod", "End Rod"], ["end_bricks", "End Stone Bricks"], ["purpur_block", "Purpur Block"], ["purpur_pillar", "Purpur Pillar"], ["purpur_stairs", "Purpur Stairs"], ["purpur_double_slab", "Purpur Double Slab"], ["purpur_slab", "Purpur Slab"], ["structure_block", "Structure Block"], ["beetroots", "Beetroots"], ["grass_path", "Grass Path"], ["repeating_command_block", "Repeating Command Block"], ["chain_command_block", "Chain Command Block"], ["red_nether_brick", "Red Nether Brick"], ["nether_wart_block", "Nether Wart Block"], ["bone_block", "Bone Block"], ["magma", "Magma Block"], ["observer", "Observer"], ["white_shulker_box", "White Shulker Box", "SE"], ["orange_shulker_box", "Orange Shulker Box", "SE"], ["magenta_shulker_box", "Magenta Shulker Box", "SE"], ["light_blue_shulker_box", "Light Blue Shulker Box", "SE"], ["yellow_shulker_box", "Yellow Shulker Box", "SE"], ["lime_shulker_box", "Lime Shulker Box", "SE"], ["pink_shulker_box", "Pink Shulker Box", "SE"], ["gray_shulker_box", "Gray Shulker Box", "SE"], ["silver_shulker_box", "Silver Shulker Box", "SE"], ["cyan_shulker_box", "Cyan Shulker Box", "SE"], ["purple_shulker_box", "Purple Shulker Box", "SE"], ["blue_shulker_box", "Blue Shulker Box", "SE"], ["brown_shulker_box", "Brown Shulker Box", "SE"], ["green_shulker_box", "Green Shulker Box", "SE"], ["red_shulker_box", "Red Shulker Box", "SE"], ["black_shulker_box", "Black Shulker Box", "SE"], ["concrete", "Concrete"], ["concrete_powder", "Concrete Powder"], ["white_glazed_terracotta", "White Glazed Terracotta"], ["orange_glazed_terracotta", "Orange Glazed Terracotta"], ["magenta_glazed_terracotta", "Magenta Glazed Terracotta"], ["light_blue_glazed_terracotta", "Light Blue Glazed Terracotta"], ["yellow_glazed_terracotta", "Yellow Glazed Terracotta"], ["lime_glazed_terracotta", "Lime Glazed Terracotta"], ["pink_glazed_terracotta", "Pink Glazed Terracotta"], ["gray_glazed_terracotta", "Gray Glazed Terracotta"], ["silver_glazed_terracotta", "Silver Gray Glazed Terracotta"], ["cyan_glazed_terracotta", "Cyan Glazed Terracotta"], ["purple_glazed_terracotta", "Purple Glazed Terracotta"], ["blue_glazed_terracotta", "Blue Glazed Terracotta"], ["brown_glazed_terracotta", "Brown Glazed Terracotta"], ["green_glazed_terracotta", "Green Glazed Terracotta"], ["red_glazed_terracotta", "Red Glazed Terracotta"], ["black_glazed_terracotta", "Black Glazed Terracotta"]),
    llCommandType = "Command Type",
    ttCommandType = "Choose which kind of command you wish to generate.",
    llResetForm = "Reset Form",
    ttResetForm = "These settings will be reset to the default.",
    llSaveAs = "Save As New Command",
    ttSaveAs = "These settings will be saved as a new command with no derivative relationship created.",
    llEnchantAll = "Enchant Non-enchantables (Shows enchant options for all items)",
    ttEnchantAll = "All item selections will allow enchantment options. You may need to reselect the item to show/hide the enchantment options.",
    llAddEntity = "Add Entity",
    ttAddEntity = "Add an entity to the bottom of the stack.",
    llSummonCoords = "Summon Coordinates",
    llRelativeCoords = "Relative Coordinates",
    ttRelativeCoords = "Check if the entity is summoned at a location relative to the command block. Uncheck to summon the entity at a specific co-ordinate.",
    ttSummonX = "The X position to summon the entity at.",
    ttSummonY = "The Y position to summon the entity at.",
    ttSummonZ = "The Z position to summon the entity at.",
    llSpawnCount = "Spawn Count",
    ttSpawnCount = "How many entities the spawner will spawn at one time.",
    llSpawnRange = "Spawn Range",
    ttSpawnRange = "The range of which the entities can spawn.",
    llRequiredPlayerRange = "Required Player Range",
    ttRequiredPlayerRange = "The range of which a player must be in for the spawner to start spawning entities.",
    llDelay = "Delay",
    ttDelay = "The number of ticks before entities spawn when a player is first detected.",
    llMinSpawnDelay = "Min Spawn Delay",
    ttMinSpawnDelay = "After the first spawn, this is the minimum amount of ticks before more entities can spawn.",
    llMaxSpawnDelay = "Max Spawn Delay",
    ttMaxSpawnDelay = "Similar to MinSpawnDelay. After the first spawn, this is the maximum amount of ticks before more entities can spawn.",
    llMaxNearbyEntities = "Max Nearby Entities",
    ttMaxNearbyEntities = "Checks the number of entities within the spawn range ('SpawnRange' tag). If the number of entities it detects is over the set MaxNearbyEntities number, it will not spawn more entities unless the amount of entities within the spawn range is decreased.",
    llSpawnPosition = "Spawn Position",
    leaveBlank = " Leave blank if you do not want the entity to spawn at specific location. Relative Coordinates are not allowed here.",
    ttSpawnX = "The X position to spawn the entity at." + leaveBlank,
    ttSpawnY = "The Y position to spawn the entity at." + leaveBlank,
    ttSpawnZ = "The Z position to spawn the entity at." + leaveBlank,
    ttRelativeSpawner = "Check if the entity is spawned at a location relative to the spawner. Uncheck to spawn the entity at a specific co-ordinate.",
    llPlayerName = "Player Name",
    ttPlayerName = "Enter a specific player's name.",
    llItemSelect = "Item",
    ttItemSelect = "Select the Item.",
    ttSearchFilter = "Search/Filter",
    llEntity = "Entity",
    ttEntity = "Choose your Minecraft entity.",
    ttRemoveFromStack = "Remove this entity from the stack. You need to keep at least one entity in the stack.",
    ttMoveUpStack = "Move this entity up the stack.",
    ttMoveDownStack = "Move this entity down the stack.",
    eeKeepOneEntity = "You need to keep at least one entity",
    llCustomNameEntity = "Name",
    ttCustomNameEntity = "The custom name of this entity. Appears in player death messages and villager trading interfaces, as well as above the entity when your cursor is over it.",
    llHideCustomName = "Hide Name",
    ttHideCustomName = "Entities can have custom names but they are not displayed. This mainly only works on non-mob entities.",
    llUUIDLeast = "UUIDLeast",
    ttUUIDLeast = "The least significant bits of this entity's Universally Unique IDentifier. This is used for leashing mobs to this entity. Set both UUIDLeast and UUIDMost or none at all.",
    llUUIDMost = "UUIDMost",
    ttUUIDMost = "The most significant bits of this entity's Universally Unique IDentifier. This is used for leashing mobs to this entity. Set both UUIDLeast and UUIDMost or none at all.",
    llInvulnerable = "Invulnerable",
    ttInvulnerable = "Check if the entity should not take damage. This applies to living and nonliving entities alike: mobs will not take damage from any source (including potion effects), and cannot be moved by fishing rods, attacks, explosions, or projectiles, and objects such as vehicles and item frames cannot be destroyed unless their supports are removed. Note that these entities can be damaged by players in Creative mode.",
    llInLove = "In Love",
    ttInLove = "Ticks until the mob loses its breeding hearts and stops searching for a mate. Leave blank when not searching for a mate.",
    llAge = "Age",
    ttAge = "The age of the mob in ticks. Set to a negative number if it is a baby. Set to 0 or above if the mob is an adult. Values above 0 are the number of ticks before this mob can breed again.",
    llForcedlAge = "Forced Age",
    ttForcedlAge = "A value of age which will be assigned to this mob when it grows up. Incremented when a baby mob is fed.",
    llOwner = "Owner",
    ttOwner = "Name of the player that owns this mob. Empty string if no owner.",
    llOwnerUUID = "Owner UUID",
    ttOwnerUUID = "UUID of the player that owns this mob.",
    llSitting = "Sitting",
    ttSitting = "Check this if the mob is sitting.",
    llInGround = "In Ground",
    ttInGround = "If the Projectile is in the ground or hit the ground already. Flying arrows can't be picked up.",
    llPickup = "Pickup",
    llPickup0 = "cannot be picked up",
    llPickup1 = "can be picked up by players in survival or creative",
    llPickup2 = "can only be picked up by players in creative",
    ttPickup = "Options regarding if the arrow can be picked up.",
    llPlayerPickup = "Player Pickup",
    ttPlayerPickup = "If pickup is not used, and this is checked, the arrow can be picked up by players.",
    llArrowLife = "Life",
    ttArrowLife = "Increments each tick when an arrow is not moving; resets to 0 if it moves. When it ticks to 1200, the arrow despawns.",
    llArrowDamage = "Damage",
    ttArrowDamage = "Damage dealt by the arrow, in half-hearts.",
    llExplosionPower = "Explosion Power",
    ttExplosionPower = "The power and size of the explosion created by the fireball upon impact. Default value 1.",
    llOwnerName = "Owner Name",
    ttOwnerName = "The name of the player this projectile was thrown by.",
    llPotionAppearance = "Potion",
    ttPotionAppearance = "The appearance  of the potion that was thrown. Click the Status Effects check box to make a custom potion effect.",
    llArmorBody = "Body",
    llArmorLeftArm = "Left Arm",
    llArmorRightArm = "Right Arm",
    llArmorLeftLeg = "Left Leg",
    llArmorRightLeg = "Right Leg",
    llArmorHead = "Head",
    llPose = "Pose",
    llArmorRotation = "Rotation",
    llDisabledSlots = "Disabled Slots",
    disabledSlots = new Array("Hand", "Boot", "Leg", "Chest", "Head"),
    llArmorOperationRemove = "Remove",
    llArmorOperationReplace = "Replace",
    llArmorOperationPlace = "Place",
    llDisabledFor = " disabled for ",
    llShowArms = "Show Arms",
    ttShowArms = "Shows wooden arms on the ArmorStand.",
    llSmall = "Small",
    ttSmall = "A small ArmorStand the size of a baby zombie.",
    llMarker = "Marker",
    ttMarker = "ArmorStand's size will be set to 0, making it invisible and have a tiny hitbox.",
    llInvisible = "Invisible",
    ttInvisible = "The armour stand is invisible, but the armor on it is not.",
    llNoBasePlate = "No Base Plate",
    ttNoBasePlate = "ArmorStand will not display the base beneath it.",
    llNoGravity = "No Gravity",
    ttNoGravity = "If checked the entity will not fall if summoned up in the air.",
    llBaseRotation = "Base Rotation",
    ttBaseRotation = "The rotation angle of the entire ArmorStand.",
    llPersistence = "Persistence Required",
    ttPersistence = "Check to prevent the entity from despawning.",
    llHangUpsideDown = "Hang Upside",
    ttHangUpsideDown = "The bat is summoned upside down. This has no effect if the player is too close or the bat is not under a block.",
    llChickenJockey = "Chicken Jockey",
    ttChickenJockey = "Whether or not the chicken is a jockey for a baby zombie. Set if the chicken can naturally despawn. Other effects are unknown. Baby zombies can still control a ridden chicken even if this is not checked.",
    llEggLayTime = "Egg Lay Time",
    ttEggLayTime = "Number of ticks until the chicken should lay its egg and reset this timer to a new roughly random value.",
    llPowered = "Powered",
    ttPowered = "Set if the creeper is charged from being struck by lightning. Creates a blue aura surrounding the creeper. Charged creepers have a bigger explosion radius, but this can be overridden buy the Explosion Radius setting.",
    llIgnited = "Ignited",
    ttIgnited = "Check if the creeper has been ignited by a Flint and Steel.",
    llExplosionRadius = "Explosion Radius",
    ttExplosionRadius = "The radius of the explosion. The default 3.",
    llFuse = "Fuse",
    ttFuse = "The number of ticks before the creeper will explode (does not affect creepers that fall and explode upon impacting their victim). The default is 30.",
    llCarried = "Carried",
    ttCarried = "Item the Enderman is carrying.",
    llLifeTime = "Life Time",
    ttLifeTime = "How long the Endermite has existed in ticks. Disappears when this reaches around 2400.",
    llBlock = "Block",
    ttBlock = "The Block that is falling.",
    llTileEntityData = "Tile Entity Data",
    ttTileEntityData = "Optional. The tags of the tile entity for this block.",
    llTime = "Time",
    ttTime = "The number of ticks the entity has existed. If set to 0, the moment it ticks to 1, it will vanish if the block at its location has a different ID than the entity's TileID. If the block at its location has the same ID as its TileID when Time ticks from 0 to 1, the block will instead be deleted, and the entity will continue to fall, having overwritten it.",
    llDropItem = "Drop Item",
    ttDropItem = "Check if the block should drop an item that can be picked up when it breaks.",
    llHurtEntities = "Hurt Entities",
    ttHurtEntities = "Check if the block should hurt entities it falls on.",
    llFallHurtMax = "Fall Hurt Max",
    ttFallHurtMax = "The maximum number of hit points of damage to inflict on entities that intersect this FallingSand. For vanilla FallingSand, always 40 (20 hearts).",
    llFallHurtAmount = "Fall Hurt Amount",
    ttFallHurtAmount = "Multiplied by the FallDistance to calculate the amount of damage to inflict. For vanilla FallingSand, always 2.",
    llFWLifeTime = "Life Time",
    ttFWLifeTime = "The number of ticks before this fireworks rocket explodes.",
    llElder = "Elder",
    ttElder = "Check if the Guardian is an Elder Guardian.",
    llExplosionPower = "Explosion Power",
    ttExplosionPower = "The radius of the explosion created by the fireballs this Ghast fires. 1 is the default.",
    llItemAge = "Age",
    ttItemAge = "The number of ticks the item has been 'untouched'. After 6000 ticks (5 minutes) the item is destroyed. If set to -32768, the Age will not decrease, thus the item will not automatically despawn.",
    llItemHealth = "Health",
    ttItemHealth = "The health of the item, which starts at 5. Items take damage from fire, lava, falling anvils, and explosions. The item is destroyed when its health reaches 0.",
    llItemPickupDelay = "Pickup Delay",
    ttItemPickupDelay = "The number of ticks the item cannot be picked up. Decreases by 1 per tick. If set to 32767, the PickupDelay will not decrease, thus the item can never be picked up.",
    llItemOwner = "Owner",
    ttItemOwner = "If not an empty string, only the named player will be able to pick up this item, until it is within 10 seconds of despawning. Used to prevent the wrong player from picking up the spawned item entity.",
    llItemThrower = "Thrower",
    ttItemThrower = "Set to the name of the player who dropped the item, if dropped by a player. Used by the 'Diamonds to you!' achievement.",
    llSlimeSize = "Size",
    ttSlimeSize = "The size of the slime/magmacube. Note that this value is zero-based, so 0 is the smallest slime, 1 is the next larger, etc. The sizes that spawn naturally are 0, 1, and 3.",
    llWasOnGround = "Was On Ground",
    ttWasOnGround = "Check if slime is touching the ground.",
    llCatType = "Cat Type",
    ttCatType = "The type of ocelot/cat this is.",
    llBaby = "Baby",
    ttBaby = "Select to affect if this is to be a baby.",
    llAnger = "Anger",
    ttAnger = "Ticks until the Zombie Pigman becomes neutral. -32,768 to 0 for neutral Zombie Pigmen; 1 to 32,767 for angry Zombie Pigmen.",
    llSaddle = "Saddle",
    ttSaddle = "Check if the pig has a saddle.",
    llPrimedTNTFuse = "Fuse",
    ttPrimedTNTFuse = "Ticks until explosion. Default is instant explosion.",
    llRabbitType = "Rabbit Type",
    ttRabbitType = "Determines the skin of the rabbit. Also determines if rabbit should be hostile.",
    llMoreCarrotTicks = "More Carrot Ticks",
    ttMoreCarrotTicks = "Formerly used for the ticks until the rabbit will 'eat' planted carrots. Depletes every tick until it reaches 0. Was set to a certain value upon eating planted carrots. (UNTESTED)",
    llSaltAndPepper = "Salt &amp; Pepper",
    llBlackAndWhite = "Black &amp; White",
    llKillerRabbit = "Killer Rabbit",
    llSheared = "Sheared",
    ttSheared = "Check if the sheep has been shorn.",
    llSheepColor = "Color",
    ttSheepColor = "The color of the sheep or shulker.",
    llSquidAir = "Air",
    ttSquidAir = "This will specify how many ticks until the squid starts to die.",
    llSkeletonType = "Skeleton Type",
    ttSkeletonType = "The type of Skeleton.",
    llProfession = "Profession",
    ttProfession = "The texture used for this villager. This also influences trading options.",
    llCareer = "Career",
    ttCareer = "The ID of this villager's career. This also influences trading options and the villager's name in the GUI (if it does not have a CustomName). If 0, the next time offers are refreshed, the game will assign a new Career and reset CareerLevel to 1.",
    llCareerLevel = "Career Level",
    ttCareerLevel = "The current level of this villager's trading options. Influences the trading options generated by the villager; if it is greater than their career's maximum level, no new offers are generated. Increments when a trade causes offers to be refreshed. If 0, the next trade to do this will assign a new Career and set CareerLevel to 1. Set to a high enough level and there will be no new trades to release (Career must be set to 1 or above).",
    llWilling = "Willing",
    ttWilling = "Check if the villager is willing to mate. Becomes true after certain trades (those which would cause offers to be refreshed), and false after mating.",
    llFarmer = "Farmer",
    llLibrarian = "Librarian",
    llPriest = "Priest",
    llBlacksmith = "Blacksmith",
    llButcher = "Butcher",
    llGeneric = "Generic",
    llNotSet = "Not Set",
    llFletcher = "Fletcher",
    llFisherman = "Fisherman",
    llShepherd = "Shepherd",
    llCleric = "Cleric",
    llToolSmith = "Tool Smith",
    llArmorer = "Armorer",
    llWeaponSmith = "Weapon Smith",
    llLeatherworker = "Leatherworker",
    llRecipes = "Recipes",
    llMakeOffer = "Make Offer",
    ttMakeOffer = "Create a trade for this Villager.",
    llRewardXP = "Reward XP",
    ttRewardXP = "Check if this trade will provide XP orb drops.",
    llMaxUses = "Max Uses",
    ttMaxUses = "The maximum number of times this trade can be used before it is disabled. Increases by a random amount from 2 to 12 when offers are refreshed.",
    llUses = "Uses",
    ttUses = "The number of times this trade has been used. The trade becomes disabled when this is greater or equal to maxUses.",
    llBuyA = "Buy A (cost)",
    llBuyB = "Buy B (cost)",
    ttBuy = "The Item the Player will give to the Villager",
    llBuyCount = "Count",
    ttBuyCount = "Number of items the player has to give to the Villager.",
    ttSecondaryTrade = "The secondary trade item is optional.",
    llSell = "Sell",
    ttSell = "The Item the Villager will give to the player",
    llRemoveOffer = "Remove Offer",
    ttRemoveOffer = "Remove this a trade from the Villager.",
    llCustomDisplayTile = "Custom Display Tile",
    ttCustomDisplayTile = "Check to display the custom tile in this minecart.",
    llDisplayTile = "Display Tile",
    ttDisplayTile = "The custom display tile.",
    llDisplayOffset = "Display Offset",
    ttDisplayOffset = "The offset of the block displayed in the minecart. Positive values move the block upwards, while negative values move it downwards. A value of 16 will move the block up by exactly one multiple of its height.",
    llPushX = "Push X",
    ttPushX = "Force along X axis, used for smooth acceleration/deceleration.",
    llPushZ = "Push Z",
    ttPushZ = "Force along Z axis, used for smooth acceleration/deceleration.",
    llFuel = "Fuel",
    ttFuel = "The number of ticks until the minecart runs out of fuel.",
    ttBrewingFuel = "The Fuel tag stores how much fuel is remaining.",
    llTransferCooldown = "Transfer Cooldown",
    ttTransferCooldown = "Time until the next transfer, between 1 and 8, or 0 if there is no transfer.",
    llMinecartTNTFuse = "TNT Fuse",
    ttMinecartTNTFuse = "Ticks until explosion or -1 if deactivated.",
    llCommand = "Command",
    ttCommand = "The command entered into the command block.",
    llMineCartSpawnerInstructions = "<b>Instructions</b><ol><li>Open <a href='./' target='_blank'>MCStacker</a> in a new tab in your browser</li><li>Choose Spawner for the Command Type</li><li>Change the spawn settings to suit your needs</li><li>Create the thing you want the MinecartSpawner to spawn</li><li>Copy and paste the command from the other tab into the field below.</li></ol>",
    llSpawnDataTag = "Spawn Data Tag",
    ttSpawnDataTag = "Enter an MCStacker Spawner command unedited into this field.",
    llPlayerCreated = "Player Created",
    ttPlayerCreated = "Check if this golem was created by a player.",
    llInvulTime = "Invulnerable Time",
    ttInvulTime = "The number of ticks of invulnerability left after being initially created. 0 once invulnerability has expired.",
    llAngry = "Angry",
    ttAngry = "Check if the wolf is angry.",
    llCollarColor = "Collar Color",
    ttCollarColor = "The dye color of this wolf's collar. Present even for wild wolves (but does not render); default value is 14.",
    llXPValue = "XP Value",
    ttXPValue = "The amount of experience the orb gives when picked up.",
    llXPHealth = "XP Health",
    ttXPHealth = "The health of the orb, which starts at 5. Orbs take damage from fire, lava, falling anvils, and explosions. The orb is destroyed when its health reaches 0.",
    llIsVillager = "Villager Zombie",
    ttIsVillager = "Select to affect if this is to be an infected villager.",
    llConversionTime = "Conversion Time",
    ttConversionTime = "-1 when not being converted back to a villager, positive for the number of ticks until conversion back into a villager. The regeneration effect will parallel this.",
    llCanBreakDoors = "Can Break Doors",
    ttCanBreakDoors = "Check if the zombie can break doors.",
    llReinforcementChance = "Reinforcement Chance",
    ttReinforcementChance = "Chance that a zombie will spawn another zombie when attacked.",
    ttZombieType = "The type of zombie it is. ",
    llZombieType = "Zombie type",
    llHusk = "Husk",
    llXMotion = "X Motion",
    llYMotion = "Y Motion",
    llZMotion = "Z Motion",
    ttMotion = "X,Y,Z motion values must be formatted as decimals. Examples 0.0, -0.9, 1.0 -1.0. You should set all 3 values or none at all.",
    llCopyMotion = "Copy XYZ to all other entities",
    ttCopyMotion = "This button will copy these motion values into the motion values for the rest of the stack. This is required so that the entire stack moves in the same direction.",
    llCanPlaceOn = "Can Place On",
    ttCanPlaceOn = "For Adventure Mode. Select which blocks this item can be placed on. Note: block subtypes are not available.",
    ttCanPlaceAdd = "Add a block this item can be placed on.",
    ttCanPlaceChoose = "Choose which blocks this item can be placed on",
    llCanDestroy = "Can Destroy",
    ttCanDestroy = "For Adventure Mode. Select which blocks this item can destroy. Note: block subtypes are not available.",
    ttCanDestroyAdd = "Add a block this item can destroy.",
    ttCanDestroyChoose = "Choose which blocks this item can destroy.",
    llHideFlags = "Hide Flags",
    ttHideFlags = "Choose which attributes to hide for this item.",
    llEnchantments = "Enchantments",
    llModifiers = "Modifiers",
    llUnbreakable = "Unbreakable",
    ttHideEnchants = "Hide the Enchantments tooltip for this item.",
    ttHideModifiers = "Hide the Attribute Modifiers tooltip for this item.",
    ttHideUnbreakable = "Hide the Unbreakable tooltip for this item.",
    ttHideCanDestroy = "Hide the 'Can Destroy' tooltip for this item.",
    ttHideCanPlaceOn = "Hide the 'Can Place On' tooltip for this item.",
    llHideOthers = "Hide Others",
    ttHideOthers = "Hide Others",
    ttRemoveBlock = "Remove this Block.",
    llAttributeModifiers = "Attribute Modifiers",
    ttAttributeModifiers = "Display Attribute Modifier settings.",
    llAmount = "Amount",
    ttAmount = "The amount to apply for this attribute modifier",
    llOperation = "Operation",
    ttOperation = "A Modifier's Operation dictates how it modifies an Attribute's Base value. Three operations exist, '+- amount', '+- amount % (additive)', and '+- amount % (multiplicative)'. The mathematical behavior is as follows: Operation 0: Increment X by Amount, Operation 1: Increment Y by X * Amount, Operation 2: Y = Y * (1 + Amount) (equivalent to Increment Y by Y * Amount). The game first sets X = Base, then executes all Operation 0 modifiers, then sets Y = X, then executes all Operation 1 modifiers, and finally executes all Operation 2 modifiers.",
    llOperation0 = "(0) +- amount",
    llOperation1 = "(1) +- amount % (additive)",
    llOperation2 = "(2) +- amount % (multiplicative)",
    ttAttributeModifiersArray = new Array("The maximum health of this mob/player (in half-hearts); determines the highest Health they may be healed to.", "The range in blocks within which a mob with this attribute will target players or other mobs to track. Exiting this range will cause the mob to cease following the player/mob. Actual value used by most mobs is 16; for Zombies it is 40.", "The chance to resist knockback from attacks, explosions, and projectiles. 1.0 is 100% chance for resistance.", "Speed of movement in some unknown metric. The mob/player's maximum speed in blocks/second is a bit over 43 times this value, but can be affected by various conditions.", "Damage dealt by attacks, in half-hearts.", "Measures the amount of protection of armor. Capped at 0 and 30.", "Measures fully-charged attacks per second.", "Ranging from -1024 to 1024. Used when processing loot tables along with the quality or bonus_rolls tag. Currently used for opening chests and chest minecarts, fishing, and player-killed mob drops.", "Increased toughness means less armor defense point reduction from strong attacks"),
    llStatusEffects = "Status Effects",
    ttStatusEffects = "Make multiple potion/status effects.",
    llAmplifier = "Amplifier",
    ttAmplifier = "The potion effect level. 0 is level 1.",
    llDurationSecs = "Duration (secs)",
    ttDurationSecs = "The number of seconds before the effect wears off. MCStacker converts this to ticks.",
    llHideParticles = "Hide particles",
    ttHideParticles = "Make the particle effects for the potion/status effect invisible.",
    statusEffects = new Array(["1", "Speed"], ["2", "Slowness"], ["3", "Haste"], ["4", "Mining Fatigue"], ["5", "Strength"], ["6", "Instant Health"], ["7", "Instant Damage"], ["8", "Jump Boost"], ["9", "Nausea"], ["10", "Regeneration"], ["11", "Resistance"], ["12", "Fire Resistance"], ["13", "Water Breathing"], ["14", "Invisibility"], ["15", "Blindness"], ["16", "Night Vision"], ["17", "Hunger"], ["18", "Weakness"], ["19", "Poison"], ["20", "Wither"], ["21", "Health Boost"], ["22", "Absorption"], ["23", "Saturation"], ["24", "Glowing"], ["25", "Levitation"], ["26", "Luck"], ["27", "Bad Luck"]),
    llHolding = "Holding",
    ttHolding = "The item being held by the Mob or ArmorStand. Depending on the type of entity, this may not render, but may drop when mob is killed depending on the drop chance (does not apply to ArmorStands).",
    llHead = "Head",
    ttHead = "The item in the head slot of the Mob or ArmorStand. Depending on the type of entity and item, this may not render, but may drop when mob is killed depending on the drop chance (does not apply to ArmorStands).",
    llBody = "Body",
    ttBody = "The item in the body slot of the Mob or ArmorStand. Depending on the type of entity and item, this may not render, but may drop when mob is killed depending on the drop chance (does not apply to ArmorStands).",
    llLeg = "Leg",
    ttLeg = "The item in the leg slot of the Mob or ArmorStand. Depending on the type of entity and item, this may not render, but may drop when mob is killed depending on the drop chance (does not apply to ArmorStands).",
    llBoot = "Boot",
    ttBoot = "The item in the boot slot of the Mob or ArmorStand. Depending on the type of entity and item, this may not render, but may drop when mob is killed depending on the drop chance (does not apply to ArmorStands).",
    llSlot = "Slot",
    llPersistenceRequired = "Persistence Required",
    ttPersistenceRequired = "Check if the mob must not despawn naturally.",
    llFallFlying = "Fall Flying",
    ttFallFlying = "The entity will glide if they are wearing elytra in the chest slot.",
    llCanPickUpLoot = "Can Pick Up Loot",
    ttCanPickUpLoot = "Check if the mob can pick up loot (wear armor it picks up, use weapons it picks up).",
    llNoAI = "No AI",
    ttNoAI = "Check to disable the AI for the mob. The mob will not attempt to move and cannot move, to the extent of not falling when normally able.",
    llSilent = "Silent",
    ttSilent = "This entity will not make sound.",
    llRotation = "Rotation",
    llYaw = "Yaw",
    ttYaw = "The entity's rotation clockwise around the Y axis (called yaw). Due west is 0. Does not exceed 360 degrees.",
    llPitch = "Pitch",
    ttPitch = "The entity's declination from the horizon (called pitch). Horizontal is 0. Positive values look downward. Does not exceed positive or negative 90 degrees.",
    llLeashToUUIDLeast = "Leash To UUIDLeast",
    ttLeashToUUIDLeast = "The least significant bits of the Universally Unique IDentifier of the entity this leash connects to.",
    llLeashToUUIDMost = "Leash To UUIDMost",
    ttLeashToUUIDMost = "The most significant bits of the Universally Unique IDentifier of the entity this leash connects to.",
    llHealF = "HealF/Health",
    ttHealF = "Amount of health the entity has. A value of 1 is half a heart.",
    llMaxHealth = "Max Health",
    llFollowRange = "Follow Range",
    llKnockbackResistance = "Knockback Resistance",
    llMovementSpeed = "Movement Speed",
    llAttackDamage = "Attack Damage",
    llArmor = "Armor",
    llAttackSpeed = "Attack Speed",
    llInvulnerable = "Invulnerable",
    ttInvulnerable = "Check if the entity should not take damage. This applies to living and non-living entities alike: mobs will not take damage from any source (including potion effects), and cannot be moved by fishing rods, attacks, explosions, or projectiles, and objects such as vehicles and item frames cannot be destroyed unless their supports are removed. Note that these entities can be damaged by players in Creative mode.",
    llHorseType = "Horse Type",
    ttHorseType = "The type of the horse.",
    llHorse = "Horse",
    llDonkey = "Donkey",
    llMule = "Mule",
    llZombieHorse = "Zombie",
    llSkeletonHorse = "Skeleton",
    llBred = "Bred",
    ttBred = "Unknown. Remains 0 after breeding. Causes horse to become persistent.",
    llEatingHaystack = "Eating Haystack",
    ttEatingHaystack = "Check if the horse is grazing",
    llTame = "Tame",
    ttTame = "Check if the horse is tamed. Mobs will not be able to ride a tamed horse if it has no saddle.",
    llJumpStrength = "Jump Strength",
    ttJumpStrength = "Horse jump strength. Default is 0.7 Maximum is 2.",
    llTemper = "Temper",
    ttTemper = "Ranges from 0 to 100; increases with feeding. Higher values make a horse easier to tame.",
    llHasSaddle = "Has Saddle",
    ttHasSaddle = "Check if the horse has a saddle.",
    llNone = "None",
    llArmorItem = "Armor Item",
    ttArmorItem = "The armor item worn by this horse.",
    llIron = "Iron",
    llGold = "Gold",
    llDiamond = "Diamond",
    llHasChests = "Has Chests",
    ttHasChests = "Check if the Donkey/Mule has chests.",
    llVariant = "Variant",
    ttVariant = "The variant of the horse. Determines colors and patterns.",
    llHorseColors = new Array("White", "Creamy", "Chestnut", "Brown", "Black", "Gray", "Dark Brown"),
    llHorseMarkings = new Array("None", "White", "White Field", "White Dots", "Black Dots"),
    llInvisibleHorse = "Invisible Horse",
    llSkullOwner = "Skull Owner",
    llPlayerSkull = "Player Skull",
    ttChooseHead = "Choose a Player Skull or one of the preselected heads.",
    ttSkullOwnerName = "Enter a Minecraft player's name.",
    llLevel = "Level",
    ttLevel = "The Enchantment Level. Maximum is 127.",
    llUnbreakable = "Unbreakable",
    llItemOptions = "Equipment Enchantments and other options",
    llDamage = "Damage",
    ttDamage = "Set the amount of Damage this item has taken.",
    llEnableColors = "Enable Custom Colors",
    llColor = "Color",
    ttColor = "Change color of this leather item",
    llBannerTag = "Banner Data Tag",
    ttBannerTag = "Enter a valid Banner Data Tag",
    llBannerInstruction = "Head over to <a href='http://www.needcoolshoes.com/banner' target='_blank'>http://www.needcoolshoes.com/banner</a> to generate the banner code. Copy and paste the entire unedited /give command from that website into the box above.",
    llFlightDuration = "Flight Duration",
    ttFlightDuration = "Rough distance (in blocks) that the rocket travels depending on the flight duration: 1 = 12-21 blocks, 2 = 23-38 blocks, 3 = 40-57 blocks, with a few misfiring at 35 and 36 blocks.",
    llAddExplosion = "Add Explosion",
    ttAddExplosion = "Add an explosion to the firework.",
    llSmallBall = "Small Ball",
    llLargeBall = "Large Ball",
    llStar = "Star",
    llCreeper = "Creeper",
    llBurst = "Burst",
    ttExplosionType = "The explosion type.",
    llFlicker = "Flicker",
    ttFlicker = "Check if this explosion will have the twinkle effect.",
    llTrail = "Trail",
    ttTrail = "Check if this explosion will have the trail effect.",
    llRemoveExplosion = "Remove",
    ttRemoveExplosion = "Remove this explosion from the firework.",
    ttAddColor = "Add a color to the explosion.",
    ttRemoveColor = "Remove a color from the explosion.",
    llFadeColor = "Fade",
    ttAddFadeColor = "Add a fade color to the explosion.",
    ttRemoveFadeColor = "Remove a fade color from the explosion.",
    eeFireWorkColorError = "You need at least one color",
    ttHexColor = "Choose a hexadecimal color code. Hexadecimal codes are converted into a valid Minecraft color code",
    llBlockCoords = "Block Coordinates",
    llEndBlockCoords = "Opposite Corner Block Coordinates",
    ttRelativeBlock = "Check if the block is at a location relative to the command block. Uncheck if the block is at a specific co-ordinate.",
    ttBlockX = "The X position of the block",
    ttBlockY = "The Y position of the block",
    ttBlockZ = "The Z position of the block",
    ttBlockEX = "The opposite corner X position to fill to",
    ttBlockEY = "The opposite corner Y position to fill to",
    ttBlockEZ = "The opposite corner Z position to fill to",
    llBlockHandling = "Old Block Handling",
    ttSetBlockhandling = "destroy - The old block drops both itself and its contents (as if destroyed by a player). Plays the appropriate block breaking noise.\n\nkeep - Only air blocks will be changed (non-air blocks will be 'kept').\n\nreplace - The old block drops neither itself nor any contents. Plays no sound.",
    ttFillBlockhandling = "destroy - Replaces all blocks (including air) in the fill region with the specified block, dropping the replaced blocks and block contents as entities as if they had been mined.\n\nhollow - Replaces only blocks on the outer edge of the fill region with the specified block. Inner blocks are changed to air, dropping their contents as entities but not themselves.\n\nkeep - Replaces only air blocks in the fill region with the specified block.\n\noutline - Replaces only blocks on the outer edge of the fill region with the specified block. Inner blocks are not affected.\n\nreplace - Replaces all blocks (including air) in the fill region with the specified block, without dropping blocks or block contents as entities. Optionally, instead of specifying a data tag for the replacing block, block id and data values may be specified to limit which blocks are replaced.",
    llBlock = "Block",
    ttTileSelect = "Tile/Block Select",
    llReplaceBlock = "Replace Block",
    llDataValue = "Data Value",
    ttDataValue = "Data Value for this block",
    ttBlockDataDV = "Data Values do not affect the blockdata command but may affect the Data Tag options available to you.",
    llCustomName = "Custom Name",
    ttCustomName = "Optional. The name of this container, which will display in its GUI where the default name ordinarily is. For Command Blocks, the name will replace the usual '@' when using commands such as 'say' and 'tell'.",
    llLock = "Lock",
    ttLock = "Optional. When not blank, prevents the container from being opened unless the opener is holding an item whose name matches this string.",
    llTextLine = "Text Line",
    ttTextLine = "Text to be displayed",
    llSuccessCountName = "SuccessCountName",
    ttSuccessCountName = "Player name to store success of the last command. Can be a player selector but may only have one resulting target.",
    llSuccessCountObjective = "SuccessCountObjective",
    ttSuccessCountObjective = "Objective's name to store the success of the last command.",
    llAffectedBlocksName = "AffectedBlocksName",
    ttAffectedBlocksName = "Player name to store how many blocks were modified in the last command. Can be a player selector but may only have one resulting target.",
    llAffectedBlocksObjective = "AffectedBlocksObjective",
    ttAffectedBlocksObjective = "Objective's name to store how many blocks were modified in the last command.",
    llAffectedEntitiesName = "AffectedEntitiesName",
    ttAffectedEntitiesName = "Player name to store how many entities were altered in the last command. Can be a player selector but may only have one resulting target.",
    llAffectedEntitiesObjective = "AffectedEntitiesObjective",
    ttAffectedEntitiesObjective = "Objective's name to store how many entities were altered in the last command.",
    llAffectedItemsName = "AffectedItemsName",
    ttAffectedItemsName = "Player name to store how many items were altered in the last command. Can be a player selector but may only have one resulting target.",
    llAffectedItemsObjective = "AffectedItemsObjective",
    ttAffectedItemsObjective = "Objective's name to store how many items were altered in the last command.",
    llQueryResultName = "QueryResultName",
    ttQueryResultName = "Player name to store the query result of the last command. Can be a player selector but may only have one resulting target.",
    llQueryResultObjective = "QueryResultObjective",
    ttQueryResultObjective = "Objective's name to store the query result of the last command.",
    llBeaconLevels = "Levels",
    ttBeaconLevels = "The number of levels available from the pyramid.",
    llPrimaryEffect = "Primary Effect",
    ttBeaconEffect = "The status effect selected",
    llSecondaryEffect = "Secondary Effect",
    llOutputSignal = "OutputSignal",
    ttOutputSignal = "Represents the strength of the analog signal output by this redstone comparator. Likely used because the block itself uses its four bits of metadata to determine its rotation, powered state, and subtraction mode state, and comparators can hold a specific amount of power even in circuits without redstone wire.",
    llSuccessCount = "SuccessCount",
    ttSuccessCount = "Represents the strength of the analog signal output by redstone comparators attached to this command block. Only updated when the command block is activated with a redstone signal.",
    llLastOutput = "LastOutput",
    ttLastOutput = "The last line of output generated by the command block. Still stored even if the gamerule commandBlockOutput is false. Appears in the GUI of the block when right-clicked, and includes a timestamp of when the output was produced.",
    llTrackOutput = "Track Output",
    ttTrackOutput = "Determines whether or not the LastOutput will be stored.",
    llBurnTime = "BurnTime",
    ttBurnTime = "Number of ticks left before the current fuel runs out.",
    llCookTime = "CookTime",
    ttCookTime = "Number of ticks the item has been smelting for. The item finishes smelting when this value reaches 200 (10 seconds). Is reset to 0 if BurnTime reaches 0.",
    llCookTimeTotal = "CookTimeTotal",
    ttCookTimeTotal = "Number of ticks It takes for the item to be smelted.",
    llFlowerPot = "Flower Pot Item",
    ttFlowerPot = "Block and item IDs other than plants may be used, but not all will render. This determines the item dropped by the pot when destroyed.",
    llJukebox = "Jukebox Item",
    ttJukebox = "Items other than records may be used. This determines the item dropped by the jukebox when destroyed.",
    llAddSpawnPotential = "Add Spawn Potential",
    llWeight = "Weight",
    ttWeight = "The chance that this spawn will be picked as compared to other spawn weights. Must be non-negative and at least 1",
    llSpawnData = "Summon Command",
    ttSpawnData = "Copy and paste a summon command from MCStacker into this field. The summon command will be converted into a SpawnPotential data tag.",
    llRemoveSpawnPotential = "Remove",
    ttRemoveSpawnPotential = "Remove this Spawn Potential",
    llNote = "Note",
    ttNote = "Pitch (number of right-clicks).",
    ttPoweredNote = "Determines whether or not the noteblock is being powered by redstone.",
    llSkullType = "Skull Type",
    ttSkullType = "The type of Skull or Head",
    ttHeadGenerator = "In the Player Name field you can type in a player's name or paste in a give command generated from<br><a href='http://minecraft-heads.com/custom/heads-generator' target='_blank'>http://minecraft-heads.com/custom/heads-generator</a>. MCStacker will extract what it needs from it.",
    llRotation = "Rotation",
    ttRotation = "The orientation. Only needed for skulls placed on the ground.",
    llItem = "Item",
    llSlotNo = "Slot Number",
    ttSlotNo = "Select the slot number for the targeted container block. Do not choose a slot number that exceeds the limit of the container.",
    llCount = "Count",
    ttCount = "The number of items in this slot of the container. Do not exceed the maximum stack count. The maximum for most items is 64.",
    llName = "Name",
    ttName = "Name the item.",
    llLore = "Lore",
    ttLore = "Give the item 'Lore'. Lines are separated with commas.",
    llDropChance = "Drop Chance",
    ttDropChance = "The chance of the mob dropping this item when killed.",
    llDropChanceDefault = "Default",
    ttDropChanceUndamaged = "Undamaged",
    ttDropChanceCount = "Equipped Mobs: The amount of items this mob will drop if it drops. Item Summon: The amount to summon. Villager Trade: Number of items the Villager will sell/buy. Give Command: The amount to give",
    ttAnyCommand = "Use this to share commands that do something interesting.",
    llBlack = "Black",
    llRed = "Red",
    llGreen = "Green",
    llBrown = "Brown",
    llDarkBlue = "Dark Blue",
    llPurple = "Purple",
    llCyan = "Cyan",
    llLightGray = "Light Gray",
    llGray = "Gray",
    llPink = "Pink",
    llLime = "Lime",
    llYellow = "Yellow",
    llLightBlue = "Light Blue",
    llMagenta = "Magenta",
    llOrange = "Orange",
    llWhite = "White";
enchantables[0][0] = "Protection", enchantables[1][0] = "Fire Protection", enchantables[2][0] = "Feather Falling", enchantables[3][0] = "Blast Protection", enchantables[4][0] = "Projectile Protection", enchantables[5][0] = "Respiration", enchantables[6][0] = "Aqua Affinity", enchantables[7][0] = "Thorns", enchantables[8][0] = "Depth Strider", enchantables[16][0] = "Sharpness", enchantables[17][0] = "Smite", enchantables[18][0] = "Bane of Anthropods", enchantables[19][0] = "Knockback", enchantables[20][0] = "Fire Aspect", enchantables[21][0] = "Looting", enchantables[32][0] = "Efficiency", enchantables[33][0] = "Silk Touch", enchantables[34][0] = "Unbreaking", enchantables[35][0] = "Fortune", enchantables[48][0] = "Power", enchantables[49][0] = "Punch", enchantables[50][0] = "Flame", enchantables[51][0] = "Infinity", enchantables[61][0] = "Luck of the Sea", enchantables[62][0] = "Lure";
var llWrittenBook = "Written Book",
    llTitle = "Title",
    ttTitle = "Enter the title of the book.",
    llAuthor = "Author",
    ttAuthor = "Enter the author of the book.",
    llGeneration = "Generation",
    ttGeneration = "Choose generation of the book. Copy of copy or tattered books cannot be copied",
    llOriginal = "Original",
    llCopyOfOriginal = "Copy of Original",
    llCopyOfCopy = "Copy of Copy",
    llTattered = "Tattered",
    llAddPage = "Add Page",
    ttAddPage = "Add a Page to the book. Books must have no more than 50 pages.",
    llRemovePage = "Remove Page",
    ttRemovePage = "Remove this page from the book",
    llAddSection = "Add Section",
    ttAddSection = "Text with unique properties are split into sections where they can be formatted and have hover and click events set. Click to add a new text section.",
    llBookText = "Text",
    ttBookText = "The text for this section. Word wrap is automatic. To make a new line in the section, type in &#92;n This is like pushing the enter key.",
    llRemoveSection = "Remove Section",
    ttRemoveSection = "Remove this text section.",
    llTextColor = "Text Color",
    ttTextColor = "Set the color of the text in this section.",
    llTextStyle = "Text Style",
    llBold = "Bold",
    llItalic = "Italic",
    llUnderlined = "Underlined",
    llStrikethrough = "Strikethrough",
    llObfuscated = "Obfuscated",
    llHoverEvent = "Hover Event",
    llClickEvent = "Click Event",
    ttHoverActionType = "Choose if the hover event should run a command, show text, open a URL, change page, show an item, or show an achievement",
    ttClickActionType = "Choose if the click event should run a command, show text, open a URL, change page, show an item, or show an achievement.",
    ttClickHoverAction = "The command to run, URL to open, page to change to, or item, text or achievement to show for the click/hover event. Leave it blank if you don't need it. Note: very long commands fail to work as they are subject to the same command length restrictions as the chat bar.",
    restrictions = new Array("armor stands, mobs, and players (though not all mobs will show or make use of the items)", "armor stands and mobs (though not all mobs will show or make use of the items)", "players", "horses, donkeys, and mules. The item must be a saddle", "horses, The item must be a type of horse armor", "donkeys and mules with chests (THIS DOES NOT WORK. Possible bug in MC)", "villagers"),
    restrictionPart1 = "This slot is only for ",
    restrictionPart2 = ". Make sure you have targeted the appropriate entity.",
    ttSpecifySlot = "Specify the slot for the selected entity.",
    ttSlotNoEntity = "Select the slot number for the targeted entity ",
    llSpecificPlayer = "Specific Player",
    llNearestPlayer = "Nearest Player",
    llAllPlayers = "All Players",
    llRandomPlayer = "Random Player",
    llEntityPlayer = "Entity/Player",
    targetTypes = new Array(["specific", llSpecificPlayer], ["nearest", llNearestPlayer], ["all", llAllPlayers], ["random", llRandomPlayer], ["entity", llEntityPlayer]),
    ttTargetEntityType = "Choose the Type of Entity or leave blank.",
    llPlayer = "Player",
    llDirectionX = "Direction X",
    ttDirectionX = "Number blocks in the positive 'x' direction (i.e., east) from the value you entered in the X field.  Negative values do not work",
    llDirectionY = "Direction Y",
    ttDirectionY = "Number blocks in the positive 'y' direction (i.e., upwards) from the value you entered in the Y field.  Negative values do not work",
    llDirectionZ = "Direction Z",
    ttDirectionZ = "Number blocks in the positive 'z' direction (i.e., south) from the value you entered in the Z field.  Negative values do not work",
    llMinRadius = "Minimum Radius",
    ttMinRadius = "Selects only targets more than this value(in blocks) from the command's execution",
    llMaxRadius = "Maximum Radius",
    ttMaxRadius = "Selects only targets less than this value(in blocks) from the command's execution",
    llTarget = "Target",
    ttTarget = "Choose the type of target selector.",
    ttCountTargets = "Selects only the specified number of targets from qualifying targets.",
    llCountDirection = "Count Direction",
    llNearest = "Nearest",
    ttNearest = "If multiple players/entities are selected, They are usually selected from order of closest to the execution coordinates. This is the default.",
    llFarthest = "Farthest",
    ttFarthest = "Targets are selected in order of farthest to the execution coordinates",
    ttTargetX = "The X value of the command's execution co-ordinate. Tilde (~) is not allowed here.",
    ttTargetY = "The Y value of the command's execution co-ordinate. Tilde (~) is not allowed here.",
    ttTargetZ = "The Z value of the command's execution co-ordinate. Tilde (~) is not allowed here.",
    llSelectionArea = "Selection Area",
    llRadiusSelection = "Radius",
    ttRadiusSelection = "The targets are selected from the radius of the execution co-ordinate.",
    llVolumeSelection = "Volume",
    ttVolumeSelection = "The targets are selected from the execution co-ordinate to the Direction XYZ lengths.",
    llGameMode = "Game Mode",
    ttGameMode = "Players are selected from the specified game mode.",
    llAllModes = "All Modes",
    llSurvival = "Survival",
    llCreative = "Creative",
    llAdventure = "Adventure",
    llSpectator = "Spectator",
    llMinimumXPLevel = "Minimum XP Level",
    ttMinimumXPLevel = "Selects only targets with no less than the specified experience levels.",
    llMaximumXPLevel = "Maximum XP Level",
    ttMaximumXPLevel = "Selects only targets with no more than the specified experience levels.",
    llMinimumVerticalRotation = "Minimum Vertical Rotation",
    ttMinimumVerticalRotation = "Selects only targets with the specified minimum vertical rotation. Vertical rotation values vary from -90.0 facing straight up to 90.0 facing straight down (thus vertical rotation values increase with rotation downwards).",
    llMaximumVerticalRotation = "Maximum Vertical Rotation",
    ttMaximumVerticalRotation = "Selects only targets with the specified maximum vertical rotation. Vertical rotation values vary from -90.0 facing straight up to 90.0 facing straight down (thus vertical rotation values increase with rotation downwards).",
    llMinimumHorizontalRotation = "Minimum Horizontal Rotation",
    ttMinimumHorizontalRotation = "Selects only targets with the specified minimum horizontal rotation. Horizontal rotation values vary from -180.0 (facing due north), to -90.0 (facing due east), to 0.0 (facing due south), to 90.0 (facing due west), to 179.9 (just west of due north) before wrapping back to -180.0 (thus horizontal rotation values increase with rotation to the right, or clockwise viewed from above).",
    llMaximumHorizontalRotation = "Maximum Horizontal Rotation",
    ttMaximumHorizontalRotation = "Selects only targets with the specified maximum horizontal rotation. Horizontal rotation values vary from -180.0 (facing due north), to -90.0 (facing due east), to 0.0 (facing due south), to 90.0 (facing due west), to 179.9 (just west of due north) before wrapping back to -180.0 (thus horizontal rotation values increase with rotation to the right, or clockwise viewed from above).",
    llTeam = "Team",
    ttTeam = "Specify the team name if targeting players by team.",
    llNotThisTeam = "Not this team",
    ttNotThisTeam = "Check if you want to select players not on this team.",
    llNotOnAnyTeam = "Not on any team",
    ttNotOnAnyTeam = "Check if you want to select players not on any team.",
    llEntityPlayerName = "Entity/Player Name",
    ttEntityPlayerName = "Players and Entities with custom names can be targeted with this.",
    llNotThisName = "Not This Name",
    ttNotThisName = "Check to select Players and Entities that do not have this name.",
    llTargetEntityType = "Entity Type",
    llNotThisEntity = "Not This Entity",
    ttNotThisEntity = "Check to select Entities that are not of this type.",
    llAddScoreObjective = "Add Score Objective",
    ttAddScoreObjective = "Target players or entities by score objectives.",
    llScoreObjectiveName = "Score Objective Name",
    ttScoreObjectiveName = "Set the score name here if targeting players by their score. No Spaces are allowed. (Requires Scoreboard objectives to be set up).",
    ttRemoveScoreObjective = "Remove this score objective",
    llMinScore = "Minimum Score",
    ttMinScore = "Selects only targets with no less than the specified score. (Requires Scoreboard objectives to be set up).",
    llMaxScore = "Maximum Score",
    ttMaxScore = "Selects only targets with no more than the specified score. (Requires Scoreboard objectives to be set up).",
    monthNames = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
    llHome = "Home",
    ttHome = "Introduction",
    llHelp = "Help",
    ttHelp = "Information about how to use the MCStacker command management system.",
    llMyCommands = "My Commands",
    ttMyCommands = "List all of the commands you created.",
    llNews = "News",
    ttNews = "News and Changelog",
    llSearchBrowse = "Search / Browse",
    ttSearchBrowse = "Search and browse commands created by other users.",
    llLikes = "Likes",
    ttLikes = "List all of the commands that I liked.",
    llDiscuss = "Discuss",
    ttDiscuss = "Notifications of new comments on commands you've created, commands you've commented on or commands you've liked.",
    llAccountSettings = "Account Settings",
    ttAccountSettings = "Your account settings for changing your email and password.",
    llSignOut = "Sign Out",
    llSignIn = "Sign In",
    eeNotSignedIn = "You are not currently signed in.",
    ttCommandTypeSearch = "Search by this command type.",
    llAny = "Any",
    llAnyCommand = "Any Command",
    llSearchBy = "Search By",
    ttSearchBy = "Narrow down your search by choosing to search only some parts of the saved information.",
    llTitleDescCreator = "Title, Description or Creator",
    llDescription = "Description",
    llCreator = "Creator",
    llTag = "Tag",
    llDerivativesByID = "Derivatives (by id)",
    llComments = "Comments",
    llSearchText = "Search Text",
    ttSearchText = "Search for text in saved commands. Leave blank to browse all commands. Advanced boolean search strings are accepted. A leading plus (+) sign indicates that this word must be present in every result returned. A leading minus (-) sign indicates that this word must not be present in any result returned. ( ) Parentheses are used to group words into sub expressions. A phrase that is enclosed in double quotes matches only results that contain this phrase literally.",
    llSortColName = "Name",
    llSortColDescription = "Description",
    llSortColType = "Type",
    llSortColCreator = "Creator",
    llSortColModified = "Modified",
    llSortColLikes = "Likes",
    llSortColPublic = "Public",
    llSortColAllowComments = "Allow Comments",
    eeNoSavedCommands = "You have no saved commands. Create a command below and choose the 'Save As New Command' button.",
    ttPrivate = "Unchecking this will make your command private. Only you will be able to see it.",
    ttDisallowComments = "Unchecking this will prevent others from commenting on the command. Existing comments will still be displayed",
    llChangePassword = "Change Password",
    ttChangePassword = "Change your password",
    llCurrentPassword = "Current Password",
    llNewPassword = "New Password",
    llConfirmNewPassword = "Confirm New Password",
    ttNewPassword = "The supplied password must be between 6 and 64 characters and can only contain numbers, letters, dashes, or underscores.",
    eePasswordMismatch = "Your passwords do not match.",
    llUpdateEmail = "Update Email Address",
    ttUpdateEmail = "Change your email address",
    llNewEmailAddress = "New Email Address",
    ttNewEmailAddress = "Enter a valid email address.",
    llUsername = "Username/Email",
    llPassword = "Password",
    llRegister = "Register a new account",
    ttRegister = "Register a new account. You will need to provide a valid email address and a unique user name.",
    llForgotPassword = "Forgot your password",
    ttForgotPassword = "Click to reset your password.",
    llConfirmPassword = "Confirm Password",
    llEmail = "Email",
    ttNewUsername = "The supplied user name must be between 3 and 16 characters and can only contain numbers, letters, dashes, underscores or @",
    llPasswordReset = "Password Reset",
    llEnterEmail = "Enter the email that you supplied when you created your account. MCStacker will reset your password and email it to you.",
    llMarkdown = "markdown",
    llCharactersRemaining = "Characters remaining.",
    llPublic = "Public",
    llAllowComments = "Allow Comments",
    llTags = "Tags",
    ttTags = "Tags are used for searching. Enter up to 10 words to describe this command. Separate tag words with commas(,)",
    llSave = "Save",
    ttSave = "Save this command. All changes made in command generator will be saved and will overwrite the previous settings. This action can not be undone.",
    llCancel = "Cancel",
    ttCancel = "Cancel this edit.",
    ttCommandTitle = "Give the command a concise and descriptive title.",
    ttCommandDescription = "Describe what the command does and what it is for.",
    ttCommentBox = "Write a comment for this command.",
    llTagLimitExceeded = "Tag limit exceeded",
    ttRemoveThisTag = "Remove this tag.",
    llReportProblem = "Report a Problem",
    ttReportInstructions = "Use this form to report a problem with this command. For example: bugs, commands that crash Minecraft, or offensive user created content.",
    llProblem = "Problem",
    ttReportEmail = "This field is optional. Provide your email address if you wish to be contacted about the report.",
    llCancelReport = "Cancel",
    ttCancelReport = "Cancel this report.",
    llSubmitReport = "Submit Report",
    ttSubmitReport = "Submit this report.",
    eeReportResponse = "Thanks for your report. This issue will be assessed and actioned.",
    eeCloneResponse = "The command has been cloned to your account and you can now edit it.",
    eeMissingDetails = "You need to give this command a title and description before it can be saved.",
    ttSearchByTag = "Search commands with this tag.",
    llCreatedBy = "Created by",
    llDerivedFrom = "This command is Derived from",
    llBy = "by",
    llLike = "Like",
    llUnlike = "Unlike",
    llComment = "Comment",
    ttComments = "Read and write comments about this command.",
    llCloneCommand = "Clone Command",
    ttCloneCommand = "Clone this command to your account. This is how you make derivative commands.",
    ttLikeUnlike = "Like this command to save it to your 'Likes' list. Unlike it remove it from your 'Likes' list.",
    llEdit = "Edit",
    ttEdit = "Edit details and settings for this command.",
    llDelete = "Delete",
    ttDelete = "Delete this command and all related information associated with it. This can't be undone. All comments, favs and derivative relationships (but not commands derived from this command) will be cleared.",
    llClearDerivativeParent = "Clear Derivative (parent)",
    ttClearDerivativeParent = "Delete the derivative relationship this command has to it's parent command. This can't be undone. It is a good idea to do this if you have significantly modified this command so much that it no longer has anything in common with the parent command.",
    llClearDerivativeChildren = "Clear Derivative (children)",
    ttClearDerivativeChildren = "Delete the derivative relationship this command has to commands that were derived from it. This can't be undone. This affects commands from other users. New commands may continue to be cloned from this command while it is public. It is a good idea to do this if you have significantly modified the command so much that any commands derived from it no longer have anything in common.",
    llSearchDerivatives = "Search Derivatives",
    ttSearchDerivatives = "Search for all direct derivatives of this command.",
    llReport = "Report",
    ttReport = "Report a problem with this command. You can report bugs, commands that crash Minecraft, or offensive content/comments.",
    ttDeleteComment = "You may delete this comment if you wrote it or you are the creator of the command. This can't be undone.",
    llHideComments = "Hide Comments",
    ttHideComments = "Hide the comments.",
    llPostComment = "Post Comment",
    ttPostComment = "Post a comment about this command.",
    llDeleteAllComments = "Delete All Comments",
    ttDeleteAllComments = "Delete all comments associated with this command. This can't be undone.",
    eeDeleteAllComments = "Are you sure you want to delete all comments associated with this command? This action can not be undone.",
    eeDeleteAllCommentsResponse = "Comments Removed",
    ttPostThisComment = "Post this comment.",
    llShareLink = "Share Link",
    eeConfirmDelete = "You are about to permanently delete this command. All comments and likes associated with this command will be removed also. Click OK to permanently delete this command.",
    eeSignInRequired = "You need to sign in to save a command.",
    ttShowHide = "Hide/Show details of this entity",
    llEditXML = "XML Editor",
    ttEditXML = "Edit the XML for this command. This is an advanced feature that requires some basic XML skills.",
    llExportXML = "Export XML",
    ttExportXML = "Export the current settings from this command into the XML editor.",
    llImportXML = "Import XML",
    ttImportXML = "Import the XML from the editor into MCStacker. Ensure the the XML is valid otherwise it will not work.",
    llCloseXML = "Close XML Editor",
    ttCloseXML = "Close the XML Editor. Import your edits before closing if you wish to keep them.",
    ppNews = "news.html",
    ppHelp = "help.html",
    ppAbout = "about.html",
    ppTerms = "termsandprivacy.html",
    ttCommandSign = "The command to run when the sign is clicked by the player. Signs can execute up to four different commands. You can leave this blank if not required.",
    llSignLineMode = "Mode",
    ttSignLineMode = "Choose the mode for this line in the sign. Can display text,an entity's name with a target selector or the score for an objective",
    ttTargetSignLine = "Enter a target selector into this field. The sign will display the name of the entity that qualifies as the target",
    llObjectiveName = "Objective",
    ttObjectiveName = "Enter the name of the scoreboard objective",
    llSouth = "South",
    llWest = "West",
    llNorth = "North",
    llEast = "East",
    llFacing = "Facing",
    ttFacing = "The direction the ItemFrame or Painting faces.",
    llItemRotation = "Item Rotation",
    ttItemRotation = "Degrees the Item has been rotated from the original position (clockwise).",
    llMotive = "Motive",
    ttMotive = "The name of this painting's art",
    llMCVersion = " ",
    ttMCVersion = "Generated commands may differ depending on the Minecraft version you're using.",
    llGlowing = "Glowing",
    ttGlowing = "Make a mob permanently glow. Can be seen through walls. Same as Spectral effect.",
    llHoldingOffHand = "Offhand",
    ttHoldingOffHand = "The item being held by the Mob or ArmorStand in the off hand slot. Depending on the type of entity, this may not render, but may drop when mob is killed depending on the drop chance (does not apply to ArmorStands).",
    ttDropChanceNoLoot = "Stops Looting Enchantment.",
    llTeamEntity = "Team",
    ttTeamEntity = "Specify the team name this entity belongs to.",
    llLeftHanded = "Left Handed",
    ttLeftHanded = "Indicates the left hand is the dominate hand.",
    llPeek = "Peek",
    ttPeek = "Height percentage its head sticks up to.",
    ttAPXYZ = "Set of exact coordinates that the Shulker should be summoned at. This will override the main summon coordinates.",
    llPotionEffect = "Potion ID",
    ttPotionEffect = "The appearance and effect of the potion, splash potion or tipped arrow. Effect can be overridden with custom potion effects",
    llAbove = "Above",
    llBelow = "Below",
    llAttachFace = "Attach Face",
    ttAttachFace = "The side of the neighbouring block the Shulker attaches to.",
    llSpectralDuration = "Glow Duration",
    ttSpectralDuration = "The duration in ticks that the glow effect lasts for",
    llFire = "Fire",
    ttFire = "Number of ticks until the fire is put out. Negative values reflect how long the entity can stand in fire before burning. Default -20 when not on fire.",
    ttAgeChorusFlower = "0-4 is for a freshly-planted Chorus flowers. The age is incremented when Chorus flowers turn around and/or generate new Chorus flowers. At age 5, Chorus flowers will not grow anymore.",
    llExtendDirection = "Extend Directions",
    ttExtendDirection = "Directions in which the Chorus Plant extends from",
    llUp = "Up",
    llDown = "Down",
    llEndGatewayExit = "Exit Portal Coordinates",
    ttEndGatewayExit = "Enter the coordinates that portal will teleport players to.",
    llExactTeleport = "Exact Teleport",
    ttExactTeleport = "Entities will be teleported to the specified coordinates exactly instead of at a safer location around those coordinates.",
    llEndGatewayAge = "Age",
    ttEndGatewayAge = "Determines how long the gateway has existed. When lower than 200, the block will emit a purple beam.",
    llChance = "5% Chance",
    llNever = "Never",
    llAlways = "Always",
    llTargetTags = "Tags",
    ttTargetTags = "Enter tags for targeting entities with target selectors. Separate multiple tags with commas.",
    llLingering = "Lingering",
    ttLingering = "If checked the potion will create the AreaEffectCloud entity when it lands. Unchecked it will be a splash potion.",
    eeBrokenXML = "The XML data failed to import. Please check it carefully for errors. Or email it to bimbimma@gmail.com for assistance.",
    llBeamTarget = "Beam Target",
    ttBTXYZ = "Enter the coordinates of where this Ender Crystal is beaming to. Enter a value in all three boxes or none at all.",
    llHideBase = "Hide Base",
    ttHideBase = "Check to show only the crystal and not the bedrock base.",
    llParticle = "Particle",
    ttParticle = "Choose the particle effect.",
    llReapplicationDelay = "Reapplication Delay",
    ttReapplicationDelay = "The number of ticks an entity standing in the radius gets the effect applied to them. Defaults to 20.",
    llRadius = "Radius",
    ttRadius = "Specifies the radius in blocks that the effect applies in. Changes over time.",
    llRadiusPerTick = "Radius Per Tick",
    ttRadiusPerTick = " How much the radius increases/decreases each tick. Can also be made positive to have the effect grow. Defaults to -0.005f.",
    llRadiusOnUse = "Radius On Use",
    ttRadiusOnUse = "How much the radius increase/decreases when applied to an entity. Defaults to -0.5f.",
    llDuration = "Duration",
    ttDuration = "How long the linger effect lasts in ticks. When the entity's age exceeds this number, it is removed.",
    llDurationOnUse = "Duration On Use",
    ttDurationOnUse = "How much the duration increase/decreases when applied to an entity. Defaults to 0.0f.",
    llAgeAreaEffectCloud = "Age",
    ttAgeAreaEffectCloud = "Number of ticks the entity has been alive. Defaults to 0.",
    llColorAreaEffectCloud = "Color",
    ttColorAreaEffectCloud = "Only changes color when mobspell particle is chosen.",
    llWaitTime = "Wait Time",
    ttWaitTime = "Until the potion AreaEffectCloud's Age hits this number, it is small and does not apply potion effects. Likely used so you can throw a lingering potion and get a small distance away before the effects start. Defaults to 10.",
    llOwnerUUIDLeast = "Owner UUID Least",
    ttOwnerUUIDLeast = "UUIDLeast of the thrower.",
    llOwnerUUIDMost = "Owner UUID Most",
    ttOwnerUUIDMost = "UUIDMost of the thrower.",
    llXpower = "X Power",
    llYpower = "Y Power",
    llZpower = "Z Power",
    ttpower = "Power determines which direction to shoot in. Overrides the direction settings causing the projectile to move in that specified direction.  direction is still required, but can be set to 0. All power values need to be set or none at all.",
    llProjectileLife = "Life",
    ttProjectileLife = "Lifetime of projectile. Should cease to exists of the specified ticks. May not work as expected.",
    llDragonPhase = "Dragon Phase",
    ttDragonPhase = "Determines the current action the dragon will complete.",
    llAuto = "Auto",
    ttAuto = "When set to On, the command block can be activated without a redstone signal. When applied to an Impulse block, its command will activate once. When applied to a Repeat block, it will activate every tick. When applied to Chain blocks, they will not require a redstone signal to activate their command.",
    llPowered = "Powered",
    ttPoweredCB = "Only can be applied to Chained Command Blocks",
    llConditionMet = "Condition Met",
    ttConditionMet = "Whether or not the command block behind the conditional command block was successful in output. Will be 1 if that block is successful and 0 if unsuccessful. Non-conditional command blocks will always be 1",
    llSteps = "Steps",
    ttSteps = "How many steps it takes to attack to the target. The higher it is, the further out of the way the bullet travels to get to the target. If set to 0, it makes no attempt to attack the target and will instead use TXD/TYD/TZD in a straight line (similar to fireballs).",
    llTargetOffset = "Target Offset",
    ttTargetOffset = "The offset direction to travel in accordance with its target.",
    llShulkerBulletOwnerDirection = "Direction",
    ttShulkerBulletOwnerDirection = "Current directional facing",
    llShulkerBulletOwnerUUID = "Owner",
    ttShulkerBulletOwnerUUID = "The owner of the bullet, which is used to determine who had attacked the target. X, Y, and Z are the owner's location while L and M are the UUID pair of the owner. All of which must be defined and must match the initial owner's location.",
    llShulkerBulletTargetUUID = "Owner",
    ttShulkerBulletTargetUUID = "The UUID ",
    llOwnerCoords = "Owner Coords/UUID",
    ttOwnerCoords = "Coordinates and UUID of the owner of this Shulker Bullet. All of which must be defined and must match the initial owner's location.",
    llShulkerBulletTarget = "Target Coords/UUID",
    ttShulkerBulletTarget = "This is the target for the bullet. It will attempt to travel to this target if Steps is higher than 0. This must be set in order to use Steps with a value of 0 to target a specific block location, meaning the target must also exist.",
    llEntityTagSpawnEgg = "Entity Tag",
    ttEntityTag = "Enter the entity tag for this item.",
    llEnityTagInstructionSpawnEgg = 'For the Entity Tag you can either enter something like this: <b>{EntityTag:{id:"minecraft:zombie",IsBaby:1}}</b> or you can put in a summon command like this: <b>/summon zombie ~ ~1 ~ {IsBaby:1}</b>. MCStacker can convert summon commands into EntityTag data for spawn eggs. The limitation is that spawn eggs seem to only work for mob entities that are not riding other mobs.',
    llEntityTagArmorStand = "Entity Tag",
    llEnityTagInstructionArmorStand = "For the Entity Tag you can either enter something like this: <b>{EntityTag:{ShowArms:1,NoBasePlate:1}}</b> or you can put in a summon command like this: <b>/summon ArmorStand ~ ~1 ~ {ShowArms:1,NoBasePlate:1}</b>. MCStacker can convert ArmorStand summon commands into an EntityTag.",
    ttSlotAttributeModifiers = "The 'Slot' string tag can be used to define what slot the item will apply its modifier in.",
    ttProfessionZombie = "The texture used if this zombie is healed and turned back into a villager.",
    llMinecartHopperEnabled = "Enabled",
    ttMinecartHopperEnabled = "This determines whether or not the minecart hopper will pick up items into its inventory.",
    llSkeletonTrap = "Skeleton Trap",
    ttSkeletonTrap = "If a player comes within 10 blocks of this horse, it will be struck by lightning and Four Horsemen of the Apocalypse(Skeletons on Skeleton horses) will spawn and ruin your day.",
    llSkeletonTrapTime = "Skeleton Trap Time",
    ttSkeletonTrapTime = "This value increments once per tick so long as 'SkeletonTrap' is ticked. Once this value reaches 18000, the horse will automatically despawn.",
    llStackID = "Stack ID",
    ttStackID = "Used for advanced passenger stacking system. Give this entity an id if it is to be ridden by another entity. A short alphanumeric identifier is required here or leave this blank for a single entity or for a basic vertical stack.",
    llRidingStackID = "Riding Stack ID",
    ttRidingStackID = "The Stack ID of the entity that this is a passenger of. If this entity is at the bottom of the stack, you may leave this blank as it will be ignored.",
    llBoatType = "Wood Type",
    ttBoatType = "The type of wood this boat is made of",
    llLootTable = "Loot Table",
    ttLootTable = "The path to the Loot Table for this chest.",
    llDeathLootTable = "Death Loot Table",
    ttDeathLootTable = "The path to the Loot Table for this mob when it's killed.",
    llPaymentItem = "Payment Item",
    ttPaymentItem = "Stores the item the player placed within the beacon.",
    llBookText = "Book Text",
    ttBookTextInstruction = "Enter the book text here. Where a new pages is required, type in PAGE_BREAK. This will break the text into pages.",
    llEscapeQuotes = "Escape Quotes",
    ttEscapeQuotes = "All double quotes in the command will be prefixed with a backslash and then the command will be enclosed between two unescaped double quotes.  This may fix the 'Data tag parsing failed' error message. Please Note: This will break commands that have already have been escaped. It will not work well for commands where JSON code has been nested inside other JSON code. For example: a command block that gives a written book with tellraw commands in it. That stuff gets way too complicated. Good luck.",
    ttPoweredSB = "Whether or not the structure block is currently being powered with redstone",
    llShowAir = "Show Air",
    ttShowAir = "Whether or not air blocks will be indicated",
    llShowBoundingBox = "Show Bounding Box",
    ttShowBoundingBox = "Set if the bounding box is to be shown.",
    llIntegrity = "Integrity",
    ttIntegrity = "Removes a percentage of random blocks. 0 removes all blocks, 0.5 removes half, and 1 keeps all blocks.",
    llSeed = "Seed",
    ttSeed = "Used in conjunction with 'Integrity'. Setting a seed will remove the same blocks every time. Leaving blank will result in random blocks being removed each time.",
    llNoPumpkin = "Without Pumkin Head",
    ttNoPumpkin = "Will look like a more conventional snowman",
    llCrit = "Crit",
    ttCrit = "The Arrow will deal critical damage",
    llSpellTicks = "Spell Ticks",
    ttSpellTicks = "The number of ticks until the next spell is cast",
    llVexBounds = "Bounds",
    ttVexBounds = "The Vex will stay close to the boundary co-ordinates",
    llLifeTicks = "Life Ticks",
    ttLifeTicks = "The number of ticks the vex will stay alive for",
    llJohnny = "Johnny",
    ttJohnny = "Kills other mobs when checked",
    llVariant = "Variant",
    llLlamaVariants = ["Creamy", "White", "Brown", "Gray", "Unspecified"],
    ttVariant = "The color of the Llama",
    llDecorItem = "Carpet Color",
    ttDecorItem = "Color of carpet worn by the Llama",
    llLlamaStrength = "Strength",
    ttLlamaStrength = "Ranges from 1 to 5, defaults to 3. Determines the number of items the llama can carry (items = 3 Ã— strength). Also increases the tendency of wolves to run away when attacked by llama spit. Strengths 4 and 5 will cause a wolf to always run away.",
    llParrotVariant = "Variant",
    ttParrotVariant = "The color of the parrot",
    llRed = "Red",
    llGreen = "Green",
    llBlue = "Blue",
    llCyan = "Cyan",
    llGray = "Gray",
    llBedColor = "Bed Color",
    ttBedColor = "Set the color of the bed",
    llUpdateLastExecution = "Update Last Execution",
    ttUpdateLastExecution = "Useful for loops",
    ttPotionColor = "Change the color of the object and particles for the potion, splash potion, lingering potion or tipped arrow.";